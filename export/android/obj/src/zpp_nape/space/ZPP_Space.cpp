#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_hxMath
#include <hxMath.h>
#endif
#ifndef INCLUDED_nape_Config
#include <nape/Config.h>
#endif
#ifndef INCLUDED_nape_callbacks_BodyCallback
#include <nape/callbacks/BodyCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Callback
#include <nape/callbacks/Callback.h>
#endif
#ifndef INCLUDED_nape_callbacks_ConstraintCallback
#include <nape/callbacks/ConstraintCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_InteractionCallback
#include <nape/callbacks/InteractionCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_Listener
#include <nape/callbacks/Listener.h>
#endif
#ifndef INCLUDED_nape_callbacks_ListenerList
#include <nape/callbacks/ListenerList.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreCallback
#include <nape/callbacks/PreCallback.h>
#endif
#ifndef INCLUDED_nape_callbacks_PreFlag
#include <nape/callbacks/PreFlag.h>
#endif
#ifndef INCLUDED_nape_constraint_Constraint
#include <nape/constraint/Constraint.h>
#endif
#ifndef INCLUDED_nape_constraint_ConstraintList
#include <nape/constraint/ConstraintList.h>
#endif
#ifndef INCLUDED_nape_dynamics_ArbiterList
#include <nape/dynamics/ArbiterList.h>
#endif
#ifndef INCLUDED_nape_dynamics_InteractionFilter
#include <nape/dynamics/InteractionFilter.h>
#endif
#ifndef INCLUDED_nape_geom_AABB
#include <nape/geom/AABB.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResult
#include <nape/geom/ConvexResult.h>
#endif
#ifndef INCLUDED_nape_geom_ConvexResultList
#include <nape/geom/ConvexResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Ray
#include <nape/geom/Ray.h>
#endif
#ifndef INCLUDED_nape_geom_RayResult
#include <nape/geom/RayResult.h>
#endif
#ifndef INCLUDED_nape_geom_RayResultList
#include <nape/geom/RayResultList.h>
#endif
#ifndef INCLUDED_nape_geom_Vec2
#include <nape/geom/Vec2.h>
#endif
#ifndef INCLUDED_nape_phys_Body
#include <nape/phys/Body.h>
#endif
#ifndef INCLUDED_nape_phys_BodyList
#include <nape/phys/BodyList.h>
#endif
#ifndef INCLUDED_nape_phys_Compound
#include <nape/phys/Compound.h>
#endif
#ifndef INCLUDED_nape_phys_CompoundList
#include <nape/phys/CompoundList.h>
#endif
#ifndef INCLUDED_nape_phys_Interactor
#include <nape/phys/Interactor.h>
#endif
#ifndef INCLUDED_nape_shape_Shape
#include <nape/shape/Shape.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeIterator
#include <nape/shape/ShapeIterator.h>
#endif
#ifndef INCLUDED_nape_shape_ShapeList
#include <nape/shape/ShapeList.h>
#endif
#ifndef INCLUDED_nape_space_Broadphase
#include <nape/space/Broadphase.h>
#endif
#ifndef INCLUDED_nape_space_Space
#include <nape/space/Space.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_BodyListener
#include <zpp_nape/callbacks/ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Callback
#include <zpp_nape/callbacks/ZPP_Callback.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSet
#include <zpp_nape/callbacks/ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_CbSetPair
#include <zpp_nape/callbacks/ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_ConstraintListener
#include <zpp_nape/callbacks/ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_InteractionListener
#include <zpp_nape/callbacks/ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_Listener
#include <zpp_nape/callbacks/ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_callbacks_ZPP_OptionType
#include <zpp_nape/callbacks/ZPP_OptionType.h>
#endif
#ifndef INCLUDED_zpp_nape_constraint_ZPP_Constraint
#include <zpp_nape/constraint/ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Arbiter
#include <zpp_nape/dynamics/ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_ColArbiter
#include <zpp_nape/dynamics/ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_Contact
#include <zpp_nape/dynamics/ZPP_Contact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_FluidArbiter
#include <zpp_nape/dynamics/ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_IContact
#include <zpp_nape/dynamics/ZPP_IContact.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionFilter
#include <zpp_nape/dynamics/ZPP_InteractionFilter.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_InteractionGroup
#include <zpp_nape/dynamics/ZPP_InteractionGroup.h>
#endif
#ifndef INCLUDED_zpp_nape_dynamics_ZPP_SensorArbiter
#include <zpp_nape/dynamics/ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_AABB
#include <zpp_nape/geom/ZPP_AABB.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Collide
#include <zpp_nape/geom/ZPP_Collide.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ConvexRayResult
#include <zpp_nape/geom/ZPP_ConvexRayResult.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Ray
#include <zpp_nape/geom/ZPP_Ray.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_SweepDistance
#include <zpp_nape/geom/ZPP_SweepDistance.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_ToiEvent
#include <zpp_nape/geom/ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_geom_ZPP_Vec2
#include <zpp_nape/geom/ZPP_Vec2.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Body
#include <zpp_nape/phys/ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Compound
#include <zpp_nape/phys/ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_FluidProperties
#include <zpp_nape/phys/ZPP_FluidProperties.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Interactor
#include <zpp_nape/phys/ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_phys_ZPP_Material
#include <zpp_nape/phys/ZPP_Material.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Circle
#include <zpp_nape/shape/ZPP_Circle.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Edge
#include <zpp_nape/shape/ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Polygon
#include <zpp_nape/shape/ZPP_Polygon.h>
#endif
#ifndef INCLUDED_zpp_nape_shape_ZPP_Shape
#include <zpp_nape/shape/ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBNode
#include <zpp_nape/space/ZPP_AABBNode.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_AABBPair
#include <zpp_nape/space/ZPP_AABBPair.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Broadphase
#include <zpp_nape/space/ZPP_Broadphase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CallbackSet
#include <zpp_nape/space/ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_CbSetManager
#include <zpp_nape/space/ZPP_CbSetManager.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Component
#include <zpp_nape/space/ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_DynAABBPhase
#include <zpp_nape/space/ZPP_DynAABBPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Island
#include <zpp_nape/space/ZPP_Island.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_Space
#include <zpp_nape/space/ZPP_Space.h>
#endif
#ifndef INCLUDED_zpp_nape_space_ZPP_SweepPhase
#include <zpp_nape/space/ZPP_SweepPhase.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ConvexResult
#include <zpp_nape/util/ZNPList_ConvexResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Arbiter
#include <zpp_nape/util/ZNPList_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Body
#include <zpp_nape/util/ZNPList_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_BodyListener
#include <zpp_nape/util/ZNPList_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CallbackSet
#include <zpp_nape/util/ZNPList_ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbSetPair
#include <zpp_nape/util/ZNPList_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_CbType
#include <zpp_nape/util/ZNPList_ZPP_CbType.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ColArbiter
#include <zpp_nape/util/ZNPList_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Component
#include <zpp_nape/util/ZNPList_ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Compound
#include <zpp_nape/util/ZNPList_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Constraint
#include <zpp_nape/util/ZNPList_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ConstraintListener
#include <zpp_nape/util/ZNPList_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Edge
#include <zpp_nape/util/ZNPList_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_FluidArbiter
#include <zpp_nape/util/ZNPList_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_InteractionListener
#include <zpp_nape/util/ZNPList_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Interactor
#include <zpp_nape/util/ZNPList_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Listener
#include <zpp_nape/util/ZNPList_ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_SensorArbiter
#include <zpp_nape/util/ZNPList_ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_Shape
#include <zpp_nape/util/ZNPList_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPList_ZPP_ToiEvent
#include <zpp_nape/util/ZNPList_ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ConvexResult
#include <zpp_nape/util/ZNPNode_ConvexResult.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Arbiter
#include <zpp_nape/util/ZNPNode_ZPP_Arbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Body
#include <zpp_nape/util/ZNPNode_ZPP_Body.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_BodyListener
#include <zpp_nape/util/ZNPNode_ZPP_BodyListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CallbackSet
#include <zpp_nape/util/ZNPNode_ZPP_CallbackSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_CbSetPair
#include <zpp_nape/util/ZNPNode_ZPP_CbSetPair.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ColArbiter
#include <zpp_nape/util/ZNPNode_ZPP_ColArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Component
#include <zpp_nape/util/ZNPNode_ZPP_Component.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Compound
#include <zpp_nape/util/ZNPNode_ZPP_Compound.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Constraint
#include <zpp_nape/util/ZNPNode_ZPP_Constraint.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ConstraintListener
#include <zpp_nape/util/ZNPNode_ZPP_ConstraintListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Edge
#include <zpp_nape/util/ZNPNode_ZPP_Edge.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_FluidArbiter
#include <zpp_nape/util/ZNPNode_ZPP_FluidArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_InteractionListener
#include <zpp_nape/util/ZNPNode_ZPP_InteractionListener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Interactor
#include <zpp_nape/util/ZNPNode_ZPP_Interactor.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Listener
#include <zpp_nape/util/ZNPNode_ZPP_Listener.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_SensorArbiter
#include <zpp_nape/util/ZNPNode_ZPP_SensorArbiter.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_Shape
#include <zpp_nape/util/ZNPNode_ZPP_Shape.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZNPNode_ZPP_ToiEvent
#include <zpp_nape/util/ZNPNode_ZPP_ToiEvent.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ArbiterList
#include <zpp_nape/util/ZPP_ArbiterList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_BodyList
#include <zpp_nape/util/ZPP_BodyList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_CompoundList
#include <zpp_nape/util/ZPP_CompoundList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ConstraintList
#include <zpp_nape/util/ZPP_ConstraintList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ConvexResultList
#include <zpp_nape/util/ZPP_ConvexResultList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Flags
#include <zpp_nape/util/ZPP_Flags.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ListenerList
#include <zpp_nape/util/ZPP_ListenerList.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_PubPool
#include <zpp_nape/util/ZPP_PubPool.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_Set_ZPP_CbSet
#include <zpp_nape/util/ZPP_Set_ZPP_CbSet.h>
#endif
#ifndef INCLUDED_zpp_nape_util_ZPP_ShapeList
#include <zpp_nape/util/ZPP_ShapeList.h>
#endif
namespace zpp_nape{
namespace space{

Void ZPP_Space_obj::__construct(::zpp_nape::geom::ZPP_Vec2 gravity,::nape::space::Broadphase broadphase)
{
HX_STACK_FRAME("zpp_nape.space.ZPP_Space","new",0xcd0d3aaa,"zpp_nape.space.ZPP_Space.new","zpp_nape/space/Space.hx",1379,0x2b65ed03)
HX_STACK_THIS(this)
HX_STACK_ARG(gravity,"gravity")
HX_STACK_ARG(broadphase,"broadphase")
{
	HX_STACK_LINE(5857)
	this->prelisteners = null();
	HX_STACK_LINE(5856)
	this->precb = null();
	HX_STACK_LINE(5345)
	this->continuous = false;
	HX_STACK_LINE(3354)
	this->toiEvents = null();
	HX_STACK_LINE(3013)
	this->pre_dt = 0.0;
	HX_STACK_LINE(2611)
	this->convexShapeList = null();
	HX_STACK_LINE(1555)
	this->cbsets = null();
	HX_STACK_LINE(1554)
	this->callbackset_list = null();
	HX_STACK_LINE(1553)
	this->callbacks = null();
	HX_STACK_LINE(1552)
	this->wrap_listeners = null();
	HX_STACK_LINE(1551)
	this->listeners = null();
	HX_STACK_LINE(1550)
	this->islands = null();
	HX_STACK_LINE(1549)
	this->staticsleep = null();
	HX_STACK_LINE(1548)
	this->wrap_livecon = null();
	HX_STACK_LINE(1547)
	this->live_constraints = null();
	HX_STACK_LINE(1546)
	this->wrap_live = null();
	HX_STACK_LINE(1545)
	this->live = null();
	HX_STACK_LINE(1544)
	this->wrap_arbiters = null();
	HX_STACK_LINE(1543)
	this->s_arbiters = null();
	HX_STACK_LINE(1542)
	this->f_arbiters = null();
	HX_STACK_LINE(1541)
	this->c_arbiters_false = null();
	HX_STACK_LINE(1540)
	this->c_arbiters_true = null();
	HX_STACK_LINE(1538)
	this->sortcontacts = false;
	HX_STACK_LINE(1537)
	this->time = 0.0;
	HX_STACK_LINE(1536)
	this->midstep = false;
	HX_STACK_LINE(1535)
	this->stamp = (int)0;
	HX_STACK_LINE(1534)
	this->global_ang_drag = 0.0;
	HX_STACK_LINE(1533)
	this->global_lin_drag = 0.0;
	HX_STACK_LINE(1532)
	this->__static = null();
	HX_STACK_LINE(1531)
	this->bphase = null();
	HX_STACK_LINE(1530)
	this->kinematics = null();
	HX_STACK_LINE(1529)
	this->wrap_constraints = null();
	HX_STACK_LINE(1528)
	this->constraints = null();
	HX_STACK_LINE(1527)
	this->wrap_compounds = null();
	HX_STACK_LINE(1526)
	this->compounds = null();
	HX_STACK_LINE(1525)
	this->wrap_bodies = null();
	HX_STACK_LINE(1524)
	this->bodies = null();
	HX_STACK_LINE(1384)
	this->wrap_gravity = null();
	HX_STACK_LINE(1383)
	this->gravityy = 0.0;
	HX_STACK_LINE(1382)
	this->gravityx = 0.0;
	HX_STACK_LINE(1381)
	this->userData = null();
	HX_STACK_LINE(1380)
	this->outer = null();
	HX_STACK_LINE(1889)
	::zpp_nape::util::ZNPList_ZPP_ToiEvent _g = ::zpp_nape::util::ZNPList_ZPP_ToiEvent_obj::__new();		HX_STACK_VAR(_g,"_g");
	HX_STACK_LINE(1889)
	this->toiEvents = _g;
	HX_STACK_LINE(1890)
	this->global_lin_drag = 0.015;
	HX_STACK_LINE(1891)
	this->global_ang_drag = 0.015;
	HX_STACK_LINE(1895)
	::nape::callbacks::PreCallback _g1 = ::nape::callbacks::PreCallback_obj::__new();		HX_STACK_VAR(_g1,"_g1");
	HX_STACK_LINE(1895)
	this->precb = _g1;
	HX_STACK_LINE(1896)
	::zpp_nape::callbacks::ZPP_Callback _g2 = ::zpp_nape::callbacks::ZPP_Callback_obj::__new();		HX_STACK_VAR(_g2,"_g2");
	HX_STACK_LINE(1896)
	this->precb->zpp_inner = _g2;
	HX_STACK_LINE(1900)
	this->sortcontacts = true;
	HX_STACK_LINE(1901)
	this->pre_dt = 0.0;
	struct _Function_1_1{
		inline static bool Block( ::nape::space::Broadphase &broadphase){
			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",1902,0x2b65ed03)
			{
				HX_STACK_LINE(1902)
				::nape::space::Broadphase _g4;		HX_STACK_VAR(_g4,"_g4");
				HX_STACK_LINE(1902)
				{
					HX_STACK_LINE(1902)
					if (((::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE == null()))){
						HX_STACK_LINE(1902)
						::zpp_nape::util::ZPP_Flags_obj::internal = true;
						HX_STACK_LINE(1902)
						::nape::space::Broadphase _g3 = ::nape::space::Broadphase_obj::__new();		HX_STACK_VAR(_g3,"_g3");
						HX_STACK_LINE(1902)
						::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE = _g3;
						HX_STACK_LINE(1902)
						::zpp_nape::util::ZPP_Flags_obj::internal = false;
					}
					HX_STACK_LINE(1902)
					_g4 = ::zpp_nape::util::ZPP_Flags_obj::Broadphase_DYNAMIC_AABB_TREE;
				}
				HX_STACK_LINE(1902)
				return (broadphase == _g4);
			}
			return null();
		}
	};
	HX_STACK_LINE(1902)
	if (((  ((!(((broadphase == null()))))) ? bool(_Function_1_1::Block(broadphase)) : bool(true) ))){
		HX_STACK_LINE(1902)
		::zpp_nape::space::ZPP_DynAABBPhase _g5 = ::zpp_nape::space::ZPP_DynAABBPhase_obj::__new(hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(_g5,"_g5");
		HX_STACK_LINE(1902)
		this->bphase = _g5;
	}
	else{
		HX_STACK_LINE(1903)
		::nape::space::Broadphase _g7;		HX_STACK_VAR(_g7,"_g7");
		HX_STACK_LINE(1903)
		{
			HX_STACK_LINE(1903)
			if (((::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE == null()))){
				HX_STACK_LINE(1903)
				::zpp_nape::util::ZPP_Flags_obj::internal = true;
				HX_STACK_LINE(1903)
				::nape::space::Broadphase _g6 = ::nape::space::Broadphase_obj::__new();		HX_STACK_VAR(_g6,"_g6");
				HX_STACK_LINE(1903)
				::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE = _g6;
				HX_STACK_LINE(1903)
				::zpp_nape::util::ZPP_Flags_obj::internal = false;
			}
			HX_STACK_LINE(1903)
			_g7 = ::zpp_nape::util::ZPP_Flags_obj::Broadphase_SWEEP_AND_PRUNE;
		}
		HX_STACK_LINE(1903)
		if (((broadphase == _g7))){
			HX_STACK_LINE(1903)
			::zpp_nape::space::ZPP_SweepPhase _g8 = ::zpp_nape::space::ZPP_SweepPhase_obj::__new(hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(_g8,"_g8");
			HX_STACK_LINE(1903)
			this->bphase = _g8;
		}
	}
	HX_STACK_LINE(1904)
	this->time = 0.0;
	HX_STACK_LINE(1905)
	::zpp_nape::space::ZPP_Space me = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(me,"me");
	HX_STACK_LINE(1906)
	if (((gravity != null()))){
		HX_STACK_LINE(1907)
		this->gravityx = gravity->x;
		HX_STACK_LINE(1908)
		this->gravityy = gravity->y;
		HX_STACK_LINE(1917)
		{
		}
	}
	else{
		HX_STACK_LINE(1927)
		this->gravityx = (int)0;
		HX_STACK_LINE(1928)
		this->gravityy = (int)0;
		HX_STACK_LINE(1937)
		{
		}
	}
	HX_STACK_LINE(1946)
	::zpp_nape::util::ZNPList_ZPP_Body _g9 = ::zpp_nape::util::ZNPList_ZPP_Body_obj::__new();		HX_STACK_VAR(_g9,"_g9");
	HX_STACK_LINE(1946)
	this->bodies = _g9;
	HX_STACK_LINE(1947)
	::nape::phys::BodyList _g10 = ::zpp_nape::util::ZPP_BodyList_obj::get(this->bodies,null());		HX_STACK_VAR(_g10,"_g10");
	HX_STACK_LINE(1947)
	this->wrap_bodies = _g10;
	HX_STACK_LINE(1948)
	this->wrap_bodies->zpp_inner->adder = this->bodies_adder_dyn();
	HX_STACK_LINE(1949)
	this->wrap_bodies->zpp_inner->subber = this->bodies_subber_dyn();
	HX_STACK_LINE(1953)
	::zpp_nape::util::ZNPList_ZPP_Compound _g11 = ::zpp_nape::util::ZNPList_ZPP_Compound_obj::__new();		HX_STACK_VAR(_g11,"_g11");
	HX_STACK_LINE(1953)
	this->compounds = _g11;
	HX_STACK_LINE(1954)
	::nape::phys::CompoundList _g12 = ::zpp_nape::util::ZPP_CompoundList_obj::get(this->compounds,null());		HX_STACK_VAR(_g12,"_g12");
	HX_STACK_LINE(1954)
	this->wrap_compounds = _g12;
	HX_STACK_LINE(1955)
	this->wrap_compounds->zpp_inner->adder = this->compounds_adder_dyn();
	HX_STACK_LINE(1956)
	this->wrap_compounds->zpp_inner->subber = this->compounds_subber_dyn();
	HX_STACK_LINE(1960)
	::zpp_nape::util::ZNPList_ZPP_Body _g13 = ::zpp_nape::util::ZNPList_ZPP_Body_obj::__new();		HX_STACK_VAR(_g13,"_g13");
	HX_STACK_LINE(1960)
	this->kinematics = _g13;
	HX_STACK_LINE(1961)
	::zpp_nape::util::ZNPList_ZPP_ColArbiter _g14 = ::zpp_nape::util::ZNPList_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(_g14,"_g14");
	HX_STACK_LINE(1961)
	this->c_arbiters_true = _g14;
	HX_STACK_LINE(1962)
	::zpp_nape::util::ZNPList_ZPP_ColArbiter _g15 = ::zpp_nape::util::ZNPList_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(_g15,"_g15");
	HX_STACK_LINE(1962)
	this->c_arbiters_false = _g15;
	HX_STACK_LINE(1963)
	::zpp_nape::util::ZNPList_ZPP_FluidArbiter _g16 = ::zpp_nape::util::ZNPList_ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(_g16,"_g16");
	HX_STACK_LINE(1963)
	this->f_arbiters = _g16;
	HX_STACK_LINE(1964)
	::zpp_nape::util::ZNPList_ZPP_SensorArbiter _g17 = ::zpp_nape::util::ZNPList_ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(_g17,"_g17");
	HX_STACK_LINE(1964)
	this->s_arbiters = _g17;
	HX_STACK_LINE(1965)
	::zpp_nape::space::ZPP_Island _g18 = ::zpp_nape::space::ZPP_Island_obj::__new();		HX_STACK_VAR(_g18,"_g18");
	HX_STACK_LINE(1965)
	this->islands = _g18;
	HX_STACK_LINE(1966)
	::zpp_nape::util::ZNPList_ZPP_Body _g19 = ::zpp_nape::util::ZNPList_ZPP_Body_obj::__new();		HX_STACK_VAR(_g19,"_g19");
	HX_STACK_LINE(1966)
	this->live = _g19;
	HX_STACK_LINE(1967)
	::nape::phys::BodyList _g20 = ::zpp_nape::util::ZPP_BodyList_obj::get(this->live,true);		HX_STACK_VAR(_g20,"_g20");
	HX_STACK_LINE(1967)
	this->wrap_live = _g20;
	HX_STACK_LINE(1968)
	::zpp_nape::util::ZNPList_ZPP_Body _g21 = ::zpp_nape::util::ZNPList_ZPP_Body_obj::__new();		HX_STACK_VAR(_g21,"_g21");
	HX_STACK_LINE(1968)
	this->staticsleep = _g21;
	HX_STACK_LINE(1969)
	::zpp_nape::util::ZNPList_ZPP_Constraint _g22 = ::zpp_nape::util::ZNPList_ZPP_Constraint_obj::__new();		HX_STACK_VAR(_g22,"_g22");
	HX_STACK_LINE(1969)
	this->constraints = _g22;
	HX_STACK_LINE(1970)
	::nape::constraint::ConstraintList _g23 = ::zpp_nape::util::ZPP_ConstraintList_obj::get(this->constraints,null());		HX_STACK_VAR(_g23,"_g23");
	HX_STACK_LINE(1970)
	this->wrap_constraints = _g23;
	HX_STACK_LINE(1971)
	this->wrap_constraints->zpp_inner->adder = this->constraints_adder_dyn();
	HX_STACK_LINE(1972)
	this->wrap_constraints->zpp_inner->subber = this->constraints_subber_dyn();
	HX_STACK_LINE(1976)
	::zpp_nape::util::ZNPList_ZPP_Constraint _g24 = ::zpp_nape::util::ZNPList_ZPP_Constraint_obj::__new();		HX_STACK_VAR(_g24,"_g24");
	HX_STACK_LINE(1976)
	this->live_constraints = _g24;
	HX_STACK_LINE(1977)
	::nape::constraint::ConstraintList _g25 = ::zpp_nape::util::ZPP_ConstraintList_obj::get(this->live_constraints,true);		HX_STACK_VAR(_g25,"_g25");
	HX_STACK_LINE(1977)
	this->wrap_livecon = _g25;
	HX_STACK_LINE(1978)
	::nape::phys::Body _g26 = ::zpp_nape::phys::ZPP_Body_obj::__static();		HX_STACK_VAR(_g26,"_g26");
	HX_STACK_LINE(1978)
	this->__static = _g26;
	HX_STACK_LINE(1979)
	this->__static->zpp_inner->space = hx::ObjectPtr<OBJ_>(this);
	HX_STACK_LINE(1980)
	::zpp_nape::callbacks::ZPP_Callback _g27 = ::zpp_nape::callbacks::ZPP_Callback_obj::__new();		HX_STACK_VAR(_g27,"_g27");
	HX_STACK_LINE(1980)
	this->callbacks = _g27;
	HX_STACK_LINE(1981)
	this->midstep = false;
	HX_STACK_LINE(1982)
	::zpp_nape::util::ZNPList_ZPP_Listener _g28 = ::zpp_nape::util::ZNPList_ZPP_Listener_obj::__new();		HX_STACK_VAR(_g28,"_g28");
	HX_STACK_LINE(1982)
	this->listeners = _g28;
	HX_STACK_LINE(1983)
	::nape::callbacks::ListenerList _g29 = ::zpp_nape::util::ZPP_ListenerList_obj::get(this->listeners,null());		HX_STACK_VAR(_g29,"_g29");
	HX_STACK_LINE(1983)
	this->wrap_listeners = _g29;
	HX_STACK_LINE(1984)
	this->wrap_listeners->zpp_inner->adder = this->listeners_adder_dyn();
	HX_STACK_LINE(1985)
	this->wrap_listeners->zpp_inner->subber = this->listeners_subber_dyn();
	HX_STACK_LINE(1989)
	::zpp_nape::space::ZPP_CallbackSet _g30 = ::zpp_nape::space::ZPP_CallbackSet_obj::__new();		HX_STACK_VAR(_g30,"_g30");
	HX_STACK_LINE(1989)
	this->callbackset_list = _g30;
	HX_STACK_LINE(1990)
	::zpp_nape::util::ZNPList_ZPP_Interactor _g31 = ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g31,"_g31");
	HX_STACK_LINE(1990)
	this->mrca1 = _g31;
	HX_STACK_LINE(1991)
	::zpp_nape::util::ZNPList_ZPP_Interactor _g32 = ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g32,"_g32");
	HX_STACK_LINE(1991)
	this->mrca2 = _g32;
	HX_STACK_LINE(1992)
	::zpp_nape::util::ZNPList_ZPP_InteractionListener _g33 = ::zpp_nape::util::ZNPList_ZPP_InteractionListener_obj::__new();		HX_STACK_VAR(_g33,"_g33");
	HX_STACK_LINE(1992)
	this->prelisteners = _g33;
	HX_STACK_LINE(1993)
	::zpp_nape::space::ZPP_CbSetManager _g34 = ::zpp_nape::space::ZPP_CbSetManager_obj::__new(hx::ObjectPtr<OBJ_>(this));		HX_STACK_VAR(_g34,"_g34");
	HX_STACK_LINE(1993)
	this->cbsets = _g34;
}
;
	return null();
}

//ZPP_Space_obj::~ZPP_Space_obj() { }

Dynamic ZPP_Space_obj::__CreateEmpty() { return  new ZPP_Space_obj; }
hx::ObjectPtr< ZPP_Space_obj > ZPP_Space_obj::__new(::zpp_nape::geom::ZPP_Vec2 gravity,::nape::space::Broadphase broadphase)
{  hx::ObjectPtr< ZPP_Space_obj > result = new ZPP_Space_obj();
	result->__construct(gravity,broadphase);
	return result;}

Dynamic ZPP_Space_obj::__Create(hx::DynamicArray inArgs)
{  hx::ObjectPtr< ZPP_Space_obj > result = new ZPP_Space_obj();
	result->__construct(inArgs[0],inArgs[1]);
	return result;}

Void ZPP_Space_obj::getgravity( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","getgravity",0x924c9f6e,"zpp_nape.space.ZPP_Space.getgravity","zpp_nape/space/Space.hx",1385,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(1386)
		::nape::geom::Vec2 _g5;		HX_STACK_VAR(_g5,"_g5");
		HX_STACK_LINE(1386)
		{
			HX_STACK_LINE(1386)
			Float x = this->gravityx;		HX_STACK_VAR(x,"x");
			HX_STACK_LINE(1386)
			Float y = this->gravityy;		HX_STACK_VAR(y,"y");
			HX_STACK_LINE(1386)
			bool weak = false;		HX_STACK_VAR(weak,"weak");
			HX_STACK_LINE(1386)
			::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
			HX_STACK_LINE(1386)
			if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
				HX_STACK_LINE(1386)
				::nape::geom::Vec2 _g = ::nape::geom::Vec2_obj::__new(null(),null());		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(1386)
				ret = _g;
			}
			else{
				HX_STACK_LINE(1386)
				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
				HX_STACK_LINE(1386)
				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
				HX_STACK_LINE(1386)
				ret->zpp_pool = null();
			}
			HX_STACK_LINE(1386)
			if (((ret->zpp_inner == null()))){
				HX_STACK_LINE(1386)
				::zpp_nape::geom::ZPP_Vec2 _g2;		HX_STACK_VAR(_g2,"_g2");
				HX_STACK_LINE(1386)
				{
					HX_STACK_LINE(1386)
					bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
					HX_STACK_LINE(1386)
					::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
					HX_STACK_LINE(1386)
					{
						HX_STACK_LINE(1386)
						if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
							HX_STACK_LINE(1386)
							::zpp_nape::geom::ZPP_Vec2 _g1 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();		HX_STACK_VAR(_g1,"_g1");
							HX_STACK_LINE(1386)
							ret1 = _g1;
						}
						else{
							HX_STACK_LINE(1386)
							ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
							HX_STACK_LINE(1386)
							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
							HX_STACK_LINE(1386)
							ret1->next = null();
						}
						HX_STACK_LINE(1386)
						ret1->weak = false;
					}
					HX_STACK_LINE(1386)
					ret1->_immutable = immutable;
					HX_STACK_LINE(1386)
					{
						HX_STACK_LINE(1386)
						ret1->x = x;
						HX_STACK_LINE(1386)
						ret1->y = y;
						HX_STACK_LINE(1386)
						{
						}
					}
					HX_STACK_LINE(1386)
					_g2 = ret1;
				}
				HX_STACK_LINE(1386)
				ret->zpp_inner = _g2;
				HX_STACK_LINE(1386)
				ret->zpp_inner->outer = ret;
			}
			else{
				HX_STACK_LINE(1386)
				Float _g3;		HX_STACK_VAR(_g3,"_g3");
				HX_STACK_LINE(1386)
				{
					HX_STACK_LINE(1386)
					{
						HX_STACK_LINE(1386)
						::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1386)
						if (((_this->_validate != null()))){
							HX_STACK_LINE(1386)
							_this->_validate();
						}
					}
					HX_STACK_LINE(1386)
					_g3 = ret->zpp_inner->x;
				}
				struct _Function_3_1{
					inline static bool Block( ::nape::geom::Vec2 &ret,Float &y){
						HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",1386,0x2b65ed03)
						{
							HX_STACK_LINE(1386)
							Float _g4;		HX_STACK_VAR(_g4,"_g4");
							HX_STACK_LINE(1386)
							{
								HX_STACK_LINE(1386)
								{
									HX_STACK_LINE(1386)
									::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(1386)
									if (((_this->_validate != null()))){
										HX_STACK_LINE(1386)
										_this->_validate();
									}
								}
								HX_STACK_LINE(1386)
								_g4 = ret->zpp_inner->y;
							}
							HX_STACK_LINE(1386)
							return (_g4 == y);
						}
						return null();
					}
				};
				HX_STACK_LINE(1386)
				if ((!(((  (((_g3 == x))) ? bool(_Function_3_1::Block(ret,y)) : bool(false) ))))){
					HX_STACK_LINE(1386)
					{
						HX_STACK_LINE(1386)
						ret->zpp_inner->x = x;
						HX_STACK_LINE(1386)
						ret->zpp_inner->y = y;
						HX_STACK_LINE(1386)
						{
						}
					}
					HX_STACK_LINE(1386)
					{
						HX_STACK_LINE(1386)
						::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1386)
						if (((_this->_invalidate != null()))){
							HX_STACK_LINE(1386)
							_this->_invalidate(_this);
						}
					}
				}
				HX_STACK_LINE(1386)
				ret;
			}
			HX_STACK_LINE(1386)
			ret->zpp_inner->weak = weak;
			HX_STACK_LINE(1386)
			_g5 = ret;
		}
		HX_STACK_LINE(1386)
		this->wrap_gravity = _g5;
		HX_STACK_LINE(1387)
		this->wrap_gravity->zpp_inner->_inuse = true;
		HX_STACK_LINE(1388)
		this->wrap_gravity->zpp_inner->_invalidate = this->gravity_invalidate_dyn();
		HX_STACK_LINE(1389)
		this->wrap_gravity->zpp_inner->_validate = this->gravity_validate_dyn();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,getgravity,(void))

Void ZPP_Space_obj::gravity_invalidate( ::zpp_nape::geom::ZPP_Vec2 x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","gravity_invalidate",0xaddc5802,"zpp_nape.space.ZPP_Space.gravity_invalidate","zpp_nape/space/Space.hx",1391,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(1395)
		{
			HX_STACK_LINE(1396)
			this->gravityx = x->x;
			HX_STACK_LINE(1397)
			this->gravityy = x->y;
			HX_STACK_LINE(1406)
			{
			}
		}
		HX_STACK_LINE(1415)
		::zpp_nape::util::ZNPList_ZPP_Compound stack = ::zpp_nape::util::ZNPList_ZPP_Compound_obj::__new();		HX_STACK_VAR(stack,"stack");
		HX_STACK_LINE(1416)
		{
			HX_STACK_LINE(1417)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(1418)
			while((true)){
				HX_STACK_LINE(1418)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(1418)
					break;
				}
				HX_STACK_LINE(1419)
				::zpp_nape::phys::ZPP_Body x1 = cx_ite->elt;		HX_STACK_VAR(x1,"x1");
				HX_STACK_LINE(1420)
				{
					HX_STACK_LINE(1421)
					::zpp_nape::phys::ZPP_Body o = x1;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1430)
					if ((!(o->world))){
						HX_STACK_LINE(1439)
						o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
						HX_STACK_LINE(1440)
						if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
							HX_STACK_LINE(1440)
							o->kinematicDelaySleep = true;
						}
						HX_STACK_LINE(1441)
						if ((o->component->sleeping)){
							HX_STACK_LINE(1442)
							this->really_wake(o,false);
						}
					}
				}
				HX_STACK_LINE(1446)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(1449)
		{
			HX_STACK_LINE(1450)
			::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = this->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(1451)
			while((true)){
				HX_STACK_LINE(1451)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(1451)
					break;
				}
				HX_STACK_LINE(1452)
				::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(1453)
				stack->add(i);
				HX_STACK_LINE(1454)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(1457)
		while((true)){
			HX_STACK_LINE(1457)
			if ((!((!(((stack->head == null()))))))){
				HX_STACK_LINE(1457)
				break;
			}
			HX_STACK_LINE(1458)
			::zpp_nape::phys::ZPP_Compound s = stack->pop_unsafe();		HX_STACK_VAR(s,"s");
			HX_STACK_LINE(1459)
			{
				HX_STACK_LINE(1460)
				::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = s->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1461)
				while((true)){
					HX_STACK_LINE(1461)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(1461)
						break;
					}
					HX_STACK_LINE(1462)
					::zpp_nape::phys::ZPP_Body x1 = cx_ite->elt;		HX_STACK_VAR(x1,"x1");
					HX_STACK_LINE(1463)
					{
						HX_STACK_LINE(1464)
						::zpp_nape::phys::ZPP_Body o = x1;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(1473)
						if ((!(o->world))){
							HX_STACK_LINE(1482)
							o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
							HX_STACK_LINE(1483)
							if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
								HX_STACK_LINE(1483)
								o->kinematicDelaySleep = true;
							}
							HX_STACK_LINE(1484)
							if ((o->component->sleeping)){
								HX_STACK_LINE(1485)
								this->really_wake(o,false);
							}
						}
					}
					HX_STACK_LINE(1489)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(1492)
			{
				HX_STACK_LINE(1493)
				::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = s->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1494)
				while((true)){
					HX_STACK_LINE(1494)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(1494)
						break;
					}
					HX_STACK_LINE(1495)
					::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(1496)
					stack->add(i);
					HX_STACK_LINE(1497)
					cx_ite = cx_ite->next;
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,gravity_invalidate,(void))

Void ZPP_Space_obj::gravity_validate( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","gravity_validate",0xf1138f5d,"zpp_nape.space.ZPP_Space.gravity_validate","zpp_nape/space/Space.hx",1503,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(1504)
		this->wrap_gravity->zpp_inner->x = this->gravityx;
		HX_STACK_LINE(1505)
		this->wrap_gravity->zpp_inner->y = this->gravityy;
		HX_STACK_LINE(1514)
		{
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,gravity_validate,(void))

Void ZPP_Space_obj::clear( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","clear",0xc5fb8257,"zpp_nape.space.ZPP_Space.clear","zpp_nape/space/Space.hx",1556,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(1558)
		while((true)){
			HX_STACK_LINE(1558)
			if ((!((!(((this->listeners->head == null()))))))){
				HX_STACK_LINE(1558)
				break;
			}
			HX_STACK_LINE(1559)
			::zpp_nape::callbacks::ZPP_Listener c = this->listeners->pop_unsafe();		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(1560)
			this->remListener(c);
		}
		HX_STACK_LINE(1564)
		while((true)){
			HX_STACK_LINE(1564)
			if ((!((!(((this->callbackset_list->next == null()))))))){
				HX_STACK_LINE(1564)
				break;
			}
			HX_STACK_LINE(1565)
			::zpp_nape::space::ZPP_CallbackSet c = this->callbackset_list->pop_unsafe();		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(1566)
			{
				HX_STACK_LINE(1567)
				c->arbiters->clear();
				HX_STACK_LINE(1568)
				{
					HX_STACK_LINE(1569)
					::zpp_nape::space::ZPP_CallbackSet o = c;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1578)
					{
						HX_STACK_LINE(1578)
						::zpp_nape::phys::ZPP_Interactor _g = o->int2 = null();		HX_STACK_VAR(_g,"_g");
						HX_STACK_LINE(1578)
						o->int1 = _g;
						HX_STACK_LINE(1578)
						int _g1 = o->di = (int)-1;		HX_STACK_VAR(_g1,"_g1");
						HX_STACK_LINE(1578)
						o->id = _g1;
						HX_STACK_LINE(1578)
						o->freed = true;
						HX_STACK_LINE(1578)
						Dynamic();
					}
					HX_STACK_LINE(1579)
					o->next = ::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool;
					HX_STACK_LINE(1580)
					::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool = o;
				}
			}
		}
		HX_STACK_LINE(1589)
		while((true)){
			HX_STACK_LINE(1589)
			if ((!((!(((this->c_arbiters_true->head == null()))))))){
				HX_STACK_LINE(1589)
				break;
			}
			HX_STACK_LINE(1590)
			::zpp_nape::dynamics::ZPP_ColArbiter arb = this->c_arbiters_true->pop_unsafe();		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(1591)
			{
				HX_STACK_LINE(1591)
				{
					HX_STACK_LINE(1591)
					if ((!(arb->cleared))){
						HX_STACK_LINE(1591)
						{
							HX_STACK_LINE(1591)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1591)
							{
								HX_STACK_LINE(1591)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1591)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1591)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1591)
								while((true)){
									HX_STACK_LINE(1591)
									if ((!(((cur != null()))))){
										HX_STACK_LINE(1591)
										break;
									}
									HX_STACK_LINE(1591)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1591)
										{
											HX_STACK_LINE(1591)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1591)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1591)
											if (((pre == null()))){
												HX_STACK_LINE(1591)
												old = _this->head;
												HX_STACK_LINE(1591)
												ret1 = old->next;
												HX_STACK_LINE(1591)
												_this->head = ret1;
												HX_STACK_LINE(1591)
												if (((_this->head == null()))){
													HX_STACK_LINE(1591)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1591)
												old = pre->next;
												HX_STACK_LINE(1591)
												ret1 = old->next;
												HX_STACK_LINE(1591)
												pre->next = ret1;
												HX_STACK_LINE(1591)
												if (((ret1 == null()))){
													HX_STACK_LINE(1591)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1591)
											{
												HX_STACK_LINE(1591)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1591)
												o->elt = null();
												HX_STACK_LINE(1591)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1591)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1591)
											_this->modified = true;
											HX_STACK_LINE(1591)
											(_this->length)--;
											HX_STACK_LINE(1591)
											_this->pushmod = true;
											HX_STACK_LINE(1591)
											ret1;
										}
										HX_STACK_LINE(1591)
										ret = true;
										HX_STACK_LINE(1591)
										break;
									}
									HX_STACK_LINE(1591)
									pre = cur;
									HX_STACK_LINE(1591)
									cur = cur->next;
								}
								HX_STACK_LINE(1591)
								ret;
							}
						}
						HX_STACK_LINE(1591)
						{
							HX_STACK_LINE(1591)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1591)
							{
								HX_STACK_LINE(1591)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1591)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1591)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1591)
								while((true)){
									HX_STACK_LINE(1591)
									if ((!(((cur != null()))))){
										HX_STACK_LINE(1591)
										break;
									}
									HX_STACK_LINE(1591)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1591)
										{
											HX_STACK_LINE(1591)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1591)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1591)
											if (((pre == null()))){
												HX_STACK_LINE(1591)
												old = _this->head;
												HX_STACK_LINE(1591)
												ret1 = old->next;
												HX_STACK_LINE(1591)
												_this->head = ret1;
												HX_STACK_LINE(1591)
												if (((_this->head == null()))){
													HX_STACK_LINE(1591)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1591)
												old = pre->next;
												HX_STACK_LINE(1591)
												ret1 = old->next;
												HX_STACK_LINE(1591)
												pre->next = ret1;
												HX_STACK_LINE(1591)
												if (((ret1 == null()))){
													HX_STACK_LINE(1591)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1591)
											{
												HX_STACK_LINE(1591)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1591)
												o->elt = null();
												HX_STACK_LINE(1591)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1591)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1591)
											_this->modified = true;
											HX_STACK_LINE(1591)
											(_this->length)--;
											HX_STACK_LINE(1591)
											_this->pushmod = true;
											HX_STACK_LINE(1591)
											ret1;
										}
										HX_STACK_LINE(1591)
										ret = true;
										HX_STACK_LINE(1591)
										break;
									}
									HX_STACK_LINE(1591)
									pre = cur;
									HX_STACK_LINE(1591)
									cur = cur->next;
								}
								HX_STACK_LINE(1591)
								ret;
							}
						}
						HX_STACK_LINE(1591)
						if (((arb->pair != null()))){
							HX_STACK_LINE(1591)
							arb->pair->arb = null();
							HX_STACK_LINE(1591)
							arb->pair = null();
						}
					}
					HX_STACK_LINE(1591)
					::zpp_nape::phys::ZPP_Body _g2 = arb->b2 = null();		HX_STACK_VAR(_g2,"_g2");
					HX_STACK_LINE(1591)
					arb->b1 = _g2;
					HX_STACK_LINE(1591)
					arb->active = false;
					HX_STACK_LINE(1591)
					arb->intchange = false;
				}
				HX_STACK_LINE(1591)
				while((true)){
					HX_STACK_LINE(1591)
					if ((!((!(((arb->contacts->next == null()))))))){
						HX_STACK_LINE(1591)
						break;
					}
					HX_STACK_LINE(1591)
					{
						HX_STACK_LINE(1591)
						::zpp_nape::dynamics::ZPP_Contact o;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(1591)
						{
							HX_STACK_LINE(1591)
							::zpp_nape::dynamics::ZPP_Contact _this = arb->contacts;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1591)
							::zpp_nape::dynamics::ZPP_Contact ret = _this->next;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(1591)
							_this->pop();
							HX_STACK_LINE(1591)
							o = ret;
						}
						HX_STACK_LINE(1591)
						o->arbiter = null();
						HX_STACK_LINE(1591)
						o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
						HX_STACK_LINE(1591)
						::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
					}
					HX_STACK_LINE(1591)
					{
						HX_STACK_LINE(1591)
						::zpp_nape::dynamics::ZPP_IContact _this = arb->innards;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1591)
						::zpp_nape::dynamics::ZPP_IContact ret = _this->next;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(1591)
						_this->next = ret->next;
						HX_STACK_LINE(1591)
						ret->_inuse = false;
						HX_STACK_LINE(1591)
						if (((_this->next == null()))){
							HX_STACK_LINE(1591)
							_this->pushmod = true;
						}
						HX_STACK_LINE(1591)
						_this->modified = true;
						HX_STACK_LINE(1591)
						(_this->length)--;
					}
				}
				HX_STACK_LINE(1591)
				{
					HX_STACK_LINE(1591)
					::zpp_nape::dynamics::ZPP_ColArbiter o = arb;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1591)
					{
						HX_STACK_LINE(1591)
						o->userdef_dyn_fric = false;
						HX_STACK_LINE(1591)
						o->userdef_stat_fric = false;
						HX_STACK_LINE(1591)
						o->userdef_restitution = false;
						HX_STACK_LINE(1591)
						o->userdef_rfric = false;
						HX_STACK_LINE(1591)
						::zpp_nape::shape::ZPP_Edge _g3 = o->__ref_edge2 = null();		HX_STACK_VAR(_g3,"_g3");
						HX_STACK_LINE(1591)
						o->__ref_edge1 = _g3;
					}
					HX_STACK_LINE(1591)
					o->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
					HX_STACK_LINE(1591)
					::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o;
				}
				HX_STACK_LINE(1591)
				arb->pre_dt = -1.0;
			}
		}
		HX_STACK_LINE(1595)
		while((true)){
			HX_STACK_LINE(1595)
			if ((!((!(((this->c_arbiters_false->head == null()))))))){
				HX_STACK_LINE(1595)
				break;
			}
			HX_STACK_LINE(1596)
			::zpp_nape::dynamics::ZPP_ColArbiter arb = this->c_arbiters_false->pop_unsafe();		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(1597)
			{
				HX_STACK_LINE(1597)
				{
					HX_STACK_LINE(1597)
					if ((!(arb->cleared))){
						HX_STACK_LINE(1597)
						{
							HX_STACK_LINE(1597)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1597)
							{
								HX_STACK_LINE(1597)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1597)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1597)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1597)
								while((true)){
									HX_STACK_LINE(1597)
									if ((!(((cur != null()))))){
										HX_STACK_LINE(1597)
										break;
									}
									HX_STACK_LINE(1597)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1597)
										{
											HX_STACK_LINE(1597)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1597)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1597)
											if (((pre == null()))){
												HX_STACK_LINE(1597)
												old = _this->head;
												HX_STACK_LINE(1597)
												ret1 = old->next;
												HX_STACK_LINE(1597)
												_this->head = ret1;
												HX_STACK_LINE(1597)
												if (((_this->head == null()))){
													HX_STACK_LINE(1597)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1597)
												old = pre->next;
												HX_STACK_LINE(1597)
												ret1 = old->next;
												HX_STACK_LINE(1597)
												pre->next = ret1;
												HX_STACK_LINE(1597)
												if (((ret1 == null()))){
													HX_STACK_LINE(1597)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1597)
											{
												HX_STACK_LINE(1597)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1597)
												o->elt = null();
												HX_STACK_LINE(1597)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1597)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1597)
											_this->modified = true;
											HX_STACK_LINE(1597)
											(_this->length)--;
											HX_STACK_LINE(1597)
											_this->pushmod = true;
											HX_STACK_LINE(1597)
											ret1;
										}
										HX_STACK_LINE(1597)
										ret = true;
										HX_STACK_LINE(1597)
										break;
									}
									HX_STACK_LINE(1597)
									pre = cur;
									HX_STACK_LINE(1597)
									cur = cur->next;
								}
								HX_STACK_LINE(1597)
								ret;
							}
						}
						HX_STACK_LINE(1597)
						{
							HX_STACK_LINE(1597)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1597)
							{
								HX_STACK_LINE(1597)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1597)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1597)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1597)
								while((true)){
									HX_STACK_LINE(1597)
									if ((!(((cur != null()))))){
										HX_STACK_LINE(1597)
										break;
									}
									HX_STACK_LINE(1597)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1597)
										{
											HX_STACK_LINE(1597)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1597)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1597)
											if (((pre == null()))){
												HX_STACK_LINE(1597)
												old = _this->head;
												HX_STACK_LINE(1597)
												ret1 = old->next;
												HX_STACK_LINE(1597)
												_this->head = ret1;
												HX_STACK_LINE(1597)
												if (((_this->head == null()))){
													HX_STACK_LINE(1597)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1597)
												old = pre->next;
												HX_STACK_LINE(1597)
												ret1 = old->next;
												HX_STACK_LINE(1597)
												pre->next = ret1;
												HX_STACK_LINE(1597)
												if (((ret1 == null()))){
													HX_STACK_LINE(1597)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1597)
											{
												HX_STACK_LINE(1597)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1597)
												o->elt = null();
												HX_STACK_LINE(1597)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1597)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1597)
											_this->modified = true;
											HX_STACK_LINE(1597)
											(_this->length)--;
											HX_STACK_LINE(1597)
											_this->pushmod = true;
											HX_STACK_LINE(1597)
											ret1;
										}
										HX_STACK_LINE(1597)
										ret = true;
										HX_STACK_LINE(1597)
										break;
									}
									HX_STACK_LINE(1597)
									pre = cur;
									HX_STACK_LINE(1597)
									cur = cur->next;
								}
								HX_STACK_LINE(1597)
								ret;
							}
						}
						HX_STACK_LINE(1597)
						if (((arb->pair != null()))){
							HX_STACK_LINE(1597)
							arb->pair->arb = null();
							HX_STACK_LINE(1597)
							arb->pair = null();
						}
					}
					HX_STACK_LINE(1597)
					::zpp_nape::phys::ZPP_Body _g4 = arb->b2 = null();		HX_STACK_VAR(_g4,"_g4");
					HX_STACK_LINE(1597)
					arb->b1 = _g4;
					HX_STACK_LINE(1597)
					arb->active = false;
					HX_STACK_LINE(1597)
					arb->intchange = false;
				}
				HX_STACK_LINE(1597)
				while((true)){
					HX_STACK_LINE(1597)
					if ((!((!(((arb->contacts->next == null()))))))){
						HX_STACK_LINE(1597)
						break;
					}
					HX_STACK_LINE(1597)
					{
						HX_STACK_LINE(1597)
						::zpp_nape::dynamics::ZPP_Contact o;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(1597)
						{
							HX_STACK_LINE(1597)
							::zpp_nape::dynamics::ZPP_Contact _this = arb->contacts;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1597)
							::zpp_nape::dynamics::ZPP_Contact ret = _this->next;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(1597)
							_this->pop();
							HX_STACK_LINE(1597)
							o = ret;
						}
						HX_STACK_LINE(1597)
						o->arbiter = null();
						HX_STACK_LINE(1597)
						o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
						HX_STACK_LINE(1597)
						::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
					}
					HX_STACK_LINE(1597)
					{
						HX_STACK_LINE(1597)
						::zpp_nape::dynamics::ZPP_IContact _this = arb->innards;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(1597)
						::zpp_nape::dynamics::ZPP_IContact ret = _this->next;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(1597)
						_this->next = ret->next;
						HX_STACK_LINE(1597)
						ret->_inuse = false;
						HX_STACK_LINE(1597)
						if (((_this->next == null()))){
							HX_STACK_LINE(1597)
							_this->pushmod = true;
						}
						HX_STACK_LINE(1597)
						_this->modified = true;
						HX_STACK_LINE(1597)
						(_this->length)--;
					}
				}
				HX_STACK_LINE(1597)
				{
					HX_STACK_LINE(1597)
					::zpp_nape::dynamics::ZPP_ColArbiter o = arb;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1597)
					{
						HX_STACK_LINE(1597)
						o->userdef_dyn_fric = false;
						HX_STACK_LINE(1597)
						o->userdef_stat_fric = false;
						HX_STACK_LINE(1597)
						o->userdef_restitution = false;
						HX_STACK_LINE(1597)
						o->userdef_rfric = false;
						HX_STACK_LINE(1597)
						::zpp_nape::shape::ZPP_Edge _g5 = o->__ref_edge2 = null();		HX_STACK_VAR(_g5,"_g5");
						HX_STACK_LINE(1597)
						o->__ref_edge1 = _g5;
					}
					HX_STACK_LINE(1597)
					o->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
					HX_STACK_LINE(1597)
					::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o;
				}
				HX_STACK_LINE(1597)
				arb->pre_dt = -1.0;
			}
		}
		HX_STACK_LINE(1601)
		while((true)){
			HX_STACK_LINE(1601)
			if ((!((!(((this->s_arbiters->head == null()))))))){
				HX_STACK_LINE(1601)
				break;
			}
			HX_STACK_LINE(1602)
			::zpp_nape::dynamics::ZPP_SensorArbiter arb = this->s_arbiters->pop_unsafe();		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(1603)
			{
				HX_STACK_LINE(1603)
				{
					HX_STACK_LINE(1603)
					if ((!(arb->cleared))){
						HX_STACK_LINE(1603)
						{
							HX_STACK_LINE(1603)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1603)
							{
								HX_STACK_LINE(1603)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1603)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1603)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1603)
								while((true)){
									HX_STACK_LINE(1603)
									if ((!(((cur != null()))))){
										HX_STACK_LINE(1603)
										break;
									}
									HX_STACK_LINE(1603)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1603)
										{
											HX_STACK_LINE(1603)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1603)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1603)
											if (((pre == null()))){
												HX_STACK_LINE(1603)
												old = _this->head;
												HX_STACK_LINE(1603)
												ret1 = old->next;
												HX_STACK_LINE(1603)
												_this->head = ret1;
												HX_STACK_LINE(1603)
												if (((_this->head == null()))){
													HX_STACK_LINE(1603)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1603)
												old = pre->next;
												HX_STACK_LINE(1603)
												ret1 = old->next;
												HX_STACK_LINE(1603)
												pre->next = ret1;
												HX_STACK_LINE(1603)
												if (((ret1 == null()))){
													HX_STACK_LINE(1603)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1603)
											{
												HX_STACK_LINE(1603)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1603)
												o->elt = null();
												HX_STACK_LINE(1603)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1603)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1603)
											_this->modified = true;
											HX_STACK_LINE(1603)
											(_this->length)--;
											HX_STACK_LINE(1603)
											_this->pushmod = true;
											HX_STACK_LINE(1603)
											ret1;
										}
										HX_STACK_LINE(1603)
										ret = true;
										HX_STACK_LINE(1603)
										break;
									}
									HX_STACK_LINE(1603)
									pre = cur;
									HX_STACK_LINE(1603)
									cur = cur->next;
								}
								HX_STACK_LINE(1603)
								ret;
							}
						}
						HX_STACK_LINE(1603)
						{
							HX_STACK_LINE(1603)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1603)
							{
								HX_STACK_LINE(1603)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1603)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1603)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1603)
								while((true)){
									HX_STACK_LINE(1603)
									if ((!(((cur != null()))))){
										HX_STACK_LINE(1603)
										break;
									}
									HX_STACK_LINE(1603)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1603)
										{
											HX_STACK_LINE(1603)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1603)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1603)
											if (((pre == null()))){
												HX_STACK_LINE(1603)
												old = _this->head;
												HX_STACK_LINE(1603)
												ret1 = old->next;
												HX_STACK_LINE(1603)
												_this->head = ret1;
												HX_STACK_LINE(1603)
												if (((_this->head == null()))){
													HX_STACK_LINE(1603)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1603)
												old = pre->next;
												HX_STACK_LINE(1603)
												ret1 = old->next;
												HX_STACK_LINE(1603)
												pre->next = ret1;
												HX_STACK_LINE(1603)
												if (((ret1 == null()))){
													HX_STACK_LINE(1603)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1603)
											{
												HX_STACK_LINE(1603)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1603)
												o->elt = null();
												HX_STACK_LINE(1603)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1603)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1603)
											_this->modified = true;
											HX_STACK_LINE(1603)
											(_this->length)--;
											HX_STACK_LINE(1603)
											_this->pushmod = true;
											HX_STACK_LINE(1603)
											ret1;
										}
										HX_STACK_LINE(1603)
										ret = true;
										HX_STACK_LINE(1603)
										break;
									}
									HX_STACK_LINE(1603)
									pre = cur;
									HX_STACK_LINE(1603)
									cur = cur->next;
								}
								HX_STACK_LINE(1603)
								ret;
							}
						}
						HX_STACK_LINE(1603)
						if (((arb->pair != null()))){
							HX_STACK_LINE(1603)
							arb->pair->arb = null();
							HX_STACK_LINE(1603)
							arb->pair = null();
						}
					}
					HX_STACK_LINE(1603)
					::zpp_nape::phys::ZPP_Body _g6 = arb->b2 = null();		HX_STACK_VAR(_g6,"_g6");
					HX_STACK_LINE(1603)
					arb->b1 = _g6;
					HX_STACK_LINE(1603)
					arb->active = false;
					HX_STACK_LINE(1603)
					arb->intchange = false;
				}
				HX_STACK_LINE(1603)
				{
					HX_STACK_LINE(1603)
					::zpp_nape::dynamics::ZPP_SensorArbiter o = arb;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1603)
					o->next = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
					HX_STACK_LINE(1603)
					::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o;
				}
			}
		}
		HX_STACK_LINE(1607)
		while((true)){
			HX_STACK_LINE(1607)
			if ((!((!(((this->f_arbiters->head == null()))))))){
				HX_STACK_LINE(1607)
				break;
			}
			HX_STACK_LINE(1608)
			::zpp_nape::dynamics::ZPP_FluidArbiter arb = this->f_arbiters->pop_unsafe();		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(1609)
			{
				HX_STACK_LINE(1609)
				{
					HX_STACK_LINE(1609)
					if ((!(arb->cleared))){
						HX_STACK_LINE(1609)
						{
							HX_STACK_LINE(1609)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1609)
							{
								HX_STACK_LINE(1609)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1609)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1609)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1609)
								while((true)){
									HX_STACK_LINE(1609)
									if ((!(((cur != null()))))){
										HX_STACK_LINE(1609)
										break;
									}
									HX_STACK_LINE(1609)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1609)
										{
											HX_STACK_LINE(1609)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1609)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1609)
											if (((pre == null()))){
												HX_STACK_LINE(1609)
												old = _this->head;
												HX_STACK_LINE(1609)
												ret1 = old->next;
												HX_STACK_LINE(1609)
												_this->head = ret1;
												HX_STACK_LINE(1609)
												if (((_this->head == null()))){
													HX_STACK_LINE(1609)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1609)
												old = pre->next;
												HX_STACK_LINE(1609)
												ret1 = old->next;
												HX_STACK_LINE(1609)
												pre->next = ret1;
												HX_STACK_LINE(1609)
												if (((ret1 == null()))){
													HX_STACK_LINE(1609)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1609)
											{
												HX_STACK_LINE(1609)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1609)
												o->elt = null();
												HX_STACK_LINE(1609)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1609)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1609)
											_this->modified = true;
											HX_STACK_LINE(1609)
											(_this->length)--;
											HX_STACK_LINE(1609)
											_this->pushmod = true;
											HX_STACK_LINE(1609)
											ret1;
										}
										HX_STACK_LINE(1609)
										ret = true;
										HX_STACK_LINE(1609)
										break;
									}
									HX_STACK_LINE(1609)
									pre = cur;
									HX_STACK_LINE(1609)
									cur = cur->next;
								}
								HX_STACK_LINE(1609)
								ret;
							}
						}
						HX_STACK_LINE(1609)
						{
							HX_STACK_LINE(1609)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(1609)
							{
								HX_STACK_LINE(1609)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(1609)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(1609)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(1609)
								while((true)){
									HX_STACK_LINE(1609)
									if ((!(((cur != null()))))){
										HX_STACK_LINE(1609)
										break;
									}
									HX_STACK_LINE(1609)
									if (((cur->elt == arb))){
										HX_STACK_LINE(1609)
										{
											HX_STACK_LINE(1609)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(1609)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(1609)
											if (((pre == null()))){
												HX_STACK_LINE(1609)
												old = _this->head;
												HX_STACK_LINE(1609)
												ret1 = old->next;
												HX_STACK_LINE(1609)
												_this->head = ret1;
												HX_STACK_LINE(1609)
												if (((_this->head == null()))){
													HX_STACK_LINE(1609)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(1609)
												old = pre->next;
												HX_STACK_LINE(1609)
												ret1 = old->next;
												HX_STACK_LINE(1609)
												pre->next = ret1;
												HX_STACK_LINE(1609)
												if (((ret1 == null()))){
													HX_STACK_LINE(1609)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(1609)
											{
												HX_STACK_LINE(1609)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(1609)
												o->elt = null();
												HX_STACK_LINE(1609)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(1609)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(1609)
											_this->modified = true;
											HX_STACK_LINE(1609)
											(_this->length)--;
											HX_STACK_LINE(1609)
											_this->pushmod = true;
											HX_STACK_LINE(1609)
											ret1;
										}
										HX_STACK_LINE(1609)
										ret = true;
										HX_STACK_LINE(1609)
										break;
									}
									HX_STACK_LINE(1609)
									pre = cur;
									HX_STACK_LINE(1609)
									cur = cur->next;
								}
								HX_STACK_LINE(1609)
								ret;
							}
						}
						HX_STACK_LINE(1609)
						if (((arb->pair != null()))){
							HX_STACK_LINE(1609)
							arb->pair->arb = null();
							HX_STACK_LINE(1609)
							arb->pair = null();
						}
					}
					HX_STACK_LINE(1609)
					::zpp_nape::phys::ZPP_Body _g7 = arb->b2 = null();		HX_STACK_VAR(_g7,"_g7");
					HX_STACK_LINE(1609)
					arb->b1 = _g7;
					HX_STACK_LINE(1609)
					arb->active = false;
					HX_STACK_LINE(1609)
					arb->intchange = false;
				}
				HX_STACK_LINE(1609)
				{
					HX_STACK_LINE(1609)
					::zpp_nape::dynamics::ZPP_FluidArbiter o = arb;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(1609)
					o->next = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
					HX_STACK_LINE(1609)
					::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o;
				}
				HX_STACK_LINE(1609)
				arb->pre_dt = -1.0;
			}
		}
		HX_STACK_LINE(1612)
		this->bphase->clear();
		HX_STACK_LINE(1614)
		while((true)){
			HX_STACK_LINE(1614)
			if ((!((!(((this->bodies->head == null()))))))){
				HX_STACK_LINE(1614)
				break;
			}
			HX_STACK_LINE(1615)
			::zpp_nape::phys::ZPP_Body b = this->bodies->pop_unsafe();		HX_STACK_VAR(b,"b");
			HX_STACK_LINE(1616)
			{
				HX_STACK_LINE(1618)
				if (((b->component != null()))){
					HX_STACK_LINE(1619)
					::zpp_nape::space::ZPP_Island i = b->component->island;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(1620)
					if (((i != null()))){
						HX_STACK_LINE(1622)
						while((true)){
							HX_STACK_LINE(1622)
							if ((!((!(((i->comps->head == null()))))))){
								HX_STACK_LINE(1622)
								break;
							}
							HX_STACK_LINE(1623)
							::zpp_nape::space::ZPP_Component c = i->comps->pop_unsafe();		HX_STACK_VAR(c,"c");
							HX_STACK_LINE(1624)
							{
								HX_STACK_LINE(1624)
								c->sleeping = false;
								HX_STACK_LINE(1624)
								c->island = null();
								HX_STACK_LINE(1624)
								c->parent = c;
								HX_STACK_LINE(1624)
								c->rank = (int)0;
							}
						}
						HX_STACK_LINE(1627)
						{
							HX_STACK_LINE(1628)
							::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(1638)
							o->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
							HX_STACK_LINE(1639)
							::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
						}
					}
				}
				HX_STACK_LINE(1647)
				b->removedFromSpace();
				HX_STACK_LINE(1648)
				b->space = null();
			}
		}
		HX_STACK_LINE(1653)
		while((true)){
			HX_STACK_LINE(1653)
			if ((!((!(((this->constraints->head == null()))))))){
				HX_STACK_LINE(1653)
				break;
			}
			HX_STACK_LINE(1654)
			::zpp_nape::constraint::ZPP_Constraint c = this->constraints->pop_unsafe();		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(1655)
			{
				HX_STACK_LINE(1657)
				if (((c->component != null()))){
					HX_STACK_LINE(1658)
					::zpp_nape::space::ZPP_Island i = c->component->island;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(1659)
					if (((i != null()))){
						HX_STACK_LINE(1661)
						while((true)){
							HX_STACK_LINE(1661)
							if ((!((!(((i->comps->head == null()))))))){
								HX_STACK_LINE(1661)
								break;
							}
							HX_STACK_LINE(1662)
							::zpp_nape::space::ZPP_Component c1 = i->comps->pop_unsafe();		HX_STACK_VAR(c1,"c1");
							HX_STACK_LINE(1663)
							{
								HX_STACK_LINE(1663)
								c1->sleeping = false;
								HX_STACK_LINE(1663)
								c1->island = null();
								HX_STACK_LINE(1663)
								c1->parent = c1;
								HX_STACK_LINE(1663)
								c1->rank = (int)0;
							}
						}
						HX_STACK_LINE(1666)
						{
							HX_STACK_LINE(1667)
							::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(1677)
							o->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
							HX_STACK_LINE(1678)
							::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
						}
					}
				}
				HX_STACK_LINE(1686)
				c->removedFromSpace();
				HX_STACK_LINE(1687)
				c->space = null();
			}
		}
		HX_STACK_LINE(1691)
		this->kinematics->clear();
		HX_STACK_LINE(1692)
		::zpp_nape::util::ZNPList_ZPP_Compound stack = ::zpp_nape::util::ZNPList_ZPP_Compound_obj::__new();		HX_STACK_VAR(stack,"stack");
		HX_STACK_LINE(1694)
		while((true)){
			HX_STACK_LINE(1694)
			if ((!((!(((this->compounds->head == null()))))))){
				HX_STACK_LINE(1694)
				break;
			}
			HX_STACK_LINE(1695)
			::zpp_nape::phys::ZPP_Compound c = this->compounds->pop_unsafe();		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(1696)
			stack->add(c);
		}
		HX_STACK_LINE(1699)
		while((true)){
			HX_STACK_LINE(1699)
			if ((!((!(((stack->head == null()))))))){
				HX_STACK_LINE(1699)
				break;
			}
			HX_STACK_LINE(1700)
			::zpp_nape::phys::ZPP_Compound comp = stack->pop_unsafe();		HX_STACK_VAR(comp,"comp");
			HX_STACK_LINE(1701)
			comp->removedFromSpace();
			HX_STACK_LINE(1702)
			comp->space = null();
			HX_STACK_LINE(1703)
			{
				HX_STACK_LINE(1704)
				::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1705)
				while((true)){
					HX_STACK_LINE(1705)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(1705)
						break;
					}
					HX_STACK_LINE(1706)
					::zpp_nape::phys::ZPP_Body b = cx_ite->elt;		HX_STACK_VAR(b,"b");
					HX_STACK_LINE(1707)
					{
						HX_STACK_LINE(1709)
						if (((b->component != null()))){
							HX_STACK_LINE(1710)
							::zpp_nape::space::ZPP_Island i = b->component->island;		HX_STACK_VAR(i,"i");
							HX_STACK_LINE(1711)
							if (((i != null()))){
								HX_STACK_LINE(1713)
								while((true)){
									HX_STACK_LINE(1713)
									if ((!((!(((i->comps->head == null()))))))){
										HX_STACK_LINE(1713)
										break;
									}
									HX_STACK_LINE(1714)
									::zpp_nape::space::ZPP_Component c = i->comps->pop_unsafe();		HX_STACK_VAR(c,"c");
									HX_STACK_LINE(1715)
									{
										HX_STACK_LINE(1715)
										c->sleeping = false;
										HX_STACK_LINE(1715)
										c->island = null();
										HX_STACK_LINE(1715)
										c->parent = c;
										HX_STACK_LINE(1715)
										c->rank = (int)0;
									}
								}
								HX_STACK_LINE(1718)
								{
									HX_STACK_LINE(1719)
									::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(1729)
									o->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
									HX_STACK_LINE(1730)
									::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
								}
							}
						}
						HX_STACK_LINE(1738)
						b->removedFromSpace();
						HX_STACK_LINE(1739)
						b->space = null();
					}
					HX_STACK_LINE(1741)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(1744)
			{
				HX_STACK_LINE(1745)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = comp->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1746)
				while((true)){
					HX_STACK_LINE(1746)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(1746)
						break;
					}
					HX_STACK_LINE(1747)
					::zpp_nape::constraint::ZPP_Constraint c = cx_ite->elt;		HX_STACK_VAR(c,"c");
					HX_STACK_LINE(1748)
					{
						HX_STACK_LINE(1750)
						if (((c->component != null()))){
							HX_STACK_LINE(1751)
							::zpp_nape::space::ZPP_Island i = c->component->island;		HX_STACK_VAR(i,"i");
							HX_STACK_LINE(1752)
							if (((i != null()))){
								HX_STACK_LINE(1754)
								while((true)){
									HX_STACK_LINE(1754)
									if ((!((!(((i->comps->head == null()))))))){
										HX_STACK_LINE(1754)
										break;
									}
									HX_STACK_LINE(1755)
									::zpp_nape::space::ZPP_Component c1 = i->comps->pop_unsafe();		HX_STACK_VAR(c1,"c1");
									HX_STACK_LINE(1756)
									{
										HX_STACK_LINE(1756)
										c1->sleeping = false;
										HX_STACK_LINE(1756)
										c1->island = null();
										HX_STACK_LINE(1756)
										c1->parent = c1;
										HX_STACK_LINE(1756)
										c1->rank = (int)0;
									}
								}
								HX_STACK_LINE(1759)
								{
									HX_STACK_LINE(1760)
									::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(1770)
									o->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
									HX_STACK_LINE(1771)
									::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
								}
							}
						}
						HX_STACK_LINE(1779)
						c->removedFromSpace();
						HX_STACK_LINE(1780)
						c->space = null();
					}
					HX_STACK_LINE(1782)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(1785)
			{
				HX_STACK_LINE(1786)
				::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = comp->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(1787)
				while((true)){
					HX_STACK_LINE(1787)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(1787)
						break;
					}
					HX_STACK_LINE(1788)
					::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(1789)
					stack->add(i);
					HX_STACK_LINE(1790)
					cx_ite = cx_ite->next;
				}
			}
		}
		HX_STACK_LINE(1802)
		this->staticsleep->clear();
		HX_STACK_LINE(1803)
		this->live->clear();
		HX_STACK_LINE(1804)
		this->live_constraints->clear();
		HX_STACK_LINE(1805)
		this->stamp = (int)0;
		HX_STACK_LINE(1806)
		this->time = 0.0;
		HX_STACK_LINE(1810)
		this->mrca1->clear();
		HX_STACK_LINE(1811)
		this->mrca2->clear();
		HX_STACK_LINE(1812)
		this->prelisteners->clear();
		HX_STACK_LINE(1813)
		this->cbsets->clear();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,clear,(void))

bool ZPP_Space_obj::bodies_adder( ::nape::phys::Body x){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodies_adder",0xc459d405,"zpp_nape.space.ZPP_Space.bodies_adder","zpp_nape/space/Space.hx",1819,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_LINE(1819)
	if (((x->zpp_inner->space != hx::ObjectPtr<OBJ_>(this)))){
		HX_STACK_LINE(1820)
		if (((x->zpp_inner->space != null()))){
			HX_STACK_LINE(1820)
			x->zpp_inner->space->outer->zpp_inner->wrap_bodies->remove(x);
		}
		HX_STACK_LINE(1821)
		this->addBody(x->zpp_inner,null());
		HX_STACK_LINE(1822)
		return true;
	}
	else{
		HX_STACK_LINE(1824)
		return false;
	}
	HX_STACK_LINE(1819)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodies_adder,return )

Void ZPP_Space_obj::bodies_subber( ::nape::phys::Body x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodies_subber",0x05274cb8,"zpp_nape.space.ZPP_Space.bodies_subber","zpp_nape/space/Space.hx",1827,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(1827)
		this->remBody(x->zpp_inner,null());
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodies_subber,(void))

bool ZPP_Space_obj::compounds_adder( ::nape::phys::Compound x){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","compounds_adder",0x5d387601,"zpp_nape.space.ZPP_Space.compounds_adder","zpp_nape/space/Space.hx",1838,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_LINE(1838)
	if (((x->zpp_inner->space != hx::ObjectPtr<OBJ_>(this)))){
		HX_STACK_LINE(1839)
		if (((x->zpp_inner->space != null()))){
			HX_STACK_LINE(1839)
			x->zpp_inner->space->wrap_compounds->remove(x);
		}
		HX_STACK_LINE(1840)
		this->addCompound(x->zpp_inner);
		HX_STACK_LINE(1841)
		return true;
	}
	else{
		HX_STACK_LINE(1843)
		return false;
	}
	HX_STACK_LINE(1838)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,compounds_adder,return )

Void ZPP_Space_obj::compounds_subber( ::nape::phys::Compound x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","compounds_subber",0x2f16673c,"zpp_nape.space.ZPP_Space.compounds_subber","zpp_nape/space/Space.hx",1846,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(1846)
		this->remCompound(x->zpp_inner);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,compounds_subber,(void))

bool ZPP_Space_obj::constraints_adder( ::nape::constraint::Constraint x){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","constraints_adder",0xe3b201cf,"zpp_nape.space.ZPP_Space.constraints_adder","zpp_nape/space/Space.hx",1857,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_LINE(1857)
	if (((x->zpp_inner->space != hx::ObjectPtr<OBJ_>(this)))){
		HX_STACK_LINE(1858)
		if (((x->zpp_inner->space != null()))){
			HX_STACK_LINE(1858)
			x->zpp_inner->space->outer->zpp_inner->wrap_constraints->remove(x);
		}
		HX_STACK_LINE(1859)
		this->addConstraint(x->zpp_inner);
		HX_STACK_LINE(1860)
		return true;
	}
	else{
		HX_STACK_LINE(1862)
		return false;
	}
	HX_STACK_LINE(1857)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraints_adder,return )

Void ZPP_Space_obj::constraints_subber( ::nape::constraint::Constraint x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","constraints_subber",0x52f72fae,"zpp_nape.space.ZPP_Space.constraints_subber","zpp_nape/space/Space.hx",1865,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(1865)
		this->remConstraint(x->zpp_inner);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraints_subber,(void))

bool ZPP_Space_obj::listeners_adder( ::nape::callbacks::Listener x){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","listeners_adder",0x1f0ddc18,"zpp_nape.space.ZPP_Space.listeners_adder","zpp_nape/space/Space.hx",1873,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_LINE(1873)
	if (((x->zpp_inner->space != hx::ObjectPtr<OBJ_>(this)))){
		HX_STACK_LINE(1874)
		if (((x->zpp_inner->space != null()))){
			HX_STACK_LINE(1874)
			x->zpp_inner->space->outer->zpp_inner->wrap_listeners->remove(x);
		}
		HX_STACK_LINE(1875)
		this->addListener(x->zpp_inner);
		HX_STACK_LINE(1876)
		return true;
	}
	else{
		HX_STACK_LINE(1878)
		return false;
	}
	HX_STACK_LINE(1873)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,listeners_adder,return )

Void ZPP_Space_obj::listeners_subber( ::nape::callbacks::Listener x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","listeners_subber",0x07fa5545,"zpp_nape.space.ZPP_Space.listeners_subber","zpp_nape/space/Space.hx",1881,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(1881)
		this->remListener(x->zpp_inner);
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,listeners_subber,(void))

Void ZPP_Space_obj::revoke_listener( ::zpp_nape::callbacks::ZPP_InteractionListener x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","revoke_listener",0x651e3217,"zpp_nape.space.ZPP_Space.revoke_listener","zpp_nape/space/Space.hx",1997,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,revoke_listener,(void))

Void ZPP_Space_obj::unrevoke_listener( ::zpp_nape::callbacks::ZPP_InteractionListener x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","unrevoke_listener",0xf8c53e5e,"zpp_nape.space.ZPP_Space.unrevoke_listener","zpp_nape/space/Space.hx",2000,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,unrevoke_listener,(void))

Void ZPP_Space_obj::addListener( ::zpp_nape::callbacks::ZPP_Listener x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","addListener",0x0689fbff,"zpp_nape.space.ZPP_Space.addListener","zpp_nape/space/Space.hx",2001,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(2002)
		x->space = hx::ObjectPtr<OBJ_>(this);
		HX_STACK_LINE(2003)
		x->addedToSpace();
		HX_STACK_LINE(2004)
		if (((x->interaction != null()))){
			HX_STACK_LINE(2005)
			Dynamic();
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,addListener,(void))

Void ZPP_Space_obj::remListener( ::zpp_nape::callbacks::ZPP_Listener x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","remListener",0xc0164438,"zpp_nape.space.ZPP_Space.remListener","zpp_nape/space/Space.hx",2008,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(2009)
		if (((x->interaction != null()))){
			HX_STACK_LINE(2010)
			Dynamic();
		}
		HX_STACK_LINE(2012)
		x->removedFromSpace();
		HX_STACK_LINE(2013)
		x->space = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remListener,(void))

Void ZPP_Space_obj::add_callbackset( ::zpp_nape::space::ZPP_CallbackSet cb){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","add_callbackset",0x4d0929e9,"zpp_nape.space.ZPP_Space.add_callbackset","zpp_nape/space/Space.hx",2015,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(cb,"cb")
		HX_STACK_LINE(2024)
		{
			HX_STACK_LINE(2024)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = cb->int1->cbsets;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2024)
			::zpp_nape::util::ZNPNode_ZPP_CallbackSet temp;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(2024)
			{
				HX_STACK_LINE(2024)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(2024)
				{
					HX_STACK_LINE(2024)
					if (((::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool == null()))){
						HX_STACK_LINE(2024)
						::zpp_nape::util::ZNPNode_ZPP_CallbackSet _g = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::__new();		HX_STACK_VAR(_g,"_g");
						HX_STACK_LINE(2024)
						ret = _g;
					}
					else{
						HX_STACK_LINE(2024)
						ret = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
						HX_STACK_LINE(2024)
						::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret->next;
						HX_STACK_LINE(2024)
						ret->next = null();
					}
					HX_STACK_LINE(2024)
					Dynamic();
				}
				HX_STACK_LINE(2024)
				ret->elt = cb;
				HX_STACK_LINE(2024)
				temp = ret;
			}
			HX_STACK_LINE(2024)
			temp->next = _this->head;
			HX_STACK_LINE(2024)
			_this->head = temp;
			HX_STACK_LINE(2024)
			_this->modified = true;
			HX_STACK_LINE(2024)
			(_this->length)++;
			HX_STACK_LINE(2024)
			cb;
		}
		HX_STACK_LINE(2025)
		{
			HX_STACK_LINE(2025)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = cb->int2->cbsets;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2025)
			::zpp_nape::util::ZNPNode_ZPP_CallbackSet temp;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(2025)
			{
				HX_STACK_LINE(2025)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(2025)
				{
					HX_STACK_LINE(2025)
					if (((::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool == null()))){
						HX_STACK_LINE(2025)
						::zpp_nape::util::ZNPNode_ZPP_CallbackSet _g1 = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::__new();		HX_STACK_VAR(_g1,"_g1");
						HX_STACK_LINE(2025)
						ret = _g1;
					}
					else{
						HX_STACK_LINE(2025)
						ret = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
						HX_STACK_LINE(2025)
						::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = ret->next;
						HX_STACK_LINE(2025)
						ret->next = null();
					}
					HX_STACK_LINE(2025)
					Dynamic();
				}
				HX_STACK_LINE(2025)
				ret->elt = cb;
				HX_STACK_LINE(2025)
				temp = ret;
			}
			HX_STACK_LINE(2025)
			temp->next = _this->head;
			HX_STACK_LINE(2025)
			_this->head = temp;
			HX_STACK_LINE(2025)
			_this->modified = true;
			HX_STACK_LINE(2025)
			(_this->length)++;
			HX_STACK_LINE(2025)
			cb;
		}
		HX_STACK_LINE(2026)
		{
			HX_STACK_LINE(2026)
			::zpp_nape::space::ZPP_CallbackSet _this = this->callbackset_list;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2026)
			::zpp_nape::space::ZPP_CallbackSet temp;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(2026)
			{
				HX_STACK_LINE(2026)
				cb->_inuse = true;
				HX_STACK_LINE(2026)
				temp = cb;
			}
			HX_STACK_LINE(2026)
			temp->next = _this->next;
			HX_STACK_LINE(2026)
			_this->next = temp;
			HX_STACK_LINE(2026)
			_this->modified = true;
			HX_STACK_LINE(2026)
			(_this->length)++;
			HX_STACK_LINE(2026)
			cb;
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,add_callbackset,(void))

Void ZPP_Space_obj::remove_callbackset( ::zpp_nape::space::ZPP_CallbackSet cb){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","remove_callbackset",0xa7750438,"zpp_nape.space.ZPP_Space.remove_callbackset","zpp_nape/space/Space.hx",2028,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(cb,"cb")
		HX_STACK_LINE(2029)
		cb->lazydel = true;
		HX_STACK_LINE(2030)
		{
			HX_STACK_LINE(2030)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = cb->int1->cbsets;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2030)
			{
				HX_STACK_LINE(2030)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet pre = null();		HX_STACK_VAR(pre,"pre");
				HX_STACK_LINE(2030)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet cur = _this->head;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(2030)
				bool ret = false;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(2030)
				while((true)){
					HX_STACK_LINE(2030)
					if ((!(((cur != null()))))){
						HX_STACK_LINE(2030)
						break;
					}
					HX_STACK_LINE(2030)
					if (((cur->elt == cb))){
						HX_STACK_LINE(2030)
						{
							HX_STACK_LINE(2030)
							::zpp_nape::util::ZNPNode_ZPP_CallbackSet old;		HX_STACK_VAR(old,"old");
							HX_STACK_LINE(2030)
							::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret1;		HX_STACK_VAR(ret1,"ret1");
							HX_STACK_LINE(2030)
							if (((pre == null()))){
								HX_STACK_LINE(2030)
								old = _this->head;
								HX_STACK_LINE(2030)
								ret1 = old->next;
								HX_STACK_LINE(2030)
								_this->head = ret1;
								HX_STACK_LINE(2030)
								if (((_this->head == null()))){
									HX_STACK_LINE(2030)
									_this->pushmod = true;
								}
							}
							else{
								HX_STACK_LINE(2030)
								old = pre->next;
								HX_STACK_LINE(2030)
								ret1 = old->next;
								HX_STACK_LINE(2030)
								pre->next = ret1;
								HX_STACK_LINE(2030)
								if (((ret1 == null()))){
									HX_STACK_LINE(2030)
									_this->pushmod = true;
								}
							}
							HX_STACK_LINE(2030)
							{
								HX_STACK_LINE(2030)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet o = old;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(2030)
								o->elt = null();
								HX_STACK_LINE(2030)
								o->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
								HX_STACK_LINE(2030)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o;
							}
							HX_STACK_LINE(2030)
							_this->modified = true;
							HX_STACK_LINE(2030)
							(_this->length)--;
							HX_STACK_LINE(2030)
							_this->pushmod = true;
							HX_STACK_LINE(2030)
							ret1;
						}
						HX_STACK_LINE(2030)
						ret = true;
						HX_STACK_LINE(2030)
						break;
					}
					HX_STACK_LINE(2030)
					pre = cur;
					HX_STACK_LINE(2030)
					cur = cur->next;
				}
				HX_STACK_LINE(2030)
				ret;
			}
		}
		HX_STACK_LINE(2031)
		{
			HX_STACK_LINE(2031)
			::zpp_nape::util::ZNPList_ZPP_CallbackSet _this = cb->int2->cbsets;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2031)
			{
				HX_STACK_LINE(2031)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet pre = null();		HX_STACK_VAR(pre,"pre");
				HX_STACK_LINE(2031)
				::zpp_nape::util::ZNPNode_ZPP_CallbackSet cur = _this->head;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(2031)
				bool ret = false;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(2031)
				while((true)){
					HX_STACK_LINE(2031)
					if ((!(((cur != null()))))){
						HX_STACK_LINE(2031)
						break;
					}
					HX_STACK_LINE(2031)
					if (((cur->elt == cb))){
						HX_STACK_LINE(2031)
						{
							HX_STACK_LINE(2031)
							::zpp_nape::util::ZNPNode_ZPP_CallbackSet old;		HX_STACK_VAR(old,"old");
							HX_STACK_LINE(2031)
							::zpp_nape::util::ZNPNode_ZPP_CallbackSet ret1;		HX_STACK_VAR(ret1,"ret1");
							HX_STACK_LINE(2031)
							if (((pre == null()))){
								HX_STACK_LINE(2031)
								old = _this->head;
								HX_STACK_LINE(2031)
								ret1 = old->next;
								HX_STACK_LINE(2031)
								_this->head = ret1;
								HX_STACK_LINE(2031)
								if (((_this->head == null()))){
									HX_STACK_LINE(2031)
									_this->pushmod = true;
								}
							}
							else{
								HX_STACK_LINE(2031)
								old = pre->next;
								HX_STACK_LINE(2031)
								ret1 = old->next;
								HX_STACK_LINE(2031)
								pre->next = ret1;
								HX_STACK_LINE(2031)
								if (((ret1 == null()))){
									HX_STACK_LINE(2031)
									_this->pushmod = true;
								}
							}
							HX_STACK_LINE(2031)
							{
								HX_STACK_LINE(2031)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet o = old;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(2031)
								o->elt = null();
								HX_STACK_LINE(2031)
								o->next = ::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool;
								HX_STACK_LINE(2031)
								::zpp_nape::util::ZNPNode_ZPP_CallbackSet_obj::zpp_pool = o;
							}
							HX_STACK_LINE(2031)
							_this->modified = true;
							HX_STACK_LINE(2031)
							(_this->length)--;
							HX_STACK_LINE(2031)
							_this->pushmod = true;
							HX_STACK_LINE(2031)
							ret1;
						}
						HX_STACK_LINE(2031)
						ret = true;
						HX_STACK_LINE(2031)
						break;
					}
					HX_STACK_LINE(2031)
					pre = cur;
					HX_STACK_LINE(2031)
					cur = cur->next;
				}
				HX_STACK_LINE(2031)
				ret;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remove_callbackset,(void))

Void ZPP_Space_obj::transmitType( ::zpp_nape::phys::ZPP_Body p,int new_type){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","transmitType",0xd12f15c0,"zpp_nape.space.ZPP_Space.transmitType","zpp_nape/space/Space.hx",2033,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(p,"p")
		HX_STACK_ARG(new_type,"new_type")
		HX_STACK_LINE(2034)
		{
			HX_STACK_LINE(2035)
			::zpp_nape::phys::ZPP_Body o = p;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(2044)
			if ((!(o->world))){
				HX_STACK_LINE(2053)
				o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
				HX_STACK_LINE(2054)
				if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
					HX_STACK_LINE(2054)
					o->kinematicDelaySleep = true;
				}
				HX_STACK_LINE(2055)
				if ((o->component->sleeping)){
					HX_STACK_LINE(2056)
					this->really_wake(o,false);
				}
			}
		}
		HX_STACK_LINE(2060)
		if (((p->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
			HX_STACK_LINE(2061)
			this->live->remove(p);
		}
		else{
			HX_STACK_LINE(2063)
			if (((p->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
				HX_STACK_LINE(2064)
				this->kinematics->remove(p);
				HX_STACK_LINE(2065)
				this->staticsleep->remove(p);
			}
			else{
				HX_STACK_LINE(2067)
				if (((p->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))){
					HX_STACK_LINE(2068)
					this->staticsleep->remove(p);
				}
			}
		}
		HX_STACK_LINE(2070)
		p->type = new_type;
		HX_STACK_LINE(2071)
		if (((p->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
			HX_STACK_LINE(2071)
			this->kinematics->add(p);
		}
		HX_STACK_LINE(2072)
		if (((p->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))){
			HX_STACK_LINE(2072)
			this->static_validation(p);
		}
		HX_STACK_LINE(2073)
		p->component->sleeping = true;
		HX_STACK_LINE(2074)
		{
			HX_STACK_LINE(2075)
			::zpp_nape::phys::ZPP_Body o = p;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(2084)
			if ((!(o->world))){
				HX_STACK_LINE(2093)
				o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
				HX_STACK_LINE(2094)
				if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
					HX_STACK_LINE(2094)
					o->kinematicDelaySleep = true;
				}
				HX_STACK_LINE(2095)
				if ((o->component->sleeping)){
					HX_STACK_LINE(2096)
					this->really_wake(o,true);
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,transmitType,(void))

Void ZPP_Space_obj::added_shape( ::zpp_nape::shape::ZPP_Shape s,hx::Null< bool >  __o_dontwake){
bool dontwake = __o_dontwake.Default(false);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","added_shape",0x3bf3d36c,"zpp_nape.space.ZPP_Space.added_shape","zpp_nape/space/Space.hx",2102,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(s,"s")
	HX_STACK_ARG(dontwake,"dontwake")
{
		HX_STACK_LINE(2103)
		if ((!(dontwake))){
			HX_STACK_LINE(2105)
			::zpp_nape::phys::ZPP_Body o = s->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(2114)
			if ((!(o->world))){
				HX_STACK_LINE(2123)
				o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
				HX_STACK_LINE(2124)
				if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
					HX_STACK_LINE(2124)
					o->kinematicDelaySleep = true;
				}
				HX_STACK_LINE(2125)
				if ((o->component->sleeping)){
					HX_STACK_LINE(2126)
					this->really_wake(o,false);
				}
			}
		}
		HX_STACK_LINE(2131)
		this->bphase->insert(s);
		HX_STACK_LINE(2132)
		s->addedToSpace();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,added_shape,(void))

Void ZPP_Space_obj::removed_shape( ::zpp_nape::shape::ZPP_Shape s,hx::Null< bool >  __o_deleting){
bool deleting = __o_deleting.Default(false);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","removed_shape",0x687caccc,"zpp_nape.space.ZPP_Space.removed_shape","zpp_nape/space/Space.hx",2134,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(s,"s")
	HX_STACK_ARG(deleting,"deleting")
{
		HX_STACK_LINE(2134)
		::zpp_nape::space::ZPP_Space _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(2135)
		::zpp_nape::phys::ZPP_Body body = s->body;		HX_STACK_VAR(body,"body");
		HX_STACK_LINE(2136)
		if ((!(deleting))){
			HX_STACK_LINE(2137)
			body->wake();
		}
		HX_STACK_LINE(2139)
		::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
		HX_STACK_LINE(2140)
		{
			HX_STACK_LINE(2141)
			::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = body->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2142)
			while((true)){
				HX_STACK_LINE(2142)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2142)
					break;
				}
				HX_STACK_LINE(2143)
				::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
				HX_STACK_LINE(2144)
				{
					HX_STACK_LINE(2145)
					bool rem = (bool((xarb->ws1 == s)) || bool((xarb->ws2 == s)));		HX_STACK_VAR(rem,"rem");
					HX_STACK_LINE(2146)
					if ((rem)){
						HX_STACK_LINE(2147)
						if (((xarb->present != (int)0))){
							HX_STACK_LINE(2148)
							this->MRCA_chains(xarb->ws1,xarb->ws2);
							HX_STACK_LINE(2149)
							{
								HX_STACK_LINE(2150)
								::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca1->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(2151)
								while((true)){
									HX_STACK_LINE(2151)
									if ((!(((cx_ite1 != null()))))){
										HX_STACK_LINE(2151)
										break;
									}
									HX_STACK_LINE(2152)
									::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
									HX_STACK_LINE(2154)
									{
										HX_STACK_LINE(2155)
										::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = this->mrca2->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
										HX_STACK_LINE(2156)
										while((true)){
											HX_STACK_LINE(2156)
											if ((!(((cx_ite2 != null()))))){
												HX_STACK_LINE(2156)
												break;
											}
											HX_STACK_LINE(2157)
											::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
											HX_STACK_LINE(2158)
											{
												HX_STACK_LINE(2159)
												::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
												HX_STACK_LINE(2160)
												::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
												HX_STACK_LINE(2169)
												cb1->validate();
												HX_STACK_LINE(2170)
												cb2->validate();
												struct _Function_11_1{
													inline static bool Block( ::zpp_nape::callbacks::ZPP_CbSet &cb2,::zpp_nape::callbacks::ZPP_CbSet &cb1){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2171,0x2b65ed03)
														{
															HX_STACK_LINE(2171)
															::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(2171)
															{
																HX_STACK_LINE(2171)
																::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
																HX_STACK_LINE(2171)
																::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
																HX_STACK_LINE(2171)
																if (((cb1->cbpairs->length < cb2->cbpairs->length))){
																	HX_STACK_LINE(2171)
																	pairs = cb1->cbpairs;
																}
																else{
																	HX_STACK_LINE(2171)
																	pairs = cb2->cbpairs;
																}
																HX_STACK_LINE(2171)
																{
																	HX_STACK_LINE(2171)
																	::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite3 = pairs->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
																	HX_STACK_LINE(2171)
																	while((true)){
																		HX_STACK_LINE(2171)
																		if ((!(((cx_ite3 != null()))))){
																			HX_STACK_LINE(2171)
																			break;
																		}
																		HX_STACK_LINE(2171)
																		::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite3->elt;		HX_STACK_VAR(p,"p");
																		HX_STACK_LINE(2171)
																		if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																			HX_STACK_LINE(2171)
																			ret = p;
																			HX_STACK_LINE(2171)
																			break;
																		}
																		HX_STACK_LINE(2171)
																		cx_ite3 = cx_ite3->next;
																	}
																}
																HX_STACK_LINE(2171)
																if (((ret == null()))){
																	HX_STACK_LINE(2171)
																	::zpp_nape::callbacks::ZPP_CbSetPair _g1;		HX_STACK_VAR(_g1,"_g1");
																	HX_STACK_LINE(2171)
																	{
																		HX_STACK_LINE(2171)
																		::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
																		HX_STACK_LINE(2171)
																		{
																			HX_STACK_LINE(2171)
																			if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																				HX_STACK_LINE(2171)
																				::zpp_nape::callbacks::ZPP_CbSetPair _g2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g2,"_g2");
																				HX_STACK_LINE(2171)
																				ret1 = _g2;
																			}
																			else{
																				HX_STACK_LINE(2171)
																				ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																				HX_STACK_LINE(2171)
																				::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																				HX_STACK_LINE(2171)
																				ret1->next = null();
																			}
																			HX_STACK_LINE(2171)
																			ret1->zip_listeners = true;
																		}
																		HX_STACK_LINE(2171)
																		if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																			HX_STACK_LINE(2171)
																			ret1->a = cb1;
																			HX_STACK_LINE(2171)
																			ret1->b = cb2;
																		}
																		else{
																			HX_STACK_LINE(2171)
																			ret1->a = cb2;
																			HX_STACK_LINE(2171)
																			ret1->b = cb1;
																		}
																		HX_STACK_LINE(2171)
																		_g1 = ret1;
																	}
																	HX_STACK_LINE(2171)
																	ret = _g1;
																	HX_STACK_LINE(2171)
																	cb1->cbpairs->add(ret);
																	HX_STACK_LINE(2171)
																	if (((cb2 != cb1))){
																		HX_STACK_LINE(2171)
																		cb2->cbpairs->add(ret);
																	}
																}
																HX_STACK_LINE(2171)
																if ((ret->zip_listeners)){
																	HX_STACK_LINE(2171)
																	ret->zip_listeners = false;
																	HX_STACK_LINE(2171)
																	ret->__validate();
																}
																HX_STACK_LINE(2171)
																_this = ret;
															}
															HX_STACK_LINE(2171)
															return (_this->listeners->head == null());
														}
														return null();
													}
												};
												HX_STACK_LINE(2171)
												if ((_Function_11_1::Block(cb2,cb1))){
													HX_STACK_LINE(2172)
													cx_ite2 = cx_ite2->next;
													HX_STACK_LINE(2173)
													continue;
												}
												HX_STACK_LINE(2175)
												::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(callbackset,"callbackset");
												HX_STACK_LINE(2184)
												callbackset->remove_arb(xarb);
												HX_STACK_LINE(2185)
												(xarb->present)--;
												HX_STACK_LINE(2186)
												{
													HX_STACK_LINE(2186)
													int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_END;		HX_STACK_VAR(event,"event");
													HX_STACK_LINE(2186)
													{
														HX_STACK_LINE(2186)
														::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(2186)
														{
															HX_STACK_LINE(2186)
															::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
															HX_STACK_LINE(2186)
															::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
															HX_STACK_LINE(2186)
															if (((cb1->cbpairs->length < cb2->cbpairs->length))){
																HX_STACK_LINE(2186)
																pairs = cb1->cbpairs;
															}
															else{
																HX_STACK_LINE(2186)
																pairs = cb2->cbpairs;
															}
															HX_STACK_LINE(2186)
															{
																HX_STACK_LINE(2186)
																::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite3 = pairs->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
																HX_STACK_LINE(2186)
																while((true)){
																	HX_STACK_LINE(2186)
																	if ((!(((cx_ite3 != null()))))){
																		HX_STACK_LINE(2186)
																		break;
																	}
																	HX_STACK_LINE(2186)
																	::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite3->elt;		HX_STACK_VAR(p,"p");
																	HX_STACK_LINE(2186)
																	if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																		HX_STACK_LINE(2186)
																		ret = p;
																		HX_STACK_LINE(2186)
																		break;
																	}
																	HX_STACK_LINE(2186)
																	cx_ite3 = cx_ite3->next;
																}
															}
															HX_STACK_LINE(2186)
															if (((ret == null()))){
																HX_STACK_LINE(2186)
																::zpp_nape::callbacks::ZPP_CbSetPair _g3;		HX_STACK_VAR(_g3,"_g3");
																HX_STACK_LINE(2186)
																{
																	HX_STACK_LINE(2186)
																	::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(2186)
																	{
																		HX_STACK_LINE(2186)
																		if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																			HX_STACK_LINE(2186)
																			::zpp_nape::callbacks::ZPP_CbSetPair _g2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g2,"_g2");
																			HX_STACK_LINE(2186)
																			ret1 = _g2;
																		}
																		else{
																			HX_STACK_LINE(2186)
																			ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																			HX_STACK_LINE(2186)
																			::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																			HX_STACK_LINE(2186)
																			ret1->next = null();
																		}
																		HX_STACK_LINE(2186)
																		ret1->zip_listeners = true;
																	}
																	HX_STACK_LINE(2186)
																	if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																		HX_STACK_LINE(2186)
																		ret1->a = cb1;
																		HX_STACK_LINE(2186)
																		ret1->b = cb2;
																	}
																	else{
																		HX_STACK_LINE(2186)
																		ret1->a = cb2;
																		HX_STACK_LINE(2186)
																		ret1->b = cb1;
																	}
																	HX_STACK_LINE(2186)
																	_g3 = ret1;
																}
																HX_STACK_LINE(2186)
																ret = _g3;
																HX_STACK_LINE(2186)
																cb1->cbpairs->add(ret);
																HX_STACK_LINE(2186)
																if (((cb2 != cb1))){
																	HX_STACK_LINE(2186)
																	cb2->cbpairs->add(ret);
																}
															}
															HX_STACK_LINE(2186)
															if ((ret->zip_listeners)){
																HX_STACK_LINE(2186)
																ret->zip_listeners = false;
																HX_STACK_LINE(2186)
																ret->__validate();
															}
															HX_STACK_LINE(2186)
															_this = ret;
														}
														HX_STACK_LINE(2186)
														{
															HX_STACK_LINE(2186)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite3 = _this->listeners->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
															HX_STACK_LINE(2186)
															while((true)){
																HX_STACK_LINE(2186)
																if ((!(((cx_ite3 != null()))))){
																	HX_STACK_LINE(2186)
																	break;
																}
																HX_STACK_LINE(2186)
																::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite3->elt;		HX_STACK_VAR(x,"x");
																HX_STACK_LINE(2186)
																if (((x->event == event))){
																	HX_STACK_LINE(2187)
																	if (((  (((((int(x->itype) & int(xarb->type))) != (int)0))) ? bool(callbackset->empty_arb(x->itype)) : bool(false) ))){
																		HX_STACK_LINE(2188)
																		::zpp_nape::callbacks::ZPP_Callback cb = _g->push_callback(x);		HX_STACK_VAR(cb,"cb");
																		HX_STACK_LINE(2189)
																		cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_END;
																		HX_STACK_LINE(2190)
																		{
																			HX_STACK_LINE(2190)
																			::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																			HX_STACK_LINE(2190)
																			::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																			struct _Function_18_1{
																				inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o1){
																					HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2190,0x2b65ed03)
																					{
																						HX_STACK_LINE(2190)
																						::zpp_nape::callbacks::ZPP_OptionType _this1 = x->options1;		HX_STACK_VAR(_this1,"_this1");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																						HX_STACK_LINE(2190)
																						return (  ((_this1->nonemptyintersection(xs,_this1->includes))) ? bool(!(_this1->nonemptyintersection(xs,_this1->excludes))) : bool(false) );
																					}
																					return null();
																				}
																			};
																			struct _Function_18_2{
																				inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o2){
																					HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2190,0x2b65ed03)
																					{
																						HX_STACK_LINE(2190)
																						::zpp_nape::callbacks::ZPP_OptionType _this1 = x->options2;		HX_STACK_VAR(_this1,"_this1");
																						HX_STACK_LINE(2190)
																						::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																						HX_STACK_LINE(2190)
																						return (  ((_this1->nonemptyintersection(xs,_this1->includes))) ? bool(!(_this1->nonemptyintersection(xs,_this1->excludes))) : bool(false) );
																					}
																					return null();
																				}
																			};
																			HX_STACK_LINE(2190)
																			if (((  ((_Function_18_1::Block(x,o1))) ? bool(_Function_18_2::Block(x,o2)) : bool(false) ))){
																				HX_STACK_LINE(2190)
																				cb->int1 = o1;
																				HX_STACK_LINE(2190)
																				cb->int2 = o2;
																			}
																			else{
																				HX_STACK_LINE(2190)
																				cb->int1 = o2;
																				HX_STACK_LINE(2190)
																				cb->int2 = o1;
																			}
																		}
																		HX_STACK_LINE(2191)
																		cb->set = callbackset;
																	}
																}
																HX_STACK_LINE(2186)
																cx_ite3 = cx_ite3->next;
															}
														}
													}
												}
												HX_STACK_LINE(2194)
												if (((callbackset->arbiters->head == null()))){
													HX_STACK_LINE(2195)
													this->remove_callbackset(callbackset);
												}
											}
											HX_STACK_LINE(2198)
											cx_ite2 = cx_ite2->next;
										}
									}
									HX_STACK_LINE(2202)
									cx_ite1 = cx_ite1->next;
								}
							}
							HX_STACK_LINE(2205)
							{
							}
						}
						HX_STACK_LINE(2214)
						if (((bool((xarb->b1 != body)) && bool((xarb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))))){
							HX_STACK_LINE(2215)
							::zpp_nape::phys::ZPP_Body o = xarb->b1;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(2224)
							if ((!(o->world))){
								HX_STACK_LINE(2233)
								o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
								HX_STACK_LINE(2234)
								if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
									HX_STACK_LINE(2234)
									o->kinematicDelaySleep = true;
								}
								HX_STACK_LINE(2235)
								if ((o->component->sleeping)){
									HX_STACK_LINE(2236)
									this->really_wake(o,false);
								}
							}
						}
						HX_STACK_LINE(2240)
						if (((bool((xarb->b2 != body)) && bool((xarb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))))){
							HX_STACK_LINE(2241)
							::zpp_nape::phys::ZPP_Body o = xarb->b2;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(2250)
							if ((!(o->world))){
								HX_STACK_LINE(2259)
								o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
								HX_STACK_LINE(2260)
								if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
									HX_STACK_LINE(2260)
									o->kinematicDelaySleep = true;
								}
								HX_STACK_LINE(2261)
								if ((o->component->sleeping)){
									HX_STACK_LINE(2262)
									this->really_wake(o,false);
								}
							}
						}
						HX_STACK_LINE(2266)
						{
							HX_STACK_LINE(2266)
							xarb->cleared = true;
							HX_STACK_LINE(2266)
							if (((bool((body == null())) || bool((xarb->b2 == body))))){
								HX_STACK_LINE(2266)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(2266)
								{
									HX_STACK_LINE(2266)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
									HX_STACK_LINE(2266)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(2266)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(2266)
									while((true)){
										HX_STACK_LINE(2266)
										if ((!(((cur != null()))))){
											HX_STACK_LINE(2266)
											break;
										}
										HX_STACK_LINE(2266)
										if (((cur->elt == xarb))){
											HX_STACK_LINE(2266)
											{
												HX_STACK_LINE(2266)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(2266)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(2266)
												if (((pre1 == null()))){
													HX_STACK_LINE(2266)
													old = _this->head;
													HX_STACK_LINE(2266)
													ret1 = old->next;
													HX_STACK_LINE(2266)
													_this->head = ret1;
													HX_STACK_LINE(2266)
													if (((_this->head == null()))){
														HX_STACK_LINE(2266)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(2266)
													old = pre1->next;
													HX_STACK_LINE(2266)
													ret1 = old->next;
													HX_STACK_LINE(2266)
													pre1->next = ret1;
													HX_STACK_LINE(2266)
													if (((ret1 == null()))){
														HX_STACK_LINE(2266)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(2266)
												{
													HX_STACK_LINE(2266)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(2266)
													o->elt = null();
													HX_STACK_LINE(2266)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(2266)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(2266)
												_this->modified = true;
												HX_STACK_LINE(2266)
												(_this->length)--;
												HX_STACK_LINE(2266)
												_this->pushmod = true;
												HX_STACK_LINE(2266)
												ret1;
											}
											HX_STACK_LINE(2266)
											ret = true;
											HX_STACK_LINE(2266)
											break;
										}
										HX_STACK_LINE(2266)
										pre1 = cur;
										HX_STACK_LINE(2266)
										cur = cur->next;
									}
									HX_STACK_LINE(2266)
									ret;
								}
							}
							HX_STACK_LINE(2266)
							if (((bool((body == null())) || bool((xarb->b1 == body))))){
								HX_STACK_LINE(2266)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(2266)
								{
									HX_STACK_LINE(2266)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
									HX_STACK_LINE(2266)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(2266)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(2266)
									while((true)){
										HX_STACK_LINE(2266)
										if ((!(((cur != null()))))){
											HX_STACK_LINE(2266)
											break;
										}
										HX_STACK_LINE(2266)
										if (((cur->elt == xarb))){
											HX_STACK_LINE(2266)
											{
												HX_STACK_LINE(2266)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(2266)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(2266)
												if (((pre1 == null()))){
													HX_STACK_LINE(2266)
													old = _this->head;
													HX_STACK_LINE(2266)
													ret1 = old->next;
													HX_STACK_LINE(2266)
													_this->head = ret1;
													HX_STACK_LINE(2266)
													if (((_this->head == null()))){
														HX_STACK_LINE(2266)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(2266)
													old = pre1->next;
													HX_STACK_LINE(2266)
													ret1 = old->next;
													HX_STACK_LINE(2266)
													pre1->next = ret1;
													HX_STACK_LINE(2266)
													if (((ret1 == null()))){
														HX_STACK_LINE(2266)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(2266)
												{
													HX_STACK_LINE(2266)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(2266)
													o->elt = null();
													HX_STACK_LINE(2266)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(2266)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(2266)
												_this->modified = true;
												HX_STACK_LINE(2266)
												(_this->length)--;
												HX_STACK_LINE(2266)
												_this->pushmod = true;
												HX_STACK_LINE(2266)
												ret1;
											}
											HX_STACK_LINE(2266)
											ret = true;
											HX_STACK_LINE(2266)
											break;
										}
										HX_STACK_LINE(2266)
										pre1 = cur;
										HX_STACK_LINE(2266)
										cur = cur->next;
									}
									HX_STACK_LINE(2266)
									ret;
								}
							}
							HX_STACK_LINE(2266)
							if (((xarb->pair != null()))){
								HX_STACK_LINE(2266)
								xarb->pair->arb = null();
								HX_STACK_LINE(2266)
								xarb->pair = null();
							}
							HX_STACK_LINE(2266)
							xarb->active = false;
							HX_STACK_LINE(2266)
							this->f_arbiters->modified = true;
						}
						HX_STACK_LINE(2267)
						::zpp_nape::util::ZNPNode_ZPP_Arbiter _g4 = body->arbiters->erase(pre);		HX_STACK_VAR(_g4,"_g4");
						HX_STACK_LINE(2267)
						cx_ite = _g4;
						HX_STACK_LINE(2268)
						continue;
					}
					HX_STACK_LINE(2270)
					pre = cx_ite;
				}
				HX_STACK_LINE(2272)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2275)
		this->bphase->remove(s);
		HX_STACK_LINE(2276)
		s->removedFromSpace();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,removed_shape,(void))

Void ZPP_Space_obj::addConstraint( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","addConstraint",0x6bc234a8,"zpp_nape.space.ZPP_Space.addConstraint","zpp_nape/space/Space.hx",2278,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(con,"con")
		HX_STACK_LINE(2279)
		con->space = hx::ObjectPtr<OBJ_>(this);
		HX_STACK_LINE(2280)
		con->addedToSpace();
		HX_STACK_LINE(2281)
		if ((con->active)){
			HX_STACK_LINE(2290)
			con->component->sleeping = true;
			HX_STACK_LINE(2291)
			this->wake_constraint(con,true);
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,addConstraint,(void))

Void ZPP_Space_obj::remConstraint( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","remConstraint",0xd71bbd21,"zpp_nape.space.ZPP_Space.remConstraint","zpp_nape/space/Space.hx",2294,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(con,"con")
		HX_STACK_LINE(2295)
		if ((con->active)){
			HX_STACK_LINE(2296)
			this->wake_constraint(con,true);
			HX_STACK_LINE(2297)
			this->live_constraints->remove(con);
		}
		HX_STACK_LINE(2299)
		con->removedFromSpace();
		HX_STACK_LINE(2300)
		con->space = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remConstraint,(void))

Void ZPP_Space_obj::addCompound( ::zpp_nape::phys::ZPP_Compound x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","addCompound",0x5027bef6,"zpp_nape.space.ZPP_Space.addCompound","zpp_nape/space/Space.hx",2302,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(2303)
		x->space = hx::ObjectPtr<OBJ_>(this);
		HX_STACK_LINE(2304)
		x->addedToSpace();
		HX_STACK_LINE(2305)
		{
			HX_STACK_LINE(2306)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = x->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2307)
			while((true)){
				HX_STACK_LINE(2307)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2307)
					break;
				}
				HX_STACK_LINE(2308)
				::zpp_nape::phys::ZPP_Body i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2309)
				this->addBody(i,null());
				HX_STACK_LINE(2310)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2313)
		{
			HX_STACK_LINE(2314)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = x->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2315)
			while((true)){
				HX_STACK_LINE(2315)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2315)
					break;
				}
				HX_STACK_LINE(2316)
				::zpp_nape::constraint::ZPP_Constraint i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2317)
				this->addConstraint(i);
				HX_STACK_LINE(2318)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2321)
		{
			HX_STACK_LINE(2322)
			::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = x->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2323)
			while((true)){
				HX_STACK_LINE(2323)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2323)
					break;
				}
				HX_STACK_LINE(2324)
				::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2325)
				this->addCompound(i);
				HX_STACK_LINE(2326)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,addCompound,(void))

Void ZPP_Space_obj::remCompound( ::zpp_nape::phys::ZPP_Compound x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","remCompound",0x09b4072f,"zpp_nape.space.ZPP_Space.remCompound","zpp_nape/space/Space.hx",2330,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(2331)
		{
			HX_STACK_LINE(2332)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = x->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2333)
			while((true)){
				HX_STACK_LINE(2333)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2333)
					break;
				}
				HX_STACK_LINE(2334)
				::zpp_nape::phys::ZPP_Body i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2335)
				this->remBody(i,null());
				HX_STACK_LINE(2336)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2339)
		{
			HX_STACK_LINE(2340)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = x->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2341)
			while((true)){
				HX_STACK_LINE(2341)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2341)
					break;
				}
				HX_STACK_LINE(2342)
				::zpp_nape::constraint::ZPP_Constraint i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2343)
				this->remConstraint(i);
				HX_STACK_LINE(2344)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2347)
		{
			HX_STACK_LINE(2348)
			::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = x->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2349)
			while((true)){
				HX_STACK_LINE(2349)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2349)
					break;
				}
				HX_STACK_LINE(2350)
				::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(2351)
				this->remCompound(i);
				HX_STACK_LINE(2352)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2355)
		x->removedFromSpace();
		HX_STACK_LINE(2356)
		x->space = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,remCompound,(void))

Void ZPP_Space_obj::addBody( ::zpp_nape::phys::ZPP_Body body,hx::Null< int >  __o_flag){
int flag = __o_flag.Default(-1);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","addBody",0xafb614ad,"zpp_nape.space.ZPP_Space.addBody","zpp_nape/space/Space.hx",2358,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(body,"body")
	HX_STACK_ARG(flag,"flag")
{
		HX_STACK_LINE(2359)
		body->space = hx::ObjectPtr<OBJ_>(this);
		HX_STACK_LINE(2360)
		body->addedToSpace();
		HX_STACK_LINE(2369)
		body->component->sleeping = true;
		HX_STACK_LINE(2370)
		{
			HX_STACK_LINE(2371)
			::zpp_nape::phys::ZPP_Body o = body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(2380)
			if ((!(o->world))){
				HX_STACK_LINE(2389)
				o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
				HX_STACK_LINE(2390)
				if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
					HX_STACK_LINE(2390)
					o->kinematicDelaySleep = true;
				}
				HX_STACK_LINE(2391)
				if ((o->component->sleeping)){
					HX_STACK_LINE(2392)
					this->really_wake(o,true);
				}
			}
		}
		HX_STACK_LINE(2396)
		{
			HX_STACK_LINE(2397)
			::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = body->shapes->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2398)
			while((true)){
				HX_STACK_LINE(2398)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2398)
					break;
				}
				HX_STACK_LINE(2399)
				::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;		HX_STACK_VAR(shape,"shape");
				HX_STACK_LINE(2400)
				{
					HX_STACK_LINE(2400)
					this->bphase->insert(shape);
					HX_STACK_LINE(2400)
					shape->addedToSpace();
				}
				HX_STACK_LINE(2401)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2404)
		if (((body->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))){
			HX_STACK_LINE(2405)
			this->static_validation(body);
			HX_STACK_LINE(2406)
			{
			}
		}
		else{
			HX_STACK_LINE(2416)
			if (((body->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
			}
			else{
				HX_STACK_LINE(2427)
				if (((flag != ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
					HX_STACK_LINE(2427)
					this->kinematics->add(body);
				}
				HX_STACK_LINE(2428)
				{
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,addBody,(void))

Void ZPP_Space_obj::remBody( ::zpp_nape::phys::ZPP_Body body,hx::Null< int >  __o_flag){
int flag = __o_flag.Default(-1);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","remBody",0x07998c66,"zpp_nape.space.ZPP_Space.remBody","zpp_nape/space/Space.hx",2439,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(body,"body")
	HX_STACK_ARG(flag,"flag")
{
		HX_STACK_LINE(2440)
		if (((body->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))){
			HX_STACK_LINE(2441)
			{
				HX_STACK_LINE(2442)
				::zpp_nape::phys::ZPP_Body o = body;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(2451)
				if ((!(o->world))){
					HX_STACK_LINE(2460)
					o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
					HX_STACK_LINE(2461)
					if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
						HX_STACK_LINE(2461)
						o->kinematicDelaySleep = true;
					}
					HX_STACK_LINE(2462)
					if ((o->component->sleeping)){
						HX_STACK_LINE(2463)
						this->really_wake(o,true);
					}
				}
			}
			HX_STACK_LINE(2483)
			this->staticsleep->remove(body);
			HX_STACK_LINE(2484)
			{
			}
		}
		else{
			HX_STACK_LINE(2494)
			if (((body->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
				HX_STACK_LINE(2495)
				{
					HX_STACK_LINE(2496)
					::zpp_nape::phys::ZPP_Body o = body;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(2505)
					if ((!(o->world))){
						HX_STACK_LINE(2514)
						o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
						HX_STACK_LINE(2515)
						if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
							HX_STACK_LINE(2515)
							o->kinematicDelaySleep = true;
						}
						HX_STACK_LINE(2516)
						if ((o->component->sleeping)){
							HX_STACK_LINE(2517)
							this->really_wake(o,true);
						}
					}
				}
				HX_STACK_LINE(2521)
				this->live->remove(body);
				HX_STACK_LINE(2522)
				{
				}
			}
			else{
				HX_STACK_LINE(2532)
				if (((flag != ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
					HX_STACK_LINE(2532)
					this->kinematics->remove(body);
				}
				HX_STACK_LINE(2533)
				{
					HX_STACK_LINE(2534)
					::zpp_nape::phys::ZPP_Body o = body;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(2543)
					if ((!(o->world))){
						HX_STACK_LINE(2552)
						o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
						HX_STACK_LINE(2553)
						if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
							HX_STACK_LINE(2553)
							o->kinematicDelaySleep = true;
						}
						HX_STACK_LINE(2554)
						if ((o->component->sleeping)){
							HX_STACK_LINE(2555)
							this->really_wake(o,true);
						}
					}
				}
				HX_STACK_LINE(2559)
				this->staticsleep->remove(body);
				HX_STACK_LINE(2560)
				{
				}
			}
		}
		HX_STACK_LINE(2570)
		{
			HX_STACK_LINE(2571)
			::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = body->shapes->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2572)
			while((true)){
				HX_STACK_LINE(2572)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2572)
					break;
				}
				HX_STACK_LINE(2573)
				::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;		HX_STACK_VAR(shape,"shape");
				HX_STACK_LINE(2574)
				this->removed_shape(shape,true);
				HX_STACK_LINE(2575)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2578)
		body->removedFromSpace();
		HX_STACK_LINE(2579)
		body->space = null();
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,remBody,(void))

::nape::shape::ShapeList ZPP_Space_obj::shapesUnderPoint( Float x,Float y,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::shape::ShapeList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","shapesUnderPoint",0x46035c60,"zpp_nape.space.ZPP_Space.shapesUnderPoint","zpp_nape/space/Space.hx",2582,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_ARG(y,"y")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2582)
	return this->bphase->shapesUnderPoint(x,y,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,shapesUnderPoint,return )

::nape::phys::BodyList ZPP_Space_obj::bodiesUnderPoint( Float x,Float y,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::phys::BodyList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodiesUnderPoint",0x7e768b2e,"zpp_nape.space.ZPP_Space.bodiesUnderPoint","zpp_nape/space/Space.hx",2585,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(x,"x")
	HX_STACK_ARG(y,"y")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2585)
	return this->bphase->bodiesUnderPoint(x,y,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,bodiesUnderPoint,return )

::nape::shape::ShapeList ZPP_Space_obj::shapesInAABB( ::nape::geom::AABB aabb,bool strict,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::shape::ShapeList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","shapesInAABB",0xb8d4194d,"zpp_nape.space.ZPP_Space.shapesInAABB","zpp_nape/space/Space.hx",2588,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(aabb,"aabb")
	HX_STACK_ARG(strict,"strict")
	HX_STACK_ARG(cont,"cont")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2588)
	return this->bphase->shapesInAABB(aabb->zpp_inner,strict,cont,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,shapesInAABB,return )

::nape::phys::BodyList ZPP_Space_obj::bodiesInAABB( ::nape::geom::AABB aabb,bool strict,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::phys::BodyList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodiesInAABB",0x5d78491b,"zpp_nape.space.ZPP_Space.bodiesInAABB","zpp_nape/space/Space.hx",2591,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(aabb,"aabb")
	HX_STACK_ARG(strict,"strict")
	HX_STACK_ARG(cont,"cont")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2591)
	return this->bphase->bodiesInAABB(aabb->zpp_inner,strict,cont,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,bodiesInAABB,return )

::nape::shape::ShapeList ZPP_Space_obj::shapesInCircle( ::nape::geom::Vec2 pos,Float rad,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::shape::ShapeList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","shapesInCircle",0x9d985a1d,"zpp_nape.space.ZPP_Space.shapesInCircle","zpp_nape/space/Space.hx",2593,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(pos,"pos")
	HX_STACK_ARG(rad,"rad")
	HX_STACK_ARG(cont,"cont")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2594)
	Float _g;		HX_STACK_VAR(_g,"_g");
	HX_STACK_LINE(2594)
	{
		HX_STACK_LINE(2594)
		{
			HX_STACK_LINE(2594)
			::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2594)
			if (((_this->_validate != null()))){
				HX_STACK_LINE(2594)
				_this->_validate();
			}
		}
		HX_STACK_LINE(2594)
		_g = pos->zpp_inner->x;
	}
	HX_STACK_LINE(2594)
	Float _g1;		HX_STACK_VAR(_g1,"_g1");
	HX_STACK_LINE(2594)
	{
		HX_STACK_LINE(2594)
		{
			HX_STACK_LINE(2594)
			::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2594)
			if (((_this->_validate != null()))){
				HX_STACK_LINE(2594)
				_this->_validate();
			}
		}
		HX_STACK_LINE(2594)
		_g1 = pos->zpp_inner->y;
	}
	HX_STACK_LINE(2594)
	return this->bphase->shapesInCircle(_g,_g1,rad,cont,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,shapesInCircle,return )

::nape::phys::BodyList ZPP_Space_obj::bodiesInCircle( ::nape::geom::Vec2 pos,Float rad,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::phys::BodyList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodiesInCircle",0xd782996b,"zpp_nape.space.ZPP_Space.bodiesInCircle","zpp_nape/space/Space.hx",2596,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(pos,"pos")
	HX_STACK_ARG(rad,"rad")
	HX_STACK_ARG(cont,"cont")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2597)
	Float _g;		HX_STACK_VAR(_g,"_g");
	HX_STACK_LINE(2597)
	{
		HX_STACK_LINE(2597)
		{
			HX_STACK_LINE(2597)
			::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2597)
			if (((_this->_validate != null()))){
				HX_STACK_LINE(2597)
				_this->_validate();
			}
		}
		HX_STACK_LINE(2597)
		_g = pos->zpp_inner->x;
	}
	HX_STACK_LINE(2597)
	Float _g1;		HX_STACK_VAR(_g1,"_g1");
	HX_STACK_LINE(2597)
	{
		HX_STACK_LINE(2597)
		{
			HX_STACK_LINE(2597)
			::zpp_nape::geom::ZPP_Vec2 _this = pos->zpp_inner;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2597)
			if (((_this->_validate != null()))){
				HX_STACK_LINE(2597)
				_this->_validate();
			}
		}
		HX_STACK_LINE(2597)
		_g1 = pos->zpp_inner->y;
	}
	HX_STACK_LINE(2597)
	return this->bphase->bodiesInCircle(_g,_g1,rad,cont,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,bodiesInCircle,return )

::nape::shape::ShapeList ZPP_Space_obj::shapesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::shape::ShapeList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","shapesInShape",0x77d77bb4,"zpp_nape.space.ZPP_Space.shapesInShape","zpp_nape/space/Space.hx",2600,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(shape,"shape")
	HX_STACK_ARG(cont,"cont")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2600)
	return this->bphase->shapesInShape(shape,cont,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,shapesInShape,return )

::nape::phys::BodyList ZPP_Space_obj::bodiesInShape( ::zpp_nape::shape::ZPP_Shape shape,bool cont,::zpp_nape::dynamics::ZPP_InteractionFilter filter,::nape::phys::BodyList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodiesInShape",0xe2dd2026,"zpp_nape.space.ZPP_Space.bodiesInShape","zpp_nape/space/Space.hx",2603,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(shape,"shape")
	HX_STACK_ARG(cont,"cont")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2603)
	return this->bphase->bodiesInShape(shape,cont,filter,output);
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,bodiesInShape,return )

::nape::geom::RayResult ZPP_Space_obj::rayCast( ::nape::geom::Ray ray,bool inner,::nape::dynamics::InteractionFilter filter){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","rayCast",0x5799b513,"zpp_nape.space.ZPP_Space.rayCast","zpp_nape/space/Space.hx",2606,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(ray,"ray")
	HX_STACK_ARG(inner,"inner")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_LINE(2606)
	return this->bphase->rayCast(ray->zpp_inner,inner,(  (((filter == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionFilter(null()) : ::zpp_nape::dynamics::ZPP_InteractionFilter(filter->zpp_inner) ));
}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Space_obj,rayCast,return )

::nape::geom::RayResultList ZPP_Space_obj::rayMultiCast( ::nape::geom::Ray ray,bool inner,::nape::dynamics::InteractionFilter filter,::nape::geom::RayResultList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","rayMultiCast",0xe2ccff04,"zpp_nape.space.ZPP_Space.rayMultiCast","zpp_nape/space/Space.hx",2609,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(ray,"ray")
	HX_STACK_ARG(inner,"inner")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2609)
	return this->bphase->rayMultiCast(ray->zpp_inner,inner,(  (((filter == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionFilter(null()) : ::zpp_nape::dynamics::ZPP_InteractionFilter(filter->zpp_inner) ),output);
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,rayMultiCast,return )

::nape::geom::ConvexResult ZPP_Space_obj::convexCast( ::zpp_nape::shape::ZPP_Shape shape,Float deltaTime,::nape::dynamics::InteractionFilter filter,bool dynamics){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","convexCast",0xd0fbd4bc,"zpp_nape.space.ZPP_Space.convexCast","zpp_nape/space/Space.hx",2612,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(shape,"shape")
	HX_STACK_ARG(deltaTime,"deltaTime")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(dynamics,"dynamics")
	HX_STACK_LINE(2613)
	::zpp_nape::geom::ZPP_ToiEvent toi;		HX_STACK_VAR(toi,"toi");
	HX_STACK_LINE(2614)
	{
		HX_STACK_LINE(2615)
		if (((::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool == null()))){
			HX_STACK_LINE(2616)
			::zpp_nape::geom::ZPP_ToiEvent _g = ::zpp_nape::geom::ZPP_ToiEvent_obj::__new();		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(2616)
			toi = _g;
		}
		else{
			HX_STACK_LINE(2622)
			toi = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
			HX_STACK_LINE(2623)
			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = toi->next;
			HX_STACK_LINE(2624)
			toi->next = null();
		}
		HX_STACK_LINE(2629)
		{
			HX_STACK_LINE(2629)
			toi->failed = false;
			HX_STACK_LINE(2629)
			::zpp_nape::shape::ZPP_Shape _g1 = toi->s2 = null();		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(2629)
			toi->s1 = _g1;
			HX_STACK_LINE(2629)
			toi->arbiter = null();
		}
	}
	HX_STACK_LINE(2631)
	if (((shape->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
		HX_STACK_LINE(2631)
		::zpp_nape::shape::ZPP_Circle _this = shape->circle;		HX_STACK_VAR(_this,"_this");
		HX_STACK_LINE(2631)
		if ((_this->zip_worldCOM)){
			HX_STACK_LINE(2631)
			if (((_this->body != null()))){
				HX_STACK_LINE(2631)
				_this->zip_worldCOM = false;
				HX_STACK_LINE(2631)
				if ((_this->zip_localCOM)){
					HX_STACK_LINE(2631)
					_this->zip_localCOM = false;
					HX_STACK_LINE(2631)
					if (((_this->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
						HX_STACK_LINE(2631)
						::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2631)
						if (((_this1->lverts->next->next == null()))){
							HX_STACK_LINE(2631)
							_this1->localCOMx = _this1->lverts->next->x;
							HX_STACK_LINE(2631)
							_this1->localCOMy = _this1->lverts->next->y;
							HX_STACK_LINE(2631)
							Dynamic();
						}
						else{
							HX_STACK_LINE(2631)
							if (((_this1->lverts->next->next->next == null()))){
								HX_STACK_LINE(2631)
								{
									HX_STACK_LINE(2631)
									_this1->localCOMx = _this1->lverts->next->x;
									HX_STACK_LINE(2631)
									_this1->localCOMy = _this1->lverts->next->y;
									HX_STACK_LINE(2631)
									{
									}
								}
								HX_STACK_LINE(2631)
								{
									HX_STACK_LINE(2631)
									Float t = 1.0;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(2631)
									hx::AddEq(_this1->localCOMx,(_this1->lverts->next->next->x * t));
									HX_STACK_LINE(2631)
									hx::AddEq(_this1->localCOMy,(_this1->lverts->next->next->y * t));
								}
								HX_STACK_LINE(2631)
								{
									HX_STACK_LINE(2631)
									Float t = 0.5;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(2631)
									hx::MultEq(_this1->localCOMx,t);
									HX_STACK_LINE(2631)
									hx::MultEq(_this1->localCOMy,t);
								}
							}
							else{
								HX_STACK_LINE(2631)
								{
									HX_STACK_LINE(2631)
									_this1->localCOMx = (int)0;
									HX_STACK_LINE(2631)
									_this1->localCOMy = (int)0;
									HX_STACK_LINE(2631)
									{
									}
								}
								HX_STACK_LINE(2631)
								Float area = 0.0;		HX_STACK_VAR(area,"area");
								HX_STACK_LINE(2631)
								{
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
									HX_STACK_LINE(2631)
									cx_ite = cx_ite->next;
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
									HX_STACK_LINE(2631)
									cx_ite = cx_ite->next;
									HX_STACK_LINE(2631)
									while((true)){
										HX_STACK_LINE(2631)
										if ((!(((cx_ite != null()))))){
											HX_STACK_LINE(2631)
											break;
										}
										HX_STACK_LINE(2631)
										::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
										HX_STACK_LINE(2631)
										{
											HX_STACK_LINE(2631)
											hx::AddEq(area,(v->x * ((w->y - u->y))));
											HX_STACK_LINE(2631)
											Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
											HX_STACK_LINE(2631)
											hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
											HX_STACK_LINE(2631)
											hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
										}
										HX_STACK_LINE(2631)
										u = v;
										HX_STACK_LINE(2631)
										v = w;
										HX_STACK_LINE(2631)
										cx_ite = cx_ite->next;
									}
									HX_STACK_LINE(2631)
									cx_ite = _this1->lverts->next;
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
									HX_STACK_LINE(2631)
									{
										HX_STACK_LINE(2631)
										hx::AddEq(area,(v->x * ((w->y - u->y))));
										HX_STACK_LINE(2631)
										Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
										HX_STACK_LINE(2631)
										hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
										HX_STACK_LINE(2631)
										hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
									}
									HX_STACK_LINE(2631)
									u = v;
									HX_STACK_LINE(2631)
									v = w;
									HX_STACK_LINE(2631)
									cx_ite = cx_ite->next;
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;		HX_STACK_VAR(w1,"w1");
									HX_STACK_LINE(2631)
									{
										HX_STACK_LINE(2631)
										hx::AddEq(area,(v->x * ((w1->y - u->y))));
										HX_STACK_LINE(2631)
										Float cf = ((w1->y * v->x) - (w1->x * v->y));		HX_STACK_VAR(cf,"cf");
										HX_STACK_LINE(2631)
										hx::AddEq(_this1->localCOMx,(((v->x + w1->x)) * cf));
										HX_STACK_LINE(2631)
										hx::AddEq(_this1->localCOMy,(((v->y + w1->y)) * cf));
									}
								}
								HX_STACK_LINE(2631)
								area = (Float((int)1) / Float((((int)3 * area))));
								HX_STACK_LINE(2631)
								{
									HX_STACK_LINE(2631)
									Float t = area;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(2631)
									hx::MultEq(_this1->localCOMx,t);
									HX_STACK_LINE(2631)
									hx::MultEq(_this1->localCOMy,t);
								}
							}
						}
					}
					HX_STACK_LINE(2631)
					if (((_this->wrap_localCOM != null()))){
						HX_STACK_LINE(2631)
						_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
						HX_STACK_LINE(2631)
						_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
						HX_STACK_LINE(2631)
						{
						}
					}
				}
				HX_STACK_LINE(2631)
				{
					HX_STACK_LINE(2631)
					::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(2631)
					if ((_this1->zip_axis)){
						HX_STACK_LINE(2631)
						_this1->zip_axis = false;
						HX_STACK_LINE(2631)
						{
							HX_STACK_LINE(2631)
							Float _g2 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g2,"_g2");
							HX_STACK_LINE(2631)
							_this1->axisx = _g2;
							HX_STACK_LINE(2631)
							Float _g3 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g3,"_g3");
							HX_STACK_LINE(2631)
							_this1->axisy = _g3;
							HX_STACK_LINE(2631)
							Dynamic();
						}
					}
				}
				HX_STACK_LINE(2631)
				{
					HX_STACK_LINE(2631)
					_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
					HX_STACK_LINE(2631)
					_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
				}
			}
		}
	}
	else{
		HX_STACK_LINE(2631)
		::zpp_nape::shape::ZPP_Polygon _this = shape->polygon;		HX_STACK_VAR(_this,"_this");
		HX_STACK_LINE(2631)
		if ((_this->zip_gaxi)){
			HX_STACK_LINE(2631)
			if (((_this->body != null()))){
				HX_STACK_LINE(2631)
				_this->zip_gaxi = false;
				HX_STACK_LINE(2631)
				_this->validate_laxi();
				HX_STACK_LINE(2631)
				{
					HX_STACK_LINE(2631)
					::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(2631)
					if ((_this1->zip_axis)){
						HX_STACK_LINE(2631)
						_this1->zip_axis = false;
						HX_STACK_LINE(2631)
						{
							HX_STACK_LINE(2631)
							Float _g4 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g4,"_g4");
							HX_STACK_LINE(2631)
							_this1->axisx = _g4;
							HX_STACK_LINE(2631)
							Float _g5 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g5,"_g5");
							HX_STACK_LINE(2631)
							_this1->axisy = _g5;
							HX_STACK_LINE(2631)
							Dynamic();
						}
					}
				}
				HX_STACK_LINE(2631)
				if ((_this->zip_gverts)){
					HX_STACK_LINE(2631)
					if (((_this->body != null()))){
						HX_STACK_LINE(2631)
						_this->zip_gverts = false;
						HX_STACK_LINE(2631)
						_this->validate_lverts();
						HX_STACK_LINE(2631)
						{
							HX_STACK_LINE(2631)
							::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(2631)
							if ((_this1->zip_axis)){
								HX_STACK_LINE(2631)
								_this1->zip_axis = false;
								HX_STACK_LINE(2631)
								{
									HX_STACK_LINE(2631)
									Float _g6 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g6,"_g6");
									HX_STACK_LINE(2631)
									_this1->axisx = _g6;
									HX_STACK_LINE(2631)
									Float _g7 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g7,"_g7");
									HX_STACK_LINE(2631)
									_this1->axisy = _g7;
									HX_STACK_LINE(2631)
									Dynamic();
								}
							}
						}
						HX_STACK_LINE(2631)
						::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
						HX_STACK_LINE(2631)
						{
							HX_STACK_LINE(2631)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(2631)
							while((true)){
								HX_STACK_LINE(2631)
								if ((!(((cx_ite != null()))))){
									HX_STACK_LINE(2631)
									break;
								}
								HX_STACK_LINE(2631)
								::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
								HX_STACK_LINE(2631)
								{
									HX_STACK_LINE(2631)
									::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
									HX_STACK_LINE(2631)
									li = li->next;
									HX_STACK_LINE(2631)
									{
										HX_STACK_LINE(2631)
										g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
										HX_STACK_LINE(2631)
										g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
									}
								}
								HX_STACK_LINE(2631)
								cx_ite = cx_ite->next;
							}
						}
					}
				}
				HX_STACK_LINE(2631)
				::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;		HX_STACK_VAR(ite,"ite");
				HX_STACK_LINE(2631)
				{
					HX_STACK_LINE(2631)
					::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(2631)
					::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
					HX_STACK_LINE(2631)
					cx_ite = cx_ite->next;
					HX_STACK_LINE(2631)
					while((true)){
						HX_STACK_LINE(2631)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(2631)
							break;
						}
						HX_STACK_LINE(2631)
						::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
						HX_STACK_LINE(2631)
						{
							HX_STACK_LINE(2631)
							::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
							HX_STACK_LINE(2631)
							ite = ite->next;
							HX_STACK_LINE(2631)
							e->gp0 = u;
							HX_STACK_LINE(2631)
							e->gp1 = v;
							HX_STACK_LINE(2631)
							{
								HX_STACK_LINE(2631)
								e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
								HX_STACK_LINE(2631)
								e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
							}
							HX_STACK_LINE(2631)
							e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
							HX_STACK_LINE(2631)
							if (((e->wrap_gnorm != null()))){
								HX_STACK_LINE(2631)
								e->wrap_gnorm->zpp_inner->x = e->gnormx;
								HX_STACK_LINE(2631)
								e->wrap_gnorm->zpp_inner->y = e->gnormy;
								HX_STACK_LINE(2631)
								{
								}
							}
							HX_STACK_LINE(2631)
							e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
							HX_STACK_LINE(2631)
							e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
						}
						HX_STACK_LINE(2631)
						u = v;
						HX_STACK_LINE(2631)
						cx_ite = cx_ite->next;
					}
					HX_STACK_LINE(2631)
					::zpp_nape::geom::ZPP_Vec2 v = _this->gverts->next;		HX_STACK_VAR(v,"v");
					HX_STACK_LINE(2631)
					{
						HX_STACK_LINE(2631)
						::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
						HX_STACK_LINE(2631)
						ite = ite->next;
						HX_STACK_LINE(2631)
						e->gp0 = u;
						HX_STACK_LINE(2631)
						e->gp1 = v;
						HX_STACK_LINE(2631)
						{
							HX_STACK_LINE(2631)
							e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
							HX_STACK_LINE(2631)
							e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
						}
						HX_STACK_LINE(2631)
						e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
						HX_STACK_LINE(2631)
						if (((e->wrap_gnorm != null()))){
							HX_STACK_LINE(2631)
							e->wrap_gnorm->zpp_inner->x = e->gnormx;
							HX_STACK_LINE(2631)
							e->wrap_gnorm->zpp_inner->y = e->gnormy;
							HX_STACK_LINE(2631)
							{
							}
						}
						HX_STACK_LINE(2631)
						e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
						HX_STACK_LINE(2631)
						e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
					}
				}
			}
		}
	}
	HX_STACK_LINE(2632)
	::zpp_nape::phys::ZPP_Body body = shape->body;		HX_STACK_VAR(body,"body");
	HX_STACK_LINE(2633)
	Float prex = body->posx;		HX_STACK_VAR(prex,"prex");
	HX_STACK_LINE(2634)
	Float prey = body->posy;		HX_STACK_VAR(prey,"prey");
	HX_STACK_LINE(2635)
	body->sweepTime = (int)0;
	HX_STACK_LINE(2636)
	body->sweep_angvel = body->angvel;
	HX_STACK_LINE(2637)
	{
		HX_STACK_LINE(2637)
		Float delta = (deltaTime - body->sweepTime);		HX_STACK_VAR(delta,"delta");
		HX_STACK_LINE(2637)
		if (((delta != (int)0))){
			HX_STACK_LINE(2637)
			body->sweepTime = deltaTime;
			HX_STACK_LINE(2637)
			{
				HX_STACK_LINE(2637)
				Float t = delta;		HX_STACK_VAR(t,"t");
				HX_STACK_LINE(2637)
				hx::AddEq(body->posx,(body->velx * t));
				HX_STACK_LINE(2637)
				hx::AddEq(body->posy,(body->vely * t));
			}
			HX_STACK_LINE(2637)
			if (((body->angvel != (int)0))){
				HX_STACK_LINE(2637)
				Float dr = (body->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
				HX_STACK_LINE(2637)
				hx::AddEq(body->rot,dr);
				HX_STACK_LINE(2637)
				if ((((dr * dr) > 0.0001))){
					HX_STACK_LINE(2637)
					Float _g8 = ::Math_obj::sin(body->rot);		HX_STACK_VAR(_g8,"_g8");
					HX_STACK_LINE(2637)
					body->axisx = _g8;
					HX_STACK_LINE(2637)
					Float _g9 = ::Math_obj::cos(body->rot);		HX_STACK_VAR(_g9,"_g9");
					HX_STACK_LINE(2637)
					body->axisy = _g9;
					HX_STACK_LINE(2637)
					Dynamic();
				}
				else{
					HX_STACK_LINE(2637)
					Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
					HX_STACK_LINE(2637)
					Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
					HX_STACK_LINE(2637)
					Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
					HX_STACK_LINE(2637)
					Float nx = ((((p * body->axisx) + (dr * body->axisy))) * m);		HX_STACK_VAR(nx,"nx");
					HX_STACK_LINE(2637)
					body->axisy = ((((p * body->axisy) - (dr * body->axisx))) * m);
					HX_STACK_LINE(2637)
					body->axisx = nx;
				}
			}
		}
	}
	HX_STACK_LINE(2638)
	Float postx = body->posx;		HX_STACK_VAR(postx,"postx");
	HX_STACK_LINE(2639)
	Float posty = body->posy;		HX_STACK_VAR(posty,"posty");
	HX_STACK_LINE(2640)
	shape->validate_sweepRadius();
	HX_STACK_LINE(2641)
	Float rad = shape->sweepRadius;		HX_STACK_VAR(rad,"rad");
	HX_STACK_LINE(2642)
	::zpp_nape::geom::ZPP_AABB aabb;		HX_STACK_VAR(aabb,"aabb");
	HX_STACK_LINE(2643)
	{
		HX_STACK_LINE(2644)
		if (((::zpp_nape::geom::ZPP_AABB_obj::zpp_pool == null()))){
			HX_STACK_LINE(2645)
			::zpp_nape::geom::ZPP_AABB _g10 = ::zpp_nape::geom::ZPP_AABB_obj::__new();		HX_STACK_VAR(_g10,"_g10");
			HX_STACK_LINE(2645)
			aabb = _g10;
		}
		else{
			HX_STACK_LINE(2651)
			aabb = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
			HX_STACK_LINE(2652)
			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = aabb->next;
			HX_STACK_LINE(2653)
			aabb->next = null();
		}
		HX_STACK_LINE(2658)
		Dynamic();
	}
	struct _Function_1_1{
		inline static Float Block( Float &postx,Float &prex){
			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2660,0x2b65ed03)
			{
				HX_STACK_LINE(2661)
				Float x = prex;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2662)
				Float y = postx;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2663)
				return (  (((x < y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2660)
	aabb->minx = (_Function_1_1::Block(postx,prex) - rad);
	struct _Function_1_2{
		inline static Float Block( Float &postx,Float &prex){
			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2665,0x2b65ed03)
			{
				HX_STACK_LINE(2666)
				Float x = prex;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2667)
				Float y = postx;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2668)
				return (  (((x > y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2665)
	aabb->maxx = (_Function_1_2::Block(postx,prex) + rad);
	struct _Function_1_3{
		inline static Float Block( Float &prey,Float &posty){
			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2670,0x2b65ed03)
			{
				HX_STACK_LINE(2671)
				Float x = prey;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2672)
				Float y = posty;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2673)
				return (  (((x < y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2670)
	aabb->miny = (_Function_1_3::Block(prey,posty) - rad);
	struct _Function_1_4{
		inline static Float Block( Float &prey,Float &posty){
			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2675,0x2b65ed03)
			{
				HX_STACK_LINE(2676)
				Float x = prey;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2677)
				Float y = posty;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2678)
				return (  (((x > y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2675)
	aabb->maxy = (_Function_1_4::Block(prey,posty) + rad);
	HX_STACK_LINE(2680)
	::nape::shape::ShapeList _g11 = this->bphase->shapesInAABB(aabb,false,false,(  (((filter == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionFilter(null()) : ::zpp_nape::dynamics::ZPP_InteractionFilter(filter->zpp_inner) ),this->convexShapeList);		HX_STACK_VAR(_g11,"_g11");
	HX_STACK_LINE(2680)
	::nape::shape::ShapeList list = this->convexShapeList = _g11;		HX_STACK_VAR(list,"list");
	HX_STACK_LINE(2681)
	{
		HX_STACK_LINE(2682)
		::zpp_nape::geom::ZPP_AABB o = aabb;		HX_STACK_VAR(o,"o");
		HX_STACK_LINE(2691)
		{
			HX_STACK_LINE(2691)
			if (((o->outer != null()))){
				HX_STACK_LINE(2691)
				o->outer->zpp_inner = null();
				HX_STACK_LINE(2691)
				o->outer = null();
			}
			HX_STACK_LINE(2691)
			::nape::geom::Vec2 _g12 = o->wrap_max = null();		HX_STACK_VAR(_g12,"_g12");
			HX_STACK_LINE(2691)
			o->wrap_min = _g12;
			HX_STACK_LINE(2691)
			o->_invalidate = null();
			HX_STACK_LINE(2691)
			o->_validate = null();
		}
		HX_STACK_LINE(2692)
		o->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
		HX_STACK_LINE(2693)
		::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o;
	}
	HX_STACK_LINE(2698)
	Float minAxisx = 0.0;		HX_STACK_VAR(minAxisx,"minAxisx");
	HX_STACK_LINE(2699)
	Float minAxisy = 0.0;		HX_STACK_VAR(minAxisy,"minAxisy");
	HX_STACK_LINE(2700)
	{
		HX_STACK_LINE(2701)
		minAxisx = (int)0;
		HX_STACK_LINE(2702)
		minAxisy = (int)0;
		HX_STACK_LINE(2711)
		{
		}
	}
	HX_STACK_LINE(2720)
	Float minPosx = 0.0;		HX_STACK_VAR(minPosx,"minPosx");
	HX_STACK_LINE(2721)
	Float minPosy = 0.0;		HX_STACK_VAR(minPosy,"minPosy");
	HX_STACK_LINE(2722)
	{
		HX_STACK_LINE(2723)
		minPosx = (int)0;
		HX_STACK_LINE(2724)
		minPosy = (int)0;
		HX_STACK_LINE(2733)
		{
		}
	}
	HX_STACK_LINE(2742)
	::nape::shape::Shape mins = null();		HX_STACK_VAR(mins,"mins");
	HX_STACK_LINE(2743)
	Float mint = (deltaTime + (int)1);		HX_STACK_VAR(mint,"mint");
	HX_STACK_LINE(2744)
	{
		HX_STACK_LINE(2744)
		::nape::shape::ShapeIterator _g;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(2744)
		{
			HX_STACK_LINE(2744)
			list->zpp_inner->valmod();
			HX_STACK_LINE(2744)
			_g = ::nape::shape::ShapeIterator_obj::get(list);
		}
		HX_STACK_LINE(2744)
		while((true)){
			struct _Function_3_1{
				inline static bool Block( ::nape::shape::ShapeIterator &_g){
					HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2744,0x2b65ed03)
					{
						HX_STACK_LINE(2744)
						_g->zpp_inner->zpp_inner->valmod();
						HX_STACK_LINE(2744)
						int length;		HX_STACK_VAR(length,"length");
						HX_STACK_LINE(2744)
						{
							HX_STACK_LINE(2744)
							::nape::shape::ShapeList _this = _g->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(2744)
							_this->zpp_inner->valmod();
							HX_STACK_LINE(2744)
							if ((_this->zpp_inner->zip_length)){
								HX_STACK_LINE(2744)
								_this->zpp_inner->zip_length = false;
								HX_STACK_LINE(2744)
								_this->zpp_inner->user_length = _this->zpp_inner->inner->length;
							}
							HX_STACK_LINE(2744)
							length = _this->zpp_inner->user_length;
						}
						HX_STACK_LINE(2744)
						_g->zpp_critical = true;
						struct _Function_4_1{
							inline static bool Block( ::nape::shape::ShapeIterator &_g){
								HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2744,0x2b65ed03)
								{
									HX_STACK_LINE(2744)
									{
										HX_STACK_LINE(2744)
										_g->zpp_next = ::nape::shape::ShapeIterator_obj::zpp_pool;
										HX_STACK_LINE(2744)
										::nape::shape::ShapeIterator_obj::zpp_pool = _g;
										HX_STACK_LINE(2744)
										_g->zpp_inner = null();
									}
									HX_STACK_LINE(2744)
									return false;
								}
								return null();
							}
						};
						HX_STACK_LINE(2744)
						return (  (((_g->zpp_i < length))) ? bool(true) : bool(_Function_4_1::Block(_g)) );
					}
					return null();
				}
			};
			HX_STACK_LINE(2744)
			if ((!(_Function_3_1::Block(_g)))){
				HX_STACK_LINE(2744)
				break;
			}
			HX_STACK_LINE(2744)
			::nape::shape::Shape s;		HX_STACK_VAR(s,"s");
			HX_STACK_LINE(2744)
			{
				HX_STACK_LINE(2744)
				_g->zpp_critical = false;
				HX_STACK_LINE(2744)
				int _g13 = (_g->zpp_i)++;		HX_STACK_VAR(_g13,"_g13");
				HX_STACK_LINE(2744)
				s = _g->zpp_inner->at(_g13);
			}
			HX_STACK_LINE(2745)
			if (((bool((s != shape->outer)) && bool((((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body->outer))))){
				HX_STACK_LINE(2746)
				toi->s1 = shape;
				HX_STACK_LINE(2747)
				toi->s2 = s->zpp_inner;
				HX_STACK_LINE(2748)
				if ((dynamics)){
					HX_STACK_LINE(2749)
					s->zpp_inner->validate_sweepRadius();
					HX_STACK_LINE(2750)
					((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->sweep_angvel = ((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->angvel;
					HX_STACK_LINE(2751)
					((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->sweepTime = (int)0;
					HX_STACK_LINE(2752)
					::zpp_nape::geom::ZPP_SweepDistance_obj::dynamicSweep(toi,deltaTime,(int)0,(int)0,true);
					HX_STACK_LINE(2753)
					{
						HX_STACK_LINE(2753)
						::zpp_nape::phys::ZPP_Body _this = ((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2753)
						Float delta = ((int)0 - _this->sweepTime);		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(2753)
						if (((delta != (int)0))){
							HX_STACK_LINE(2753)
							_this->sweepTime = (int)0;
							HX_STACK_LINE(2753)
							{
								HX_STACK_LINE(2753)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(2753)
								hx::AddEq(_this->posx,(_this->velx * t));
								HX_STACK_LINE(2753)
								hx::AddEq(_this->posy,(_this->vely * t));
							}
							HX_STACK_LINE(2753)
							if (((_this->angvel != (int)0))){
								HX_STACK_LINE(2753)
								Float dr = (_this->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(2753)
								hx::AddEq(_this->rot,dr);
								HX_STACK_LINE(2753)
								if ((((dr * dr) > 0.0001))){
									HX_STACK_LINE(2753)
									Float _g14 = ::Math_obj::sin(_this->rot);		HX_STACK_VAR(_g14,"_g14");
									HX_STACK_LINE(2753)
									_this->axisx = _g14;
									HX_STACK_LINE(2753)
									Float _g15 = ::Math_obj::cos(_this->rot);		HX_STACK_VAR(_g15,"_g15");
									HX_STACK_LINE(2753)
									_this->axisy = _g15;
									HX_STACK_LINE(2753)
									Dynamic();
								}
								else{
									HX_STACK_LINE(2753)
									Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(2753)
									Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(2753)
									Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(2753)
									Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(2753)
									_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
									HX_STACK_LINE(2753)
									_this->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(2754)
					{
						HX_STACK_LINE(2754)
						::zpp_nape::phys::ZPP_Body _this = ((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2754)
						::zpp_nape::shape::ZPP_Shape s1 = s->zpp_inner;		HX_STACK_VAR(s1,"s1");
						HX_STACK_LINE(2754)
						if (((s1->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
							HX_STACK_LINE(2754)
							s1->worldCOMx = (_this->posx + (((_this->axisy * s1->localCOMx) - (_this->axisx * s1->localCOMy))));
							HX_STACK_LINE(2754)
							s1->worldCOMy = (_this->posy + (((s1->localCOMx * _this->axisx) + (s1->localCOMy * _this->axisy))));
						}
						else{
							HX_STACK_LINE(2754)
							::zpp_nape::shape::ZPP_Polygon p = s1->polygon;		HX_STACK_VAR(p,"p");
							HX_STACK_LINE(2754)
							::zpp_nape::geom::ZPP_Vec2 li = p->lverts->next;		HX_STACK_VAR(li,"li");
							HX_STACK_LINE(2754)
							{
								HX_STACK_LINE(2754)
								::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(2754)
								while((true)){
									HX_STACK_LINE(2754)
									if ((!(((cx_ite != null()))))){
										HX_STACK_LINE(2754)
										break;
									}
									HX_STACK_LINE(2754)
									::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
									HX_STACK_LINE(2754)
									{
										HX_STACK_LINE(2754)
										::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
										HX_STACK_LINE(2754)
										li = li->next;
										HX_STACK_LINE(2754)
										{
											HX_STACK_LINE(2754)
											g->x = (_this->posx + (((_this->axisy * l->x) - (_this->axisx * l->y))));
											HX_STACK_LINE(2754)
											g->y = (_this->posy + (((l->x * _this->axisx) + (l->y * _this->axisy))));
										}
									}
									HX_STACK_LINE(2754)
									cx_ite = cx_ite->next;
								}
							}
							HX_STACK_LINE(2754)
							::zpp_nape::util::ZNPNode_ZPP_Edge ite = p->edges->head;		HX_STACK_VAR(ite,"ite");
							HX_STACK_LINE(2754)
							{
								HX_STACK_LINE(2754)
								::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(2754)
								::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
								HX_STACK_LINE(2754)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(2754)
								while((true)){
									HX_STACK_LINE(2754)
									if ((!(((cx_ite != null()))))){
										HX_STACK_LINE(2754)
										break;
									}
									HX_STACK_LINE(2754)
									::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
									HX_STACK_LINE(2754)
									{
										HX_STACK_LINE(2754)
										::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
										HX_STACK_LINE(2754)
										ite = ite->next;
										HX_STACK_LINE(2754)
										{
											HX_STACK_LINE(2754)
											e->gnormx = ((_this->axisy * e->lnormx) - (_this->axisx * e->lnormy));
											HX_STACK_LINE(2754)
											e->gnormy = ((e->lnormx * _this->axisx) + (e->lnormy * _this->axisy));
										}
										HX_STACK_LINE(2754)
										e->gprojection = (((_this->posx * e->gnormx) + (_this->posy * e->gnormy)) + e->lprojection);
										HX_STACK_LINE(2754)
										e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
										HX_STACK_LINE(2754)
										e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
									}
									HX_STACK_LINE(2754)
									u = v;
									HX_STACK_LINE(2754)
									cx_ite = cx_ite->next;
								}
								HX_STACK_LINE(2754)
								::zpp_nape::geom::ZPP_Vec2 v = p->gverts->next;		HX_STACK_VAR(v,"v");
								HX_STACK_LINE(2754)
								{
									HX_STACK_LINE(2754)
									::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
									HX_STACK_LINE(2754)
									ite = ite->next;
									HX_STACK_LINE(2754)
									{
										HX_STACK_LINE(2754)
										e->gnormx = ((_this->axisy * e->lnormx) - (_this->axisx * e->lnormy));
										HX_STACK_LINE(2754)
										e->gnormy = ((e->lnormx * _this->axisx) + (e->lnormy * _this->axisy));
									}
									HX_STACK_LINE(2754)
									e->gprojection = (((_this->posx * e->gnormx) + (_this->posy * e->gnormy)) + e->lprojection);
									HX_STACK_LINE(2754)
									e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
									HX_STACK_LINE(2754)
									e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
								}
							}
						}
					}
				}
				else{
					HX_STACK_LINE(2757)
					::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,deltaTime,(int)0,(int)0);
				}
				HX_STACK_LINE(2759)
				hx::MultEq(toi->toi,deltaTime);
				HX_STACK_LINE(2760)
				if (((bool((toi->toi > (int)0)) && bool((toi->toi < mint))))){
					HX_STACK_LINE(2761)
					mint = toi->toi;
					HX_STACK_LINE(2762)
					{
						HX_STACK_LINE(2763)
						minAxisx = toi->axis->x;
						HX_STACK_LINE(2764)
						minAxisy = toi->axis->y;
						HX_STACK_LINE(2773)
						{
						}
					}
					HX_STACK_LINE(2782)
					{
						HX_STACK_LINE(2783)
						minPosx = toi->c2->x;
						HX_STACK_LINE(2784)
						minPosy = toi->c2->y;
						HX_STACK_LINE(2793)
						{
						}
					}
					HX_STACK_LINE(2802)
					mins = s;
				}
			}
		}
	}
	HX_STACK_LINE(2806)
	list->clear();
	HX_STACK_LINE(2807)
	{
		HX_STACK_LINE(2808)
		::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
		HX_STACK_LINE(2818)
		o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
		HX_STACK_LINE(2819)
		::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
	}
	HX_STACK_LINE(2824)
	{
		HX_STACK_LINE(2824)
		Float delta = ((int)0 - body->sweepTime);		HX_STACK_VAR(delta,"delta");
		HX_STACK_LINE(2824)
		if (((delta != (int)0))){
			HX_STACK_LINE(2824)
			body->sweepTime = (int)0;
			HX_STACK_LINE(2824)
			{
				HX_STACK_LINE(2824)
				Float t = delta;		HX_STACK_VAR(t,"t");
				HX_STACK_LINE(2824)
				hx::AddEq(body->posx,(body->velx * t));
				HX_STACK_LINE(2824)
				hx::AddEq(body->posy,(body->vely * t));
			}
			HX_STACK_LINE(2824)
			if (((body->angvel != (int)0))){
				HX_STACK_LINE(2824)
				Float dr = (body->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
				HX_STACK_LINE(2824)
				hx::AddEq(body->rot,dr);
				HX_STACK_LINE(2824)
				if ((((dr * dr) > 0.0001))){
					HX_STACK_LINE(2824)
					Float _g16 = ::Math_obj::sin(body->rot);		HX_STACK_VAR(_g16,"_g16");
					HX_STACK_LINE(2824)
					body->axisx = _g16;
					HX_STACK_LINE(2824)
					Float _g17 = ::Math_obj::cos(body->rot);		HX_STACK_VAR(_g17,"_g17");
					HX_STACK_LINE(2824)
					body->axisy = _g17;
					HX_STACK_LINE(2824)
					Dynamic();
				}
				else{
					HX_STACK_LINE(2824)
					Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
					HX_STACK_LINE(2824)
					Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
					HX_STACK_LINE(2824)
					Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
					HX_STACK_LINE(2824)
					Float nx = ((((p * body->axisx) + (dr * body->axisy))) * m);		HX_STACK_VAR(nx,"nx");
					HX_STACK_LINE(2824)
					body->axisy = ((((p * body->axisy) - (dr * body->axisx))) * m);
					HX_STACK_LINE(2824)
					body->axisx = nx;
				}
			}
		}
	}
	HX_STACK_LINE(2825)
	if (((shape->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
		HX_STACK_LINE(2825)
		shape->worldCOMx = (body->posx + (((body->axisy * shape->localCOMx) - (body->axisx * shape->localCOMy))));
		HX_STACK_LINE(2825)
		shape->worldCOMy = (body->posy + (((shape->localCOMx * body->axisx) + (shape->localCOMy * body->axisy))));
	}
	else{
		HX_STACK_LINE(2825)
		::zpp_nape::shape::ZPP_Polygon p = shape->polygon;		HX_STACK_VAR(p,"p");
		HX_STACK_LINE(2825)
		::zpp_nape::geom::ZPP_Vec2 li = p->lverts->next;		HX_STACK_VAR(li,"li");
		HX_STACK_LINE(2825)
		{
			HX_STACK_LINE(2825)
			::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2825)
			while((true)){
				HX_STACK_LINE(2825)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2825)
					break;
				}
				HX_STACK_LINE(2825)
				::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
				HX_STACK_LINE(2825)
				{
					HX_STACK_LINE(2825)
					::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
					HX_STACK_LINE(2825)
					li = li->next;
					HX_STACK_LINE(2825)
					{
						HX_STACK_LINE(2825)
						g->x = (body->posx + (((body->axisy * l->x) - (body->axisx * l->y))));
						HX_STACK_LINE(2825)
						g->y = (body->posy + (((l->x * body->axisx) + (l->y * body->axisy))));
					}
				}
				HX_STACK_LINE(2825)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2825)
		::zpp_nape::util::ZNPNode_ZPP_Edge ite = p->edges->head;		HX_STACK_VAR(ite,"ite");
		HX_STACK_LINE(2825)
		{
			HX_STACK_LINE(2825)
			::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2825)
			::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
			HX_STACK_LINE(2825)
			cx_ite = cx_ite->next;
			HX_STACK_LINE(2825)
			while((true)){
				HX_STACK_LINE(2825)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2825)
					break;
				}
				HX_STACK_LINE(2825)
				::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
				HX_STACK_LINE(2825)
				{
					HX_STACK_LINE(2825)
					::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
					HX_STACK_LINE(2825)
					ite = ite->next;
					HX_STACK_LINE(2825)
					{
						HX_STACK_LINE(2825)
						e->gnormx = ((body->axisy * e->lnormx) - (body->axisx * e->lnormy));
						HX_STACK_LINE(2825)
						e->gnormy = ((e->lnormx * body->axisx) + (e->lnormy * body->axisy));
					}
					HX_STACK_LINE(2825)
					e->gprojection = (((body->posx * e->gnormx) + (body->posy * e->gnormy)) + e->lprojection);
					HX_STACK_LINE(2825)
					e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
					HX_STACK_LINE(2825)
					e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
				}
				HX_STACK_LINE(2825)
				u = v;
				HX_STACK_LINE(2825)
				cx_ite = cx_ite->next;
			}
			HX_STACK_LINE(2825)
			::zpp_nape::geom::ZPP_Vec2 v = p->gverts->next;		HX_STACK_VAR(v,"v");
			HX_STACK_LINE(2825)
			{
				HX_STACK_LINE(2825)
				::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
				HX_STACK_LINE(2825)
				ite = ite->next;
				HX_STACK_LINE(2825)
				{
					HX_STACK_LINE(2825)
					e->gnormx = ((body->axisy * e->lnormx) - (body->axisx * e->lnormy));
					HX_STACK_LINE(2825)
					e->gnormy = ((e->lnormx * body->axisx) + (e->lnormy * body->axisy));
				}
				HX_STACK_LINE(2825)
				e->gprojection = (((body->posx * e->gnormx) + (body->posy * e->gnormy)) + e->lprojection);
				HX_STACK_LINE(2825)
				e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
				HX_STACK_LINE(2825)
				e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
			}
		}
	}
	HX_STACK_LINE(2826)
	if (((mint <= deltaTime))){
		HX_STACK_LINE(2827)
		::nape::geom::Vec2 _g23;		HX_STACK_VAR(_g23,"_g23");
		HX_STACK_LINE(2827)
		{
			HX_STACK_LINE(2827)
			Float x = -(minAxisx);		HX_STACK_VAR(x,"x");
			HX_STACK_LINE(2827)
			Float y = -(minAxisy);		HX_STACK_VAR(y,"y");
			HX_STACK_LINE(2827)
			bool weak = false;		HX_STACK_VAR(weak,"weak");
			HX_STACK_LINE(2827)
			::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
			HX_STACK_LINE(2827)
			if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
				HX_STACK_LINE(2827)
				::nape::geom::Vec2 _g18 = ::nape::geom::Vec2_obj::__new(null(),null());		HX_STACK_VAR(_g18,"_g18");
				HX_STACK_LINE(2827)
				ret = _g18;
			}
			else{
				HX_STACK_LINE(2827)
				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
				HX_STACK_LINE(2827)
				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
				HX_STACK_LINE(2827)
				ret->zpp_pool = null();
			}
			HX_STACK_LINE(2827)
			if (((ret->zpp_inner == null()))){
				HX_STACK_LINE(2827)
				::zpp_nape::geom::ZPP_Vec2 _g20;		HX_STACK_VAR(_g20,"_g20");
				HX_STACK_LINE(2827)
				{
					HX_STACK_LINE(2827)
					bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
					HX_STACK_LINE(2827)
					::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2 _g19 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();		HX_STACK_VAR(_g19,"_g19");
							HX_STACK_LINE(2827)
							ret1 = _g19;
						}
						else{
							HX_STACK_LINE(2827)
							ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
							HX_STACK_LINE(2827)
							ret1->next = null();
						}
						HX_STACK_LINE(2827)
						ret1->weak = false;
					}
					HX_STACK_LINE(2827)
					ret1->_immutable = immutable;
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						ret1->x = x;
						HX_STACK_LINE(2827)
						ret1->y = y;
						HX_STACK_LINE(2827)
						{
						}
					}
					HX_STACK_LINE(2827)
					_g20 = ret1;
				}
				HX_STACK_LINE(2827)
				ret->zpp_inner = _g20;
				HX_STACK_LINE(2827)
				ret->zpp_inner->outer = ret;
			}
			else{
				HX_STACK_LINE(2827)
				Float _g21;		HX_STACK_VAR(_g21,"_g21");
				HX_STACK_LINE(2827)
				{
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2827)
						if (((_this->_validate != null()))){
							HX_STACK_LINE(2827)
							_this->_validate();
						}
					}
					HX_STACK_LINE(2827)
					_g21 = ret->zpp_inner->x;
				}
				struct _Function_4_1{
					inline static bool Block( ::nape::geom::Vec2 &ret,Float &y){
						HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2827,0x2b65ed03)
						{
							HX_STACK_LINE(2827)
							Float _g22;		HX_STACK_VAR(_g22,"_g22");
							HX_STACK_LINE(2827)
							{
								HX_STACK_LINE(2827)
								{
									HX_STACK_LINE(2827)
									::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(2827)
									if (((_this->_validate != null()))){
										HX_STACK_LINE(2827)
										_this->_validate();
									}
								}
								HX_STACK_LINE(2827)
								_g22 = ret->zpp_inner->y;
							}
							HX_STACK_LINE(2827)
							return (_g22 == y);
						}
						return null();
					}
				};
				HX_STACK_LINE(2827)
				if ((!(((  (((_g21 == x))) ? bool(_Function_4_1::Block(ret,y)) : bool(false) ))))){
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						ret->zpp_inner->x = x;
						HX_STACK_LINE(2827)
						ret->zpp_inner->y = y;
						HX_STACK_LINE(2827)
						{
						}
					}
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2827)
						if (((_this->_invalidate != null()))){
							HX_STACK_LINE(2827)
							_this->_invalidate(_this);
						}
					}
				}
				HX_STACK_LINE(2827)
				ret;
			}
			HX_STACK_LINE(2827)
			ret->zpp_inner->weak = weak;
			HX_STACK_LINE(2827)
			_g23 = ret;
		}
		HX_STACK_LINE(2827)
		::nape::geom::Vec2 _g29;		HX_STACK_VAR(_g29,"_g29");
		HX_STACK_LINE(2827)
		{
			HX_STACK_LINE(2827)
			bool weak = false;		HX_STACK_VAR(weak,"weak");
			HX_STACK_LINE(2827)
			::nape::geom::Vec2 ret;		HX_STACK_VAR(ret,"ret");
			HX_STACK_LINE(2827)
			if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
				HX_STACK_LINE(2827)
				::nape::geom::Vec2 _g24 = ::nape::geom::Vec2_obj::__new(null(),null());		HX_STACK_VAR(_g24,"_g24");
				HX_STACK_LINE(2827)
				ret = _g24;
			}
			else{
				HX_STACK_LINE(2827)
				ret = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
				HX_STACK_LINE(2827)
				::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret->zpp_pool;
				HX_STACK_LINE(2827)
				ret->zpp_pool = null();
			}
			HX_STACK_LINE(2827)
			if (((ret->zpp_inner == null()))){
				HX_STACK_LINE(2827)
				::zpp_nape::geom::ZPP_Vec2 _g26;		HX_STACK_VAR(_g26,"_g26");
				HX_STACK_LINE(2827)
				{
					HX_STACK_LINE(2827)
					bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
					HX_STACK_LINE(2827)
					::zpp_nape::geom::ZPP_Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2 _g25 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();		HX_STACK_VAR(_g25,"_g25");
							HX_STACK_LINE(2827)
							ret1 = _g25;
						}
						else{
							HX_STACK_LINE(2827)
							ret1 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
							HX_STACK_LINE(2827)
							::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret1->next;
							HX_STACK_LINE(2827)
							ret1->next = null();
						}
						HX_STACK_LINE(2827)
						ret1->weak = false;
					}
					HX_STACK_LINE(2827)
					ret1->_immutable = immutable;
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						ret1->x = minPosx;
						HX_STACK_LINE(2827)
						ret1->y = minPosy;
						HX_STACK_LINE(2827)
						{
						}
					}
					HX_STACK_LINE(2827)
					_g26 = ret1;
				}
				HX_STACK_LINE(2827)
				ret->zpp_inner = _g26;
				HX_STACK_LINE(2827)
				ret->zpp_inner->outer = ret;
			}
			else{
				HX_STACK_LINE(2827)
				Float _g27;		HX_STACK_VAR(_g27,"_g27");
				HX_STACK_LINE(2827)
				{
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2827)
						if (((_this->_validate != null()))){
							HX_STACK_LINE(2827)
							_this->_validate();
						}
					}
					HX_STACK_LINE(2827)
					_g27 = ret->zpp_inner->x;
				}
				struct _Function_4_1{
					inline static bool Block( ::nape::geom::Vec2 &ret,Float &minPosy){
						HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2827,0x2b65ed03)
						{
							HX_STACK_LINE(2827)
							Float _g28;		HX_STACK_VAR(_g28,"_g28");
							HX_STACK_LINE(2827)
							{
								HX_STACK_LINE(2827)
								{
									HX_STACK_LINE(2827)
									::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(2827)
									if (((_this->_validate != null()))){
										HX_STACK_LINE(2827)
										_this->_validate();
									}
								}
								HX_STACK_LINE(2827)
								_g28 = ret->zpp_inner->y;
							}
							HX_STACK_LINE(2827)
							return (_g28 == minPosy);
						}
						return null();
					}
				};
				HX_STACK_LINE(2827)
				if ((!(((  (((_g27 == minPosx))) ? bool(_Function_4_1::Block(ret,minPosy)) : bool(false) ))))){
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						ret->zpp_inner->x = minPosx;
						HX_STACK_LINE(2827)
						ret->zpp_inner->y = minPosy;
						HX_STACK_LINE(2827)
						{
						}
					}
					HX_STACK_LINE(2827)
					{
						HX_STACK_LINE(2827)
						::zpp_nape::geom::ZPP_Vec2 _this = ret->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2827)
						if (((_this->_invalidate != null()))){
							HX_STACK_LINE(2827)
							_this->_invalidate(_this);
						}
					}
				}
				HX_STACK_LINE(2827)
				ret;
			}
			HX_STACK_LINE(2827)
			ret->zpp_inner->weak = weak;
			HX_STACK_LINE(2827)
			_g29 = ret;
		}
		HX_STACK_LINE(2827)
		return ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getConvex(_g23,_g29,mint,mins);
	}
	else{
		HX_STACK_LINE(2829)
		return null();
	}
	HX_STACK_LINE(2826)
	return null();
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,convexCast,return )

Void ZPP_Space_obj::prepareCast( ::zpp_nape::shape::ZPP_Shape s){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","prepareCast",0x89217030,"zpp_nape.space.ZPP_Space.prepareCast","zpp_nape/space/Space.hx",2834,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(s,"s")
		HX_STACK_LINE(2834)
		if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
			HX_STACK_LINE(2834)
			::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2834)
			if ((_this->zip_worldCOM)){
				HX_STACK_LINE(2834)
				if (((_this->body != null()))){
					HX_STACK_LINE(2834)
					_this->zip_worldCOM = false;
					HX_STACK_LINE(2834)
					if ((_this->zip_localCOM)){
						HX_STACK_LINE(2834)
						_this->zip_localCOM = false;
						HX_STACK_LINE(2834)
						if (((_this->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
							HX_STACK_LINE(2834)
							::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(2834)
							if (((_this1->lverts->next->next == null()))){
								HX_STACK_LINE(2834)
								_this1->localCOMx = _this1->lverts->next->x;
								HX_STACK_LINE(2834)
								_this1->localCOMy = _this1->lverts->next->y;
								HX_STACK_LINE(2834)
								Dynamic();
							}
							else{
								HX_STACK_LINE(2834)
								if (((_this1->lverts->next->next->next == null()))){
									HX_STACK_LINE(2834)
									{
										HX_STACK_LINE(2834)
										_this1->localCOMx = _this1->lverts->next->x;
										HX_STACK_LINE(2834)
										_this1->localCOMy = _this1->lverts->next->y;
										HX_STACK_LINE(2834)
										{
										}
									}
									HX_STACK_LINE(2834)
									{
										HX_STACK_LINE(2834)
										Float t = 1.0;		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(2834)
										hx::AddEq(_this1->localCOMx,(_this1->lverts->next->next->x * t));
										HX_STACK_LINE(2834)
										hx::AddEq(_this1->localCOMy,(_this1->lverts->next->next->y * t));
									}
									HX_STACK_LINE(2834)
									{
										HX_STACK_LINE(2834)
										Float t = 0.5;		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(2834)
										hx::MultEq(_this1->localCOMx,t);
										HX_STACK_LINE(2834)
										hx::MultEq(_this1->localCOMy,t);
									}
								}
								else{
									HX_STACK_LINE(2834)
									{
										HX_STACK_LINE(2834)
										_this1->localCOMx = (int)0;
										HX_STACK_LINE(2834)
										_this1->localCOMy = (int)0;
										HX_STACK_LINE(2834)
										{
										}
									}
									HX_STACK_LINE(2834)
									Float area = 0.0;		HX_STACK_VAR(area,"area");
									HX_STACK_LINE(2834)
									{
										HX_STACK_LINE(2834)
										::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
										HX_STACK_LINE(2834)
										::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
										HX_STACK_LINE(2834)
										cx_ite = cx_ite->next;
										HX_STACK_LINE(2834)
										::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
										HX_STACK_LINE(2834)
										cx_ite = cx_ite->next;
										HX_STACK_LINE(2834)
										while((true)){
											HX_STACK_LINE(2834)
											if ((!(((cx_ite != null()))))){
												HX_STACK_LINE(2834)
												break;
											}
											HX_STACK_LINE(2834)
											::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
											HX_STACK_LINE(2834)
											{
												HX_STACK_LINE(2834)
												hx::AddEq(area,(v->x * ((w->y - u->y))));
												HX_STACK_LINE(2834)
												Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
												HX_STACK_LINE(2834)
												hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
												HX_STACK_LINE(2834)
												hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
											}
											HX_STACK_LINE(2834)
											u = v;
											HX_STACK_LINE(2834)
											v = w;
											HX_STACK_LINE(2834)
											cx_ite = cx_ite->next;
										}
										HX_STACK_LINE(2834)
										cx_ite = _this1->lverts->next;
										HX_STACK_LINE(2834)
										::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
										HX_STACK_LINE(2834)
										{
											HX_STACK_LINE(2834)
											hx::AddEq(area,(v->x * ((w->y - u->y))));
											HX_STACK_LINE(2834)
											Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
											HX_STACK_LINE(2834)
											hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
											HX_STACK_LINE(2834)
											hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
										}
										HX_STACK_LINE(2834)
										u = v;
										HX_STACK_LINE(2834)
										v = w;
										HX_STACK_LINE(2834)
										cx_ite = cx_ite->next;
										HX_STACK_LINE(2834)
										::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;		HX_STACK_VAR(w1,"w1");
										HX_STACK_LINE(2834)
										{
											HX_STACK_LINE(2834)
											hx::AddEq(area,(v->x * ((w1->y - u->y))));
											HX_STACK_LINE(2834)
											Float cf = ((w1->y * v->x) - (w1->x * v->y));		HX_STACK_VAR(cf,"cf");
											HX_STACK_LINE(2834)
											hx::AddEq(_this1->localCOMx,(((v->x + w1->x)) * cf));
											HX_STACK_LINE(2834)
											hx::AddEq(_this1->localCOMy,(((v->y + w1->y)) * cf));
										}
									}
									HX_STACK_LINE(2834)
									area = (Float((int)1) / Float((((int)3 * area))));
									HX_STACK_LINE(2834)
									{
										HX_STACK_LINE(2834)
										Float t = area;		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(2834)
										hx::MultEq(_this1->localCOMx,t);
										HX_STACK_LINE(2834)
										hx::MultEq(_this1->localCOMy,t);
									}
								}
							}
						}
						HX_STACK_LINE(2834)
						if (((_this->wrap_localCOM != null()))){
							HX_STACK_LINE(2834)
							_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
							HX_STACK_LINE(2834)
							_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
							HX_STACK_LINE(2834)
							{
							}
						}
					}
					HX_STACK_LINE(2834)
					{
						HX_STACK_LINE(2834)
						::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2834)
						if ((_this1->zip_axis)){
							HX_STACK_LINE(2834)
							_this1->zip_axis = false;
							HX_STACK_LINE(2834)
							{
								HX_STACK_LINE(2834)
								Float _g = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g,"_g");
								HX_STACK_LINE(2834)
								_this1->axisx = _g;
								HX_STACK_LINE(2834)
								Float _g1 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g1,"_g1");
								HX_STACK_LINE(2834)
								_this1->axisy = _g1;
								HX_STACK_LINE(2834)
								Dynamic();
							}
						}
					}
					HX_STACK_LINE(2834)
					{
						HX_STACK_LINE(2834)
						_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
						HX_STACK_LINE(2834)
						_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
					}
				}
			}
		}
		else{
			HX_STACK_LINE(2835)
			::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(2835)
			if ((_this->zip_gaxi)){
				HX_STACK_LINE(2835)
				if (((_this->body != null()))){
					HX_STACK_LINE(2835)
					_this->zip_gaxi = false;
					HX_STACK_LINE(2835)
					_this->validate_laxi();
					HX_STACK_LINE(2835)
					{
						HX_STACK_LINE(2835)
						::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2835)
						if ((_this1->zip_axis)){
							HX_STACK_LINE(2835)
							_this1->zip_axis = false;
							HX_STACK_LINE(2835)
							{
								HX_STACK_LINE(2835)
								Float _g2 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g2,"_g2");
								HX_STACK_LINE(2835)
								_this1->axisx = _g2;
								HX_STACK_LINE(2835)
								Float _g3 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g3,"_g3");
								HX_STACK_LINE(2835)
								_this1->axisy = _g3;
								HX_STACK_LINE(2835)
								Dynamic();
							}
						}
					}
					HX_STACK_LINE(2835)
					if ((_this->zip_gverts)){
						HX_STACK_LINE(2835)
						if (((_this->body != null()))){
							HX_STACK_LINE(2835)
							_this->zip_gverts = false;
							HX_STACK_LINE(2835)
							_this->validate_lverts();
							HX_STACK_LINE(2835)
							{
								HX_STACK_LINE(2835)
								::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(2835)
								if ((_this1->zip_axis)){
									HX_STACK_LINE(2835)
									_this1->zip_axis = false;
									HX_STACK_LINE(2835)
									{
										HX_STACK_LINE(2835)
										Float _g4 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g4,"_g4");
										HX_STACK_LINE(2835)
										_this1->axisx = _g4;
										HX_STACK_LINE(2835)
										Float _g5 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g5,"_g5");
										HX_STACK_LINE(2835)
										_this1->axisy = _g5;
										HX_STACK_LINE(2835)
										Dynamic();
									}
								}
							}
							HX_STACK_LINE(2835)
							::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
							HX_STACK_LINE(2835)
							{
								HX_STACK_LINE(2835)
								::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(2835)
								while((true)){
									HX_STACK_LINE(2835)
									if ((!(((cx_ite != null()))))){
										HX_STACK_LINE(2835)
										break;
									}
									HX_STACK_LINE(2835)
									::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
									HX_STACK_LINE(2835)
									{
										HX_STACK_LINE(2835)
										::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
										HX_STACK_LINE(2835)
										li = li->next;
										HX_STACK_LINE(2835)
										{
											HX_STACK_LINE(2835)
											g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
											HX_STACK_LINE(2835)
											g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
										}
									}
									HX_STACK_LINE(2835)
									cx_ite = cx_ite->next;
								}
							}
						}
					}
					HX_STACK_LINE(2835)
					::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;		HX_STACK_VAR(ite,"ite");
					HX_STACK_LINE(2835)
					{
						HX_STACK_LINE(2835)
						::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(2835)
						::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
						HX_STACK_LINE(2835)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(2835)
						while((true)){
							HX_STACK_LINE(2835)
							if ((!(((cx_ite != null()))))){
								HX_STACK_LINE(2835)
								break;
							}
							HX_STACK_LINE(2835)
							::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(2835)
							{
								HX_STACK_LINE(2835)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(2835)
								ite = ite->next;
								HX_STACK_LINE(2835)
								e->gp0 = u;
								HX_STACK_LINE(2835)
								e->gp1 = v;
								HX_STACK_LINE(2835)
								{
									HX_STACK_LINE(2835)
									e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
									HX_STACK_LINE(2835)
									e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
								}
								HX_STACK_LINE(2835)
								e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
								HX_STACK_LINE(2835)
								if (((e->wrap_gnorm != null()))){
									HX_STACK_LINE(2835)
									e->wrap_gnorm->zpp_inner->x = e->gnormx;
									HX_STACK_LINE(2835)
									e->wrap_gnorm->zpp_inner->y = e->gnormy;
									HX_STACK_LINE(2835)
									{
									}
								}
								HX_STACK_LINE(2835)
								e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
								HX_STACK_LINE(2835)
								e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
							}
							HX_STACK_LINE(2835)
							u = v;
							HX_STACK_LINE(2835)
							cx_ite = cx_ite->next;
						}
						HX_STACK_LINE(2835)
						::zpp_nape::geom::ZPP_Vec2 v = _this->gverts->next;		HX_STACK_VAR(v,"v");
						HX_STACK_LINE(2835)
						{
							HX_STACK_LINE(2835)
							::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
							HX_STACK_LINE(2835)
							ite = ite->next;
							HX_STACK_LINE(2835)
							e->gp0 = u;
							HX_STACK_LINE(2835)
							e->gp1 = v;
							HX_STACK_LINE(2835)
							{
								HX_STACK_LINE(2835)
								e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
								HX_STACK_LINE(2835)
								e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
							}
							HX_STACK_LINE(2835)
							e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
							HX_STACK_LINE(2835)
							if (((e->wrap_gnorm != null()))){
								HX_STACK_LINE(2835)
								e->wrap_gnorm->zpp_inner->x = e->gnormx;
								HX_STACK_LINE(2835)
								e->wrap_gnorm->zpp_inner->y = e->gnormy;
								HX_STACK_LINE(2835)
								{
								}
							}
							HX_STACK_LINE(2835)
							e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
							HX_STACK_LINE(2835)
							e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
						}
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,prepareCast,(void))

::nape::geom::ConvexResultList ZPP_Space_obj::convexMultiCast( ::zpp_nape::shape::ZPP_Shape shape,Float deltaTime,::nape::dynamics::InteractionFilter filter,bool dynamics,::nape::geom::ConvexResultList output){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","convexMultiCast",0xc8aa7abb,"zpp_nape.space.ZPP_Space.convexMultiCast","zpp_nape/space/Space.hx",2837,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(shape,"shape")
	HX_STACK_ARG(deltaTime,"deltaTime")
	HX_STACK_ARG(filter,"filter")
	HX_STACK_ARG(dynamics,"dynamics")
	HX_STACK_ARG(output,"output")
	HX_STACK_LINE(2838)
	::zpp_nape::geom::ZPP_ToiEvent toi;		HX_STACK_VAR(toi,"toi");
	HX_STACK_LINE(2839)
	{
		HX_STACK_LINE(2840)
		if (((::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool == null()))){
			HX_STACK_LINE(2841)
			::zpp_nape::geom::ZPP_ToiEvent _g = ::zpp_nape::geom::ZPP_ToiEvent_obj::__new();		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(2841)
			toi = _g;
		}
		else{
			HX_STACK_LINE(2847)
			toi = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
			HX_STACK_LINE(2848)
			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = toi->next;
			HX_STACK_LINE(2849)
			toi->next = null();
		}
		HX_STACK_LINE(2854)
		{
			HX_STACK_LINE(2854)
			toi->failed = false;
			HX_STACK_LINE(2854)
			::zpp_nape::shape::ZPP_Shape _g1 = toi->s2 = null();		HX_STACK_VAR(_g1,"_g1");
			HX_STACK_LINE(2854)
			toi->s1 = _g1;
			HX_STACK_LINE(2854)
			toi->arbiter = null();
		}
	}
	HX_STACK_LINE(2856)
	if (((shape->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
		HX_STACK_LINE(2856)
		::zpp_nape::shape::ZPP_Circle _this = shape->circle;		HX_STACK_VAR(_this,"_this");
		HX_STACK_LINE(2856)
		if ((_this->zip_worldCOM)){
			HX_STACK_LINE(2856)
			if (((_this->body != null()))){
				HX_STACK_LINE(2856)
				_this->zip_worldCOM = false;
				HX_STACK_LINE(2856)
				if ((_this->zip_localCOM)){
					HX_STACK_LINE(2856)
					_this->zip_localCOM = false;
					HX_STACK_LINE(2856)
					if (((_this->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
						HX_STACK_LINE(2856)
						::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
						HX_STACK_LINE(2856)
						if (((_this1->lverts->next->next == null()))){
							HX_STACK_LINE(2856)
							_this1->localCOMx = _this1->lverts->next->x;
							HX_STACK_LINE(2856)
							_this1->localCOMy = _this1->lverts->next->y;
							HX_STACK_LINE(2856)
							Dynamic();
						}
						else{
							HX_STACK_LINE(2856)
							if (((_this1->lverts->next->next->next == null()))){
								HX_STACK_LINE(2856)
								{
									HX_STACK_LINE(2856)
									_this1->localCOMx = _this1->lverts->next->x;
									HX_STACK_LINE(2856)
									_this1->localCOMy = _this1->lverts->next->y;
									HX_STACK_LINE(2856)
									{
									}
								}
								HX_STACK_LINE(2856)
								{
									HX_STACK_LINE(2856)
									Float t = 1.0;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(2856)
									hx::AddEq(_this1->localCOMx,(_this1->lverts->next->next->x * t));
									HX_STACK_LINE(2856)
									hx::AddEq(_this1->localCOMy,(_this1->lverts->next->next->y * t));
								}
								HX_STACK_LINE(2856)
								{
									HX_STACK_LINE(2856)
									Float t = 0.5;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(2856)
									hx::MultEq(_this1->localCOMx,t);
									HX_STACK_LINE(2856)
									hx::MultEq(_this1->localCOMy,t);
								}
							}
							else{
								HX_STACK_LINE(2856)
								{
									HX_STACK_LINE(2856)
									_this1->localCOMx = (int)0;
									HX_STACK_LINE(2856)
									_this1->localCOMy = (int)0;
									HX_STACK_LINE(2856)
									{
									}
								}
								HX_STACK_LINE(2856)
								Float area = 0.0;		HX_STACK_VAR(area,"area");
								HX_STACK_LINE(2856)
								{
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 cx_ite = _this1->lverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
									HX_STACK_LINE(2856)
									cx_ite = cx_ite->next;
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
									HX_STACK_LINE(2856)
									cx_ite = cx_ite->next;
									HX_STACK_LINE(2856)
									while((true)){
										HX_STACK_LINE(2856)
										if ((!(((cx_ite != null()))))){
											HX_STACK_LINE(2856)
											break;
										}
										HX_STACK_LINE(2856)
										::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
										HX_STACK_LINE(2856)
										{
											HX_STACK_LINE(2856)
											hx::AddEq(area,(v->x * ((w->y - u->y))));
											HX_STACK_LINE(2856)
											Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
											HX_STACK_LINE(2856)
											hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
											HX_STACK_LINE(2856)
											hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
										}
										HX_STACK_LINE(2856)
										u = v;
										HX_STACK_LINE(2856)
										v = w;
										HX_STACK_LINE(2856)
										cx_ite = cx_ite->next;
									}
									HX_STACK_LINE(2856)
									cx_ite = _this1->lverts->next;
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 w = cx_ite;		HX_STACK_VAR(w,"w");
									HX_STACK_LINE(2856)
									{
										HX_STACK_LINE(2856)
										hx::AddEq(area,(v->x * ((w->y - u->y))));
										HX_STACK_LINE(2856)
										Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
										HX_STACK_LINE(2856)
										hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
										HX_STACK_LINE(2856)
										hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
									}
									HX_STACK_LINE(2856)
									u = v;
									HX_STACK_LINE(2856)
									v = w;
									HX_STACK_LINE(2856)
									cx_ite = cx_ite->next;
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite;		HX_STACK_VAR(w1,"w1");
									HX_STACK_LINE(2856)
									{
										HX_STACK_LINE(2856)
										hx::AddEq(area,(v->x * ((w1->y - u->y))));
										HX_STACK_LINE(2856)
										Float cf = ((w1->y * v->x) - (w1->x * v->y));		HX_STACK_VAR(cf,"cf");
										HX_STACK_LINE(2856)
										hx::AddEq(_this1->localCOMx,(((v->x + w1->x)) * cf));
										HX_STACK_LINE(2856)
										hx::AddEq(_this1->localCOMy,(((v->y + w1->y)) * cf));
									}
								}
								HX_STACK_LINE(2856)
								area = (Float((int)1) / Float((((int)3 * area))));
								HX_STACK_LINE(2856)
								{
									HX_STACK_LINE(2856)
									Float t = area;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(2856)
									hx::MultEq(_this1->localCOMx,t);
									HX_STACK_LINE(2856)
									hx::MultEq(_this1->localCOMy,t);
								}
							}
						}
					}
					HX_STACK_LINE(2856)
					if (((_this->wrap_localCOM != null()))){
						HX_STACK_LINE(2856)
						_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
						HX_STACK_LINE(2856)
						_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
						HX_STACK_LINE(2856)
						{
						}
					}
				}
				HX_STACK_LINE(2856)
				{
					HX_STACK_LINE(2856)
					::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(2856)
					if ((_this1->zip_axis)){
						HX_STACK_LINE(2856)
						_this1->zip_axis = false;
						HX_STACK_LINE(2856)
						{
							HX_STACK_LINE(2856)
							Float _g2 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g2,"_g2");
							HX_STACK_LINE(2856)
							_this1->axisx = _g2;
							HX_STACK_LINE(2856)
							Float _g3 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g3,"_g3");
							HX_STACK_LINE(2856)
							_this1->axisy = _g3;
							HX_STACK_LINE(2856)
							Dynamic();
						}
					}
				}
				HX_STACK_LINE(2856)
				{
					HX_STACK_LINE(2856)
					_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
					HX_STACK_LINE(2856)
					_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
				}
			}
		}
	}
	else{
		HX_STACK_LINE(2856)
		::zpp_nape::shape::ZPP_Polygon _this = shape->polygon;		HX_STACK_VAR(_this,"_this");
		HX_STACK_LINE(2856)
		if ((_this->zip_gaxi)){
			HX_STACK_LINE(2856)
			if (((_this->body != null()))){
				HX_STACK_LINE(2856)
				_this->zip_gaxi = false;
				HX_STACK_LINE(2856)
				_this->validate_laxi();
				HX_STACK_LINE(2856)
				{
					HX_STACK_LINE(2856)
					::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
					HX_STACK_LINE(2856)
					if ((_this1->zip_axis)){
						HX_STACK_LINE(2856)
						_this1->zip_axis = false;
						HX_STACK_LINE(2856)
						{
							HX_STACK_LINE(2856)
							Float _g4 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g4,"_g4");
							HX_STACK_LINE(2856)
							_this1->axisx = _g4;
							HX_STACK_LINE(2856)
							Float _g5 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g5,"_g5");
							HX_STACK_LINE(2856)
							_this1->axisy = _g5;
							HX_STACK_LINE(2856)
							Dynamic();
						}
					}
				}
				HX_STACK_LINE(2856)
				if ((_this->zip_gverts)){
					HX_STACK_LINE(2856)
					if (((_this->body != null()))){
						HX_STACK_LINE(2856)
						_this->zip_gverts = false;
						HX_STACK_LINE(2856)
						_this->validate_lverts();
						HX_STACK_LINE(2856)
						{
							HX_STACK_LINE(2856)
							::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(2856)
							if ((_this1->zip_axis)){
								HX_STACK_LINE(2856)
								_this1->zip_axis = false;
								HX_STACK_LINE(2856)
								{
									HX_STACK_LINE(2856)
									Float _g6 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g6,"_g6");
									HX_STACK_LINE(2856)
									_this1->axisx = _g6;
									HX_STACK_LINE(2856)
									Float _g7 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g7,"_g7");
									HX_STACK_LINE(2856)
									_this1->axisy = _g7;
									HX_STACK_LINE(2856)
									Dynamic();
								}
							}
						}
						HX_STACK_LINE(2856)
						::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
						HX_STACK_LINE(2856)
						{
							HX_STACK_LINE(2856)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(2856)
							while((true)){
								HX_STACK_LINE(2856)
								if ((!(((cx_ite != null()))))){
									HX_STACK_LINE(2856)
									break;
								}
								HX_STACK_LINE(2856)
								::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
								HX_STACK_LINE(2856)
								{
									HX_STACK_LINE(2856)
									::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
									HX_STACK_LINE(2856)
									li = li->next;
									HX_STACK_LINE(2856)
									{
										HX_STACK_LINE(2856)
										g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
										HX_STACK_LINE(2856)
										g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
									}
								}
								HX_STACK_LINE(2856)
								cx_ite = cx_ite->next;
							}
						}
					}
				}
				HX_STACK_LINE(2856)
				::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;		HX_STACK_VAR(ite,"ite");
				HX_STACK_LINE(2856)
				{
					HX_STACK_LINE(2856)
					::zpp_nape::geom::ZPP_Vec2 cx_ite = _this->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(2856)
					::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
					HX_STACK_LINE(2856)
					cx_ite = cx_ite->next;
					HX_STACK_LINE(2856)
					while((true)){
						HX_STACK_LINE(2856)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(2856)
							break;
						}
						HX_STACK_LINE(2856)
						::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
						HX_STACK_LINE(2856)
						{
							HX_STACK_LINE(2856)
							::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
							HX_STACK_LINE(2856)
							ite = ite->next;
							HX_STACK_LINE(2856)
							e->gp0 = u;
							HX_STACK_LINE(2856)
							e->gp1 = v;
							HX_STACK_LINE(2856)
							{
								HX_STACK_LINE(2856)
								e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
								HX_STACK_LINE(2856)
								e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
							}
							HX_STACK_LINE(2856)
							e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
							HX_STACK_LINE(2856)
							if (((e->wrap_gnorm != null()))){
								HX_STACK_LINE(2856)
								e->wrap_gnorm->zpp_inner->x = e->gnormx;
								HX_STACK_LINE(2856)
								e->wrap_gnorm->zpp_inner->y = e->gnormy;
								HX_STACK_LINE(2856)
								{
								}
							}
							HX_STACK_LINE(2856)
							e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
							HX_STACK_LINE(2856)
							e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
						}
						HX_STACK_LINE(2856)
						u = v;
						HX_STACK_LINE(2856)
						cx_ite = cx_ite->next;
					}
					HX_STACK_LINE(2856)
					::zpp_nape::geom::ZPP_Vec2 v = _this->gverts->next;		HX_STACK_VAR(v,"v");
					HX_STACK_LINE(2856)
					{
						HX_STACK_LINE(2856)
						::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
						HX_STACK_LINE(2856)
						ite = ite->next;
						HX_STACK_LINE(2856)
						e->gp0 = u;
						HX_STACK_LINE(2856)
						e->gp1 = v;
						HX_STACK_LINE(2856)
						{
							HX_STACK_LINE(2856)
							e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
							HX_STACK_LINE(2856)
							e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
						}
						HX_STACK_LINE(2856)
						e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
						HX_STACK_LINE(2856)
						if (((e->wrap_gnorm != null()))){
							HX_STACK_LINE(2856)
							e->wrap_gnorm->zpp_inner->x = e->gnormx;
							HX_STACK_LINE(2856)
							e->wrap_gnorm->zpp_inner->y = e->gnormy;
							HX_STACK_LINE(2856)
							{
							}
						}
						HX_STACK_LINE(2856)
						e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
						HX_STACK_LINE(2856)
						e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
					}
				}
			}
		}
	}
	HX_STACK_LINE(2857)
	::zpp_nape::phys::ZPP_Body body = shape->body;		HX_STACK_VAR(body,"body");
	HX_STACK_LINE(2858)
	Float prex = body->posx;		HX_STACK_VAR(prex,"prex");
	HX_STACK_LINE(2859)
	Float prey = body->posy;		HX_STACK_VAR(prey,"prey");
	HX_STACK_LINE(2860)
	body->sweepTime = (int)0;
	HX_STACK_LINE(2861)
	body->sweep_angvel = body->angvel;
	HX_STACK_LINE(2862)
	{
		HX_STACK_LINE(2862)
		Float delta = (deltaTime - body->sweepTime);		HX_STACK_VAR(delta,"delta");
		HX_STACK_LINE(2862)
		if (((delta != (int)0))){
			HX_STACK_LINE(2862)
			body->sweepTime = deltaTime;
			HX_STACK_LINE(2862)
			{
				HX_STACK_LINE(2862)
				Float t = delta;		HX_STACK_VAR(t,"t");
				HX_STACK_LINE(2862)
				hx::AddEq(body->posx,(body->velx * t));
				HX_STACK_LINE(2862)
				hx::AddEq(body->posy,(body->vely * t));
			}
			HX_STACK_LINE(2862)
			if (((body->angvel != (int)0))){
				HX_STACK_LINE(2862)
				Float dr = (body->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
				HX_STACK_LINE(2862)
				hx::AddEq(body->rot,dr);
				HX_STACK_LINE(2862)
				if ((((dr * dr) > 0.0001))){
					HX_STACK_LINE(2862)
					Float _g8 = ::Math_obj::sin(body->rot);		HX_STACK_VAR(_g8,"_g8");
					HX_STACK_LINE(2862)
					body->axisx = _g8;
					HX_STACK_LINE(2862)
					Float _g9 = ::Math_obj::cos(body->rot);		HX_STACK_VAR(_g9,"_g9");
					HX_STACK_LINE(2862)
					body->axisy = _g9;
					HX_STACK_LINE(2862)
					Dynamic();
				}
				else{
					HX_STACK_LINE(2862)
					Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
					HX_STACK_LINE(2862)
					Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
					HX_STACK_LINE(2862)
					Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
					HX_STACK_LINE(2862)
					Float nx = ((((p * body->axisx) + (dr * body->axisy))) * m);		HX_STACK_VAR(nx,"nx");
					HX_STACK_LINE(2862)
					body->axisy = ((((p * body->axisy) - (dr * body->axisx))) * m);
					HX_STACK_LINE(2862)
					body->axisx = nx;
				}
			}
		}
	}
	HX_STACK_LINE(2863)
	Float postx = body->posx;		HX_STACK_VAR(postx,"postx");
	HX_STACK_LINE(2864)
	Float posty = body->posy;		HX_STACK_VAR(posty,"posty");
	HX_STACK_LINE(2865)
	shape->validate_sweepRadius();
	HX_STACK_LINE(2866)
	Float rad = shape->sweepRadius;		HX_STACK_VAR(rad,"rad");
	HX_STACK_LINE(2867)
	::zpp_nape::geom::ZPP_AABB aabb;		HX_STACK_VAR(aabb,"aabb");
	HX_STACK_LINE(2868)
	{
		HX_STACK_LINE(2869)
		if (((::zpp_nape::geom::ZPP_AABB_obj::zpp_pool == null()))){
			HX_STACK_LINE(2870)
			::zpp_nape::geom::ZPP_AABB _g10 = ::zpp_nape::geom::ZPP_AABB_obj::__new();		HX_STACK_VAR(_g10,"_g10");
			HX_STACK_LINE(2870)
			aabb = _g10;
		}
		else{
			HX_STACK_LINE(2876)
			aabb = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
			HX_STACK_LINE(2877)
			::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = aabb->next;
			HX_STACK_LINE(2878)
			aabb->next = null();
		}
		HX_STACK_LINE(2883)
		Dynamic();
	}
	struct _Function_1_1{
		inline static Float Block( Float &postx,Float &prex){
			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2885,0x2b65ed03)
			{
				HX_STACK_LINE(2886)
				Float x = prex;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2887)
				Float y = postx;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2888)
				return (  (((x < y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2885)
	aabb->minx = (_Function_1_1::Block(postx,prex) - rad);
	struct _Function_1_2{
		inline static Float Block( Float &postx,Float &prex){
			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2890,0x2b65ed03)
			{
				HX_STACK_LINE(2891)
				Float x = prex;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2892)
				Float y = postx;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2893)
				return (  (((x > y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2890)
	aabb->maxx = (_Function_1_2::Block(postx,prex) + rad);
	struct _Function_1_3{
		inline static Float Block( Float &prey,Float &posty){
			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2895,0x2b65ed03)
			{
				HX_STACK_LINE(2896)
				Float x = prey;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2897)
				Float y = posty;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2898)
				return (  (((x < y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2895)
	aabb->miny = (_Function_1_3::Block(prey,posty) - rad);
	struct _Function_1_4{
		inline static Float Block( Float &prey,Float &posty){
			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2900,0x2b65ed03)
			{
				HX_STACK_LINE(2901)
				Float x = prey;		HX_STACK_VAR(x,"x");
				HX_STACK_LINE(2902)
				Float y = posty;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(2903)
				return (  (((x > y))) ? Float(x) : Float(y) );
			}
			return null();
		}
	};
	HX_STACK_LINE(2900)
	aabb->maxy = (_Function_1_4::Block(prey,posty) + rad);
	HX_STACK_LINE(2905)
	::nape::shape::ShapeList _g11 = this->bphase->shapesInAABB(aabb,false,false,(  (((filter == null()))) ? ::zpp_nape::dynamics::ZPP_InteractionFilter(null()) : ::zpp_nape::dynamics::ZPP_InteractionFilter(filter->zpp_inner) ),this->convexShapeList);		HX_STACK_VAR(_g11,"_g11");
	HX_STACK_LINE(2905)
	::nape::shape::ShapeList list = this->convexShapeList = _g11;		HX_STACK_VAR(list,"list");
	HX_STACK_LINE(2906)
	{
		HX_STACK_LINE(2907)
		::zpp_nape::geom::ZPP_AABB o = aabb;		HX_STACK_VAR(o,"o");
		HX_STACK_LINE(2916)
		{
			HX_STACK_LINE(2916)
			if (((o->outer != null()))){
				HX_STACK_LINE(2916)
				o->outer->zpp_inner = null();
				HX_STACK_LINE(2916)
				o->outer = null();
			}
			HX_STACK_LINE(2916)
			::nape::geom::Vec2 _g12 = o->wrap_max = null();		HX_STACK_VAR(_g12,"_g12");
			HX_STACK_LINE(2916)
			o->wrap_min = _g12;
			HX_STACK_LINE(2916)
			o->_invalidate = null();
			HX_STACK_LINE(2916)
			o->_validate = null();
		}
		HX_STACK_LINE(2917)
		o->next = ::zpp_nape::geom::ZPP_AABB_obj::zpp_pool;
		HX_STACK_LINE(2918)
		::zpp_nape::geom::ZPP_AABB_obj::zpp_pool = o;
	}
	HX_STACK_LINE(2923)
	::nape::geom::ConvexResultList ret;		HX_STACK_VAR(ret,"ret");
	HX_STACK_LINE(2923)
	if (((output == null()))){
		HX_STACK_LINE(2923)
		ret = ::nape::geom::ConvexResultList_obj::__new();
	}
	else{
		HX_STACK_LINE(2923)
		ret = output;
	}
	HX_STACK_LINE(2924)
	{
		HX_STACK_LINE(2924)
		::nape::shape::ShapeIterator _g;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(2924)
		{
			HX_STACK_LINE(2924)
			list->zpp_inner->valmod();
			HX_STACK_LINE(2924)
			_g = ::nape::shape::ShapeIterator_obj::get(list);
		}
		HX_STACK_LINE(2924)
		while((true)){
			struct _Function_3_1{
				inline static bool Block( ::nape::shape::ShapeIterator &_g){
					HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2924,0x2b65ed03)
					{
						HX_STACK_LINE(2924)
						_g->zpp_inner->zpp_inner->valmod();
						HX_STACK_LINE(2924)
						int length;		HX_STACK_VAR(length,"length");
						HX_STACK_LINE(2924)
						{
							HX_STACK_LINE(2924)
							::nape::shape::ShapeList _this = _g->zpp_inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(2924)
							_this->zpp_inner->valmod();
							HX_STACK_LINE(2924)
							if ((_this->zpp_inner->zip_length)){
								HX_STACK_LINE(2924)
								_this->zpp_inner->zip_length = false;
								HX_STACK_LINE(2924)
								_this->zpp_inner->user_length = _this->zpp_inner->inner->length;
							}
							HX_STACK_LINE(2924)
							length = _this->zpp_inner->user_length;
						}
						HX_STACK_LINE(2924)
						_g->zpp_critical = true;
						struct _Function_4_1{
							inline static bool Block( ::nape::shape::ShapeIterator &_g){
								HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2924,0x2b65ed03)
								{
									HX_STACK_LINE(2924)
									{
										HX_STACK_LINE(2924)
										_g->zpp_next = ::nape::shape::ShapeIterator_obj::zpp_pool;
										HX_STACK_LINE(2924)
										::nape::shape::ShapeIterator_obj::zpp_pool = _g;
										HX_STACK_LINE(2924)
										_g->zpp_inner = null();
									}
									HX_STACK_LINE(2924)
									return false;
								}
								return null();
							}
						};
						HX_STACK_LINE(2924)
						return (  (((_g->zpp_i < length))) ? bool(true) : bool(_Function_4_1::Block(_g)) );
					}
					return null();
				}
			};
			HX_STACK_LINE(2924)
			if ((!(_Function_3_1::Block(_g)))){
				HX_STACK_LINE(2924)
				break;
			}
			HX_STACK_LINE(2924)
			::nape::shape::Shape s;		HX_STACK_VAR(s,"s");
			HX_STACK_LINE(2924)
			{
				HX_STACK_LINE(2924)
				_g->zpp_critical = false;
				HX_STACK_LINE(2924)
				int _g13 = (_g->zpp_i)++;		HX_STACK_VAR(_g13,"_g13");
				HX_STACK_LINE(2924)
				s = _g->zpp_inner->at(_g13);
			}
			HX_STACK_LINE(2925)
			if (((bool((s != shape->outer)) && bool((((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) )) != body->outer))))){
				HX_STACK_LINE(2926)
				toi->s1 = shape;
				HX_STACK_LINE(2927)
				toi->s2 = s->zpp_inner;
				HX_STACK_LINE(2928)
				if ((dynamics)){
					HX_STACK_LINE(2929)
					s->zpp_inner->validate_sweepRadius();
					HX_STACK_LINE(2930)
					((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->sweep_angvel = ((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->angvel;
					HX_STACK_LINE(2931)
					((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner->sweepTime = (int)0;
					HX_STACK_LINE(2932)
					::zpp_nape::geom::ZPP_SweepDistance_obj::dynamicSweep(toi,deltaTime,(int)0,(int)0,true);
					HX_STACK_LINE(2933)
					{
						HX_STACK_LINE(2933)
						::zpp_nape::phys::ZPP_Body _this = ((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2933)
						Float delta = ((int)0 - _this->sweepTime);		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(2933)
						if (((delta != (int)0))){
							HX_STACK_LINE(2933)
							_this->sweepTime = (int)0;
							HX_STACK_LINE(2933)
							{
								HX_STACK_LINE(2933)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(2933)
								hx::AddEq(_this->posx,(_this->velx * t));
								HX_STACK_LINE(2933)
								hx::AddEq(_this->posy,(_this->vely * t));
							}
							HX_STACK_LINE(2933)
							if (((_this->angvel != (int)0))){
								HX_STACK_LINE(2933)
								Float dr = (_this->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(2933)
								hx::AddEq(_this->rot,dr);
								HX_STACK_LINE(2933)
								if ((((dr * dr) > 0.0001))){
									HX_STACK_LINE(2933)
									Float _g14 = ::Math_obj::sin(_this->rot);		HX_STACK_VAR(_g14,"_g14");
									HX_STACK_LINE(2933)
									_this->axisx = _g14;
									HX_STACK_LINE(2933)
									Float _g15 = ::Math_obj::cos(_this->rot);		HX_STACK_VAR(_g15,"_g15");
									HX_STACK_LINE(2933)
									_this->axisy = _g15;
									HX_STACK_LINE(2933)
									Dynamic();
								}
								else{
									HX_STACK_LINE(2933)
									Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(2933)
									Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(2933)
									Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(2933)
									Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(2933)
									_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
									HX_STACK_LINE(2933)
									_this->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(2934)
					{
						HX_STACK_LINE(2934)
						::zpp_nape::phys::ZPP_Body _this = ((  (((s->zpp_inner->body != null()))) ? ::nape::phys::Body(s->zpp_inner->body->outer) : ::nape::phys::Body(null()) ))->zpp_inner;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(2934)
						::zpp_nape::shape::ZPP_Shape s1 = s->zpp_inner;		HX_STACK_VAR(s1,"s1");
						HX_STACK_LINE(2934)
						if (((s1->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
							HX_STACK_LINE(2934)
							s1->worldCOMx = (_this->posx + (((_this->axisy * s1->localCOMx) - (_this->axisx * s1->localCOMy))));
							HX_STACK_LINE(2934)
							s1->worldCOMy = (_this->posy + (((s1->localCOMx * _this->axisx) + (s1->localCOMy * _this->axisy))));
						}
						else{
							HX_STACK_LINE(2934)
							::zpp_nape::shape::ZPP_Polygon p = s1->polygon;		HX_STACK_VAR(p,"p");
							HX_STACK_LINE(2934)
							::zpp_nape::geom::ZPP_Vec2 li = p->lverts->next;		HX_STACK_VAR(li,"li");
							HX_STACK_LINE(2934)
							{
								HX_STACK_LINE(2934)
								::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(2934)
								while((true)){
									HX_STACK_LINE(2934)
									if ((!(((cx_ite != null()))))){
										HX_STACK_LINE(2934)
										break;
									}
									HX_STACK_LINE(2934)
									::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
									HX_STACK_LINE(2934)
									{
										HX_STACK_LINE(2934)
										::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
										HX_STACK_LINE(2934)
										li = li->next;
										HX_STACK_LINE(2934)
										{
											HX_STACK_LINE(2934)
											g->x = (_this->posx + (((_this->axisy * l->x) - (_this->axisx * l->y))));
											HX_STACK_LINE(2934)
											g->y = (_this->posy + (((l->x * _this->axisx) + (l->y * _this->axisy))));
										}
									}
									HX_STACK_LINE(2934)
									cx_ite = cx_ite->next;
								}
							}
							HX_STACK_LINE(2934)
							::zpp_nape::util::ZNPNode_ZPP_Edge ite = p->edges->head;		HX_STACK_VAR(ite,"ite");
							HX_STACK_LINE(2934)
							{
								HX_STACK_LINE(2934)
								::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(2934)
								::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
								HX_STACK_LINE(2934)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(2934)
								while((true)){
									HX_STACK_LINE(2934)
									if ((!(((cx_ite != null()))))){
										HX_STACK_LINE(2934)
										break;
									}
									HX_STACK_LINE(2934)
									::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
									HX_STACK_LINE(2934)
									{
										HX_STACK_LINE(2934)
										::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
										HX_STACK_LINE(2934)
										ite = ite->next;
										HX_STACK_LINE(2934)
										{
											HX_STACK_LINE(2934)
											e->gnormx = ((_this->axisy * e->lnormx) - (_this->axisx * e->lnormy));
											HX_STACK_LINE(2934)
											e->gnormy = ((e->lnormx * _this->axisx) + (e->lnormy * _this->axisy));
										}
										HX_STACK_LINE(2934)
										e->gprojection = (((_this->posx * e->gnormx) + (_this->posy * e->gnormy)) + e->lprojection);
										HX_STACK_LINE(2934)
										e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
										HX_STACK_LINE(2934)
										e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
									}
									HX_STACK_LINE(2934)
									u = v;
									HX_STACK_LINE(2934)
									cx_ite = cx_ite->next;
								}
								HX_STACK_LINE(2934)
								::zpp_nape::geom::ZPP_Vec2 v = p->gverts->next;		HX_STACK_VAR(v,"v");
								HX_STACK_LINE(2934)
								{
									HX_STACK_LINE(2934)
									::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
									HX_STACK_LINE(2934)
									ite = ite->next;
									HX_STACK_LINE(2934)
									{
										HX_STACK_LINE(2934)
										e->gnormx = ((_this->axisy * e->lnormx) - (_this->axisx * e->lnormy));
										HX_STACK_LINE(2934)
										e->gnormy = ((e->lnormx * _this->axisx) + (e->lnormy * _this->axisy));
									}
									HX_STACK_LINE(2934)
									e->gprojection = (((_this->posx * e->gnormx) + (_this->posy * e->gnormy)) + e->lprojection);
									HX_STACK_LINE(2934)
									e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
									HX_STACK_LINE(2934)
									e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
								}
							}
						}
					}
				}
				else{
					HX_STACK_LINE(2937)
					::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,deltaTime,(int)0,(int)0);
				}
				HX_STACK_LINE(2939)
				hx::MultEq(toi->toi,deltaTime);
				HX_STACK_LINE(2940)
				if (((toi->toi > (int)0))){
					HX_STACK_LINE(2941)
					::nape::geom::Vec2 _g21;		HX_STACK_VAR(_g21,"_g21");
					HX_STACK_LINE(2941)
					{
						HX_STACK_LINE(2941)
						Float x = -(toi->axis->x);		HX_STACK_VAR(x,"x");
						HX_STACK_LINE(2941)
						Float y = -(toi->axis->y);		HX_STACK_VAR(y,"y");
						HX_STACK_LINE(2941)
						bool weak = false;		HX_STACK_VAR(weak,"weak");
						HX_STACK_LINE(2941)
						::nape::geom::Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
						HX_STACK_LINE(2941)
						if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
							HX_STACK_LINE(2941)
							::nape::geom::Vec2 _g16 = ::nape::geom::Vec2_obj::__new(null(),null());		HX_STACK_VAR(_g16,"_g16");
							HX_STACK_LINE(2941)
							ret1 = _g16;
						}
						else{
							HX_STACK_LINE(2941)
							ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
							HX_STACK_LINE(2941)
							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
							HX_STACK_LINE(2941)
							ret1->zpp_pool = null();
						}
						HX_STACK_LINE(2941)
						if (((ret1->zpp_inner == null()))){
							HX_STACK_LINE(2941)
							::zpp_nape::geom::ZPP_Vec2 _g18;		HX_STACK_VAR(_g18,"_g18");
							HX_STACK_LINE(2941)
							{
								HX_STACK_LINE(2941)
								bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
								HX_STACK_LINE(2941)
								::zpp_nape::geom::ZPP_Vec2 ret2;		HX_STACK_VAR(ret2,"ret2");
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2 _g17 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();		HX_STACK_VAR(_g17,"_g17");
										HX_STACK_LINE(2941)
										ret2 = _g17;
									}
									else{
										HX_STACK_LINE(2941)
										ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
										HX_STACK_LINE(2941)
										ret2->next = null();
									}
									HX_STACK_LINE(2941)
									ret2->weak = false;
								}
								HX_STACK_LINE(2941)
								ret2->_immutable = immutable;
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									ret2->x = x;
									HX_STACK_LINE(2941)
									ret2->y = y;
									HX_STACK_LINE(2941)
									{
									}
								}
								HX_STACK_LINE(2941)
								_g18 = ret2;
							}
							HX_STACK_LINE(2941)
							ret1->zpp_inner = _g18;
							HX_STACK_LINE(2941)
							ret1->zpp_inner->outer = ret1;
						}
						else{
							HX_STACK_LINE(2941)
							Float _g19;		HX_STACK_VAR(_g19,"_g19");
							HX_STACK_LINE(2941)
							{
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(2941)
									if (((_this->_validate != null()))){
										HX_STACK_LINE(2941)
										_this->_validate();
									}
								}
								HX_STACK_LINE(2941)
								_g19 = ret1->zpp_inner->x;
							}
							struct _Function_7_1{
								inline static bool Block( ::nape::geom::Vec2 &ret1,Float &y){
									HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2941,0x2b65ed03)
									{
										HX_STACK_LINE(2941)
										Float _g20;		HX_STACK_VAR(_g20,"_g20");
										HX_STACK_LINE(2941)
										{
											HX_STACK_LINE(2941)
											{
												HX_STACK_LINE(2941)
												::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(2941)
												if (((_this->_validate != null()))){
													HX_STACK_LINE(2941)
													_this->_validate();
												}
											}
											HX_STACK_LINE(2941)
											_g20 = ret1->zpp_inner->y;
										}
										HX_STACK_LINE(2941)
										return (_g20 == y);
									}
									return null();
								}
							};
							HX_STACK_LINE(2941)
							if ((!(((  (((_g19 == x))) ? bool(_Function_7_1::Block(ret1,y)) : bool(false) ))))){
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									ret1->zpp_inner->x = x;
									HX_STACK_LINE(2941)
									ret1->zpp_inner->y = y;
									HX_STACK_LINE(2941)
									{
									}
								}
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(2941)
									if (((_this->_invalidate != null()))){
										HX_STACK_LINE(2941)
										_this->_invalidate(_this);
									}
								}
							}
							HX_STACK_LINE(2941)
							ret1;
						}
						HX_STACK_LINE(2941)
						ret1->zpp_inner->weak = weak;
						HX_STACK_LINE(2941)
						_g21 = ret1;
					}
					HX_STACK_LINE(2941)
					::nape::geom::Vec2 _g27;		HX_STACK_VAR(_g27,"_g27");
					HX_STACK_LINE(2941)
					{
						HX_STACK_LINE(2941)
						Float x = toi->c2->x;		HX_STACK_VAR(x,"x");
						HX_STACK_LINE(2941)
						Float y = toi->c2->y;		HX_STACK_VAR(y,"y");
						HX_STACK_LINE(2941)
						bool weak = false;		HX_STACK_VAR(weak,"weak");
						HX_STACK_LINE(2941)
						::nape::geom::Vec2 ret1;		HX_STACK_VAR(ret1,"ret1");
						HX_STACK_LINE(2941)
						if (((::zpp_nape::util::ZPP_PubPool_obj::poolVec2 == null()))){
							HX_STACK_LINE(2941)
							::nape::geom::Vec2 _g22 = ::nape::geom::Vec2_obj::__new(null(),null());		HX_STACK_VAR(_g22,"_g22");
							HX_STACK_LINE(2941)
							ret1 = _g22;
						}
						else{
							HX_STACK_LINE(2941)
							ret1 = ::zpp_nape::util::ZPP_PubPool_obj::poolVec2;
							HX_STACK_LINE(2941)
							::zpp_nape::util::ZPP_PubPool_obj::poolVec2 = ret1->zpp_pool;
							HX_STACK_LINE(2941)
							ret1->zpp_pool = null();
						}
						HX_STACK_LINE(2941)
						if (((ret1->zpp_inner == null()))){
							HX_STACK_LINE(2941)
							::zpp_nape::geom::ZPP_Vec2 _g24;		HX_STACK_VAR(_g24,"_g24");
							HX_STACK_LINE(2941)
							{
								HX_STACK_LINE(2941)
								bool immutable = false;		HX_STACK_VAR(immutable,"immutable");
								HX_STACK_LINE(2941)
								::zpp_nape::geom::ZPP_Vec2 ret2;		HX_STACK_VAR(ret2,"ret2");
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									if (((::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool == null()))){
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2 _g23 = ::zpp_nape::geom::ZPP_Vec2_obj::__new();		HX_STACK_VAR(_g23,"_g23");
										HX_STACK_LINE(2941)
										ret2 = _g23;
									}
									else{
										HX_STACK_LINE(2941)
										ret2 = ::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool;
										HX_STACK_LINE(2941)
										::zpp_nape::geom::ZPP_Vec2_obj::zpp_pool = ret2->next;
										HX_STACK_LINE(2941)
										ret2->next = null();
									}
									HX_STACK_LINE(2941)
									ret2->weak = false;
								}
								HX_STACK_LINE(2941)
								ret2->_immutable = immutable;
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									ret2->x = x;
									HX_STACK_LINE(2941)
									ret2->y = y;
									HX_STACK_LINE(2941)
									{
									}
								}
								HX_STACK_LINE(2941)
								_g24 = ret2;
							}
							HX_STACK_LINE(2941)
							ret1->zpp_inner = _g24;
							HX_STACK_LINE(2941)
							ret1->zpp_inner->outer = ret1;
						}
						else{
							HX_STACK_LINE(2941)
							Float _g25;		HX_STACK_VAR(_g25,"_g25");
							HX_STACK_LINE(2941)
							{
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(2941)
									if (((_this->_validate != null()))){
										HX_STACK_LINE(2941)
										_this->_validate();
									}
								}
								HX_STACK_LINE(2941)
								_g25 = ret1->zpp_inner->x;
							}
							struct _Function_7_1{
								inline static bool Block( ::nape::geom::Vec2 &ret1,Float &y){
									HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",2941,0x2b65ed03)
									{
										HX_STACK_LINE(2941)
										Float _g26;		HX_STACK_VAR(_g26,"_g26");
										HX_STACK_LINE(2941)
										{
											HX_STACK_LINE(2941)
											{
												HX_STACK_LINE(2941)
												::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(2941)
												if (((_this->_validate != null()))){
													HX_STACK_LINE(2941)
													_this->_validate();
												}
											}
											HX_STACK_LINE(2941)
											_g26 = ret1->zpp_inner->y;
										}
										HX_STACK_LINE(2941)
										return (_g26 == y);
									}
									return null();
								}
							};
							HX_STACK_LINE(2941)
							if ((!(((  (((_g25 == x))) ? bool(_Function_7_1::Block(ret1,y)) : bool(false) ))))){
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									ret1->zpp_inner->x = x;
									HX_STACK_LINE(2941)
									ret1->zpp_inner->y = y;
									HX_STACK_LINE(2941)
									{
									}
								}
								HX_STACK_LINE(2941)
								{
									HX_STACK_LINE(2941)
									::zpp_nape::geom::ZPP_Vec2 _this = ret1->zpp_inner;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(2941)
									if (((_this->_invalidate != null()))){
										HX_STACK_LINE(2941)
										_this->_invalidate(_this);
									}
								}
							}
							HX_STACK_LINE(2941)
							ret1;
						}
						HX_STACK_LINE(2941)
						ret1->zpp_inner->weak = weak;
						HX_STACK_LINE(2941)
						_g27 = ret1;
					}
					HX_STACK_LINE(2941)
					::nape::geom::ConvexResult res = ::zpp_nape::geom::ZPP_ConvexRayResult_obj::getConvex(_g21,_g27,toi->toi,s);		HX_STACK_VAR(res,"res");
					HX_STACK_LINE(2942)
					{
						HX_STACK_LINE(2943)
						::zpp_nape::util::ZNPNode_ConvexResult pre = null();		HX_STACK_VAR(pre,"pre");
						HX_STACK_LINE(2944)
						{
							HX_STACK_LINE(2945)
							::zpp_nape::util::ZNPNode_ConvexResult cx_ite = ret->zpp_inner->inner->head;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(2946)
							while((true)){
								HX_STACK_LINE(2946)
								if ((!(((cx_ite != null()))))){
									HX_STACK_LINE(2946)
									break;
								}
								HX_STACK_LINE(2947)
								::nape::geom::ConvexResult j = cx_ite->elt;		HX_STACK_VAR(j,"j");
								HX_STACK_LINE(2948)
								{
									HX_STACK_LINE(2949)
									if (((res->zpp_inner->toiDistance < j->zpp_inner->toiDistance))){
										HX_STACK_LINE(2949)
										break;
									}
									HX_STACK_LINE(2950)
									pre = cx_ite;
								}
								HX_STACK_LINE(2952)
								cx_ite = cx_ite->next;
							}
						}
						HX_STACK_LINE(2955)
						{
							HX_STACK_LINE(2955)
							::zpp_nape::util::ZNPList_ConvexResult _this = ret->zpp_inner->inner;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(2955)
							::zpp_nape::util::ZNPNode_ConvexResult temp;		HX_STACK_VAR(temp,"temp");
							HX_STACK_LINE(2955)
							{
								HX_STACK_LINE(2955)
								::zpp_nape::util::ZNPNode_ConvexResult ret1;		HX_STACK_VAR(ret1,"ret1");
								HX_STACK_LINE(2955)
								{
									HX_STACK_LINE(2955)
									if (((::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool == null()))){
										HX_STACK_LINE(2955)
										::zpp_nape::util::ZNPNode_ConvexResult _g28 = ::zpp_nape::util::ZNPNode_ConvexResult_obj::__new();		HX_STACK_VAR(_g28,"_g28");
										HX_STACK_LINE(2955)
										ret1 = _g28;
									}
									else{
										HX_STACK_LINE(2955)
										ret1 = ::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool;
										HX_STACK_LINE(2955)
										::zpp_nape::util::ZNPNode_ConvexResult_obj::zpp_pool = ret1->next;
										HX_STACK_LINE(2955)
										ret1->next = null();
									}
									HX_STACK_LINE(2955)
									Dynamic();
								}
								HX_STACK_LINE(2955)
								ret1->elt = res;
								HX_STACK_LINE(2955)
								temp = ret1;
							}
							HX_STACK_LINE(2955)
							if (((pre == null()))){
								HX_STACK_LINE(2955)
								temp->next = _this->head;
								HX_STACK_LINE(2955)
								_this->head = temp;
							}
							else{
								HX_STACK_LINE(2955)
								temp->next = pre->next;
								HX_STACK_LINE(2955)
								pre->next = temp;
							}
							HX_STACK_LINE(2955)
							bool _g29 = _this->modified = true;		HX_STACK_VAR(_g29,"_g29");
							HX_STACK_LINE(2955)
							_this->pushmod = _g29;
							HX_STACK_LINE(2955)
							(_this->length)++;
							HX_STACK_LINE(2955)
							temp;
						}
					}
				}
			}
		}
	}
	HX_STACK_LINE(2960)
	list->clear();
	HX_STACK_LINE(2961)
	{
		HX_STACK_LINE(2962)
		::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
		HX_STACK_LINE(2972)
		o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
		HX_STACK_LINE(2973)
		::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
	}
	HX_STACK_LINE(2978)
	{
		HX_STACK_LINE(2978)
		Float delta = ((int)0 - body->sweepTime);		HX_STACK_VAR(delta,"delta");
		HX_STACK_LINE(2978)
		if (((delta != (int)0))){
			HX_STACK_LINE(2978)
			body->sweepTime = (int)0;
			HX_STACK_LINE(2978)
			{
				HX_STACK_LINE(2978)
				Float t = delta;		HX_STACK_VAR(t,"t");
				HX_STACK_LINE(2978)
				hx::AddEq(body->posx,(body->velx * t));
				HX_STACK_LINE(2978)
				hx::AddEq(body->posy,(body->vely * t));
			}
			HX_STACK_LINE(2978)
			if (((body->angvel != (int)0))){
				HX_STACK_LINE(2978)
				Float dr = (body->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
				HX_STACK_LINE(2978)
				hx::AddEq(body->rot,dr);
				HX_STACK_LINE(2978)
				if ((((dr * dr) > 0.0001))){
					HX_STACK_LINE(2978)
					Float _g30 = ::Math_obj::sin(body->rot);		HX_STACK_VAR(_g30,"_g30");
					HX_STACK_LINE(2978)
					body->axisx = _g30;
					HX_STACK_LINE(2978)
					Float _g31 = ::Math_obj::cos(body->rot);		HX_STACK_VAR(_g31,"_g31");
					HX_STACK_LINE(2978)
					body->axisy = _g31;
					HX_STACK_LINE(2978)
					Dynamic();
				}
				else{
					HX_STACK_LINE(2978)
					Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
					HX_STACK_LINE(2978)
					Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
					HX_STACK_LINE(2978)
					Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
					HX_STACK_LINE(2978)
					Float nx = ((((p * body->axisx) + (dr * body->axisy))) * m);		HX_STACK_VAR(nx,"nx");
					HX_STACK_LINE(2978)
					body->axisy = ((((p * body->axisy) - (dr * body->axisx))) * m);
					HX_STACK_LINE(2978)
					body->axisx = nx;
				}
			}
		}
	}
	HX_STACK_LINE(2979)
	if (((shape->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
		HX_STACK_LINE(2979)
		shape->worldCOMx = (body->posx + (((body->axisy * shape->localCOMx) - (body->axisx * shape->localCOMy))));
		HX_STACK_LINE(2979)
		shape->worldCOMy = (body->posy + (((shape->localCOMx * body->axisx) + (shape->localCOMy * body->axisy))));
	}
	else{
		HX_STACK_LINE(2979)
		::zpp_nape::shape::ZPP_Polygon p = shape->polygon;		HX_STACK_VAR(p,"p");
		HX_STACK_LINE(2979)
		::zpp_nape::geom::ZPP_Vec2 li = p->lverts->next;		HX_STACK_VAR(li,"li");
		HX_STACK_LINE(2979)
		{
			HX_STACK_LINE(2979)
			::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2979)
			while((true)){
				HX_STACK_LINE(2979)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2979)
					break;
				}
				HX_STACK_LINE(2979)
				::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
				HX_STACK_LINE(2979)
				{
					HX_STACK_LINE(2979)
					::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
					HX_STACK_LINE(2979)
					li = li->next;
					HX_STACK_LINE(2979)
					{
						HX_STACK_LINE(2979)
						g->x = (body->posx + (((body->axisy * l->x) - (body->axisx * l->y))));
						HX_STACK_LINE(2979)
						g->y = (body->posy + (((l->x * body->axisx) + (l->y * body->axisy))));
					}
				}
				HX_STACK_LINE(2979)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(2979)
		::zpp_nape::util::ZNPNode_ZPP_Edge ite = p->edges->head;		HX_STACK_VAR(ite,"ite");
		HX_STACK_LINE(2979)
		{
			HX_STACK_LINE(2979)
			::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(2979)
			::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
			HX_STACK_LINE(2979)
			cx_ite = cx_ite->next;
			HX_STACK_LINE(2979)
			while((true)){
				HX_STACK_LINE(2979)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(2979)
					break;
				}
				HX_STACK_LINE(2979)
				::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
				HX_STACK_LINE(2979)
				{
					HX_STACK_LINE(2979)
					::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
					HX_STACK_LINE(2979)
					ite = ite->next;
					HX_STACK_LINE(2979)
					{
						HX_STACK_LINE(2979)
						e->gnormx = ((body->axisy * e->lnormx) - (body->axisx * e->lnormy));
						HX_STACK_LINE(2979)
						e->gnormy = ((e->lnormx * body->axisx) + (e->lnormy * body->axisy));
					}
					HX_STACK_LINE(2979)
					e->gprojection = (((body->posx * e->gnormx) + (body->posy * e->gnormy)) + e->lprojection);
					HX_STACK_LINE(2979)
					e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
					HX_STACK_LINE(2979)
					e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
				}
				HX_STACK_LINE(2979)
				u = v;
				HX_STACK_LINE(2979)
				cx_ite = cx_ite->next;
			}
			HX_STACK_LINE(2979)
			::zpp_nape::geom::ZPP_Vec2 v = p->gverts->next;		HX_STACK_VAR(v,"v");
			HX_STACK_LINE(2979)
			{
				HX_STACK_LINE(2979)
				::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
				HX_STACK_LINE(2979)
				ite = ite->next;
				HX_STACK_LINE(2979)
				{
					HX_STACK_LINE(2979)
					e->gnormx = ((body->axisy * e->lnormx) - (body->axisx * e->lnormy));
					HX_STACK_LINE(2979)
					e->gnormy = ((e->lnormx * body->axisx) + (e->lnormy * body->axisy));
				}
				HX_STACK_LINE(2979)
				e->gprojection = (((body->posx * e->gnormx) + (body->posy * e->gnormy)) + e->lprojection);
				HX_STACK_LINE(2979)
				e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
				HX_STACK_LINE(2979)
				e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
			}
		}
	}
	HX_STACK_LINE(2980)
	return ret;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,convexMultiCast,return )

::zpp_nape::callbacks::ZPP_Callback ZPP_Space_obj::push_callback( ::zpp_nape::callbacks::ZPP_Listener i){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","push_callback",0x00285ed4,"zpp_nape.space.ZPP_Space.push_callback","zpp_nape/space/Space.hx",2982,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(i,"i")
	HX_STACK_LINE(2991)
	::zpp_nape::callbacks::ZPP_Callback cb;		HX_STACK_VAR(cb,"cb");
	HX_STACK_LINE(2992)
	{
		HX_STACK_LINE(2993)
		if (((::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool == null()))){
			HX_STACK_LINE(2994)
			::zpp_nape::callbacks::ZPP_Callback _g = ::zpp_nape::callbacks::ZPP_Callback_obj::__new();		HX_STACK_VAR(_g,"_g");
			HX_STACK_LINE(2994)
			cb = _g;
		}
		else{
			HX_STACK_LINE(3000)
			cb = ::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool;
			HX_STACK_LINE(3001)
			::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool = cb->next;
			HX_STACK_LINE(3002)
			cb->next = null();
		}
		HX_STACK_LINE(3007)
		Dynamic();
	}
	HX_STACK_LINE(3009)
	this->callbacks->push(cb);
	HX_STACK_LINE(3010)
	cb->listener = i;
	HX_STACK_LINE(3011)
	return cb;
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,push_callback,return )

Void ZPP_Space_obj::step( Float deltaTime,int velocityIterations,int positionIterations){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","step",0xa1df7dc2,"zpp_nape.space.ZPP_Space.step","zpp_nape/space/Space.hx",3014,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(deltaTime,"deltaTime")
		HX_STACK_ARG(velocityIterations,"velocityIterations")
		HX_STACK_ARG(positionIterations,"positionIterations")
		HX_STACK_LINE(3014)
		::zpp_nape::space::ZPP_Space _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(3018)
		hx::AddEq(this->time,deltaTime);
		HX_STACK_LINE(3019)
		this->pre_dt = deltaTime;
		HX_STACK_LINE(3020)
		this->midstep = true;
		HX_STACK_LINE(3021)
		(this->stamp)++;
		HX_STACK_LINE(3024)
		this->validation();
		HX_STACK_LINE(3029)
		this->bphase->broadphase(hx::ObjectPtr<OBJ_>(this),true);
		HX_STACK_LINE(3039)
		this->prestep(deltaTime);
		HX_STACK_LINE(3044)
		if ((this->sortcontacts)){
			HX_STACK_LINE(3046)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter xxlist = this->c_arbiters_false;		HX_STACK_VAR(xxlist,"xxlist");
			HX_STACK_LINE(3047)
			if (((bool(!(((xxlist->head == null())))) && bool((xxlist->head->next != null()))))){
				HX_STACK_LINE(3048)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter head = xxlist->head;		HX_STACK_VAR(head,"head");
				HX_STACK_LINE(3049)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter tail = null();		HX_STACK_VAR(tail,"tail");
				HX_STACK_LINE(3050)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter left = null();		HX_STACK_VAR(left,"left");
				HX_STACK_LINE(3051)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter right = null();		HX_STACK_VAR(right,"right");
				HX_STACK_LINE(3052)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter nxt = null();		HX_STACK_VAR(nxt,"nxt");
				HX_STACK_LINE(3053)
				int listSize = (int)1;		HX_STACK_VAR(listSize,"listSize");
				HX_STACK_LINE(3054)
				int numMerges;		HX_STACK_VAR(numMerges,"numMerges");
				HX_STACK_LINE(3054)
				int leftSize;		HX_STACK_VAR(leftSize,"leftSize");
				HX_STACK_LINE(3054)
				int rightSize;		HX_STACK_VAR(rightSize,"rightSize");
				HX_STACK_LINE(3055)
				while((true)){
					HX_STACK_LINE(3056)
					numMerges = (int)0;
					HX_STACK_LINE(3057)
					left = head;
					HX_STACK_LINE(3058)
					::zpp_nape::util::ZNPNode_ZPP_ColArbiter _g1 = head = null();		HX_STACK_VAR(_g1,"_g1");
					HX_STACK_LINE(3058)
					tail = _g1;
					HX_STACK_LINE(3059)
					while((true)){
						HX_STACK_LINE(3059)
						if ((!(((left != null()))))){
							HX_STACK_LINE(3059)
							break;
						}
						HX_STACK_LINE(3060)
						(numMerges)++;
						HX_STACK_LINE(3061)
						right = left;
						HX_STACK_LINE(3062)
						leftSize = (int)0;
						HX_STACK_LINE(3063)
						rightSize = listSize;
						HX_STACK_LINE(3064)
						while((true)){
							HX_STACK_LINE(3064)
							if ((!(((bool((right != null())) && bool((leftSize < listSize))))))){
								HX_STACK_LINE(3064)
								break;
							}
							HX_STACK_LINE(3065)
							(leftSize)++;
							HX_STACK_LINE(3066)
							right = right->next;
						}
						HX_STACK_LINE(3068)
						while((true)){
							HX_STACK_LINE(3068)
							if ((!(((bool((leftSize > (int)0)) || bool((bool((rightSize > (int)0)) && bool((right != null()))))))))){
								HX_STACK_LINE(3068)
								break;
							}
							HX_STACK_LINE(3069)
							if (((leftSize == (int)0))){
								HX_STACK_LINE(3070)
								nxt = right;
								HX_STACK_LINE(3071)
								right = right->next;
								HX_STACK_LINE(3072)
								(rightSize)--;
							}
							else{
								HX_STACK_LINE(3074)
								if (((bool((rightSize == (int)0)) || bool((right == null()))))){
									HX_STACK_LINE(3075)
									nxt = left;
									HX_STACK_LINE(3076)
									left = left->next;
									HX_STACK_LINE(3077)
									(leftSize)--;
								}
								else{
									HX_STACK_LINE(3079)
									if (((  (((bool(left->elt->active) && bool(right->elt->active)))) ? bool((left->elt->oc1->dist < right->elt->oc1->dist)) : bool(true) ))){
										HX_STACK_LINE(3082)
										nxt = left;
										HX_STACK_LINE(3083)
										left = left->next;
										HX_STACK_LINE(3084)
										(leftSize)--;
									}
									else{
										HX_STACK_LINE(3087)
										nxt = right;
										HX_STACK_LINE(3088)
										right = right->next;
										HX_STACK_LINE(3089)
										(rightSize)--;
									}
								}
							}
							HX_STACK_LINE(3091)
							if (((tail != null()))){
								HX_STACK_LINE(3091)
								tail->next = nxt;
							}
							else{
								HX_STACK_LINE(3092)
								head = nxt;
							}
							HX_STACK_LINE(3093)
							tail = nxt;
						}
						HX_STACK_LINE(3095)
						left = right;
					}
					HX_STACK_LINE(3097)
					tail->next = null();
					HX_STACK_LINE(3098)
					hx::ShlEq(listSize,(int)1);
					HX_STACK_LINE(3055)
					if ((!(((numMerges > (int)1))))){
						HX_STACK_LINE(3055)
						break;
					}
				}
				HX_STACK_LINE(3101)
				{
					HX_STACK_LINE(3101)
					xxlist->head = head;
					HX_STACK_LINE(3101)
					xxlist->modified = true;
					HX_STACK_LINE(3101)
					xxlist->pushmod = true;
				}
			}
		}
		HX_STACK_LINE(3107)
		this->updateVel(deltaTime);
		HX_STACK_LINE(3108)
		this->warmStart();
		HX_STACK_LINE(3111)
		this->iterateVel(velocityIterations);
		HX_STACK_LINE(3115)
		{
			HX_STACK_LINE(3116)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->kinematics->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3117)
			while((true)){
				HX_STACK_LINE(3117)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3117)
					break;
				}
				HX_STACK_LINE(3118)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3119)
				{
					HX_STACK_LINE(3120)
					{
						HX_STACK_LINE(3121)
						cur->pre_posx = cur->posx;
						HX_STACK_LINE(3122)
						cur->pre_posy = cur->posy;
						HX_STACK_LINE(3131)
						{
						}
					}
					HX_STACK_LINE(3140)
					cur->pre_rot = cur->rot;
				}
				HX_STACK_LINE(3142)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3147)
		{
			HX_STACK_LINE(3148)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3149)
			while((true)){
				HX_STACK_LINE(3149)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3149)
					break;
				}
				HX_STACK_LINE(3150)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3151)
				{
					HX_STACK_LINE(3152)
					{
						HX_STACK_LINE(3153)
						cur->pre_posx = cur->posx;
						HX_STACK_LINE(3154)
						cur->pre_posy = cur->posy;
						HX_STACK_LINE(3163)
						{
						}
					}
					HX_STACK_LINE(3172)
					cur->pre_rot = cur->rot;
				}
				HX_STACK_LINE(3174)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3178)
		this->updatePos(deltaTime);
		HX_STACK_LINE(3179)
		this->continuous = true;
		HX_STACK_LINE(3180)
		this->continuousCollisions(deltaTime);
		HX_STACK_LINE(3181)
		this->continuous = false;
		HX_STACK_LINE(3184)
		this->iteratePos(positionIterations);
		HX_STACK_LINE(3188)
		{
			HX_STACK_LINE(3189)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->kinematics->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3190)
			while((true)){
				HX_STACK_LINE(3190)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3190)
					break;
				}
				HX_STACK_LINE(3191)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3192)
				{
					HX_STACK_LINE(3193)
					bool upos = !(((bool((cur->posx == cur->pre_posx)) && bool((cur->posy == cur->pre_posy)))));		HX_STACK_VAR(upos,"upos");
					HX_STACK_LINE(3194)
					bool urot = (cur->pre_rot != cur->rot);		HX_STACK_VAR(urot,"urot");
					HX_STACK_LINE(3195)
					if ((upos)){
						HX_STACK_LINE(3195)
						{
							HX_STACK_LINE(3195)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3195)
							while((true)){
								HX_STACK_LINE(3195)
								if ((!(((cx_ite1 != null()))))){
									HX_STACK_LINE(3195)
									break;
								}
								HX_STACK_LINE(3195)
								::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
								HX_STACK_LINE(3195)
								{
									HX_STACK_LINE(3195)
									if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
										HX_STACK_LINE(3195)
										s->polygon->invalidate_gverts();
										HX_STACK_LINE(3195)
										s->polygon->invalidate_gaxi();
									}
									HX_STACK_LINE(3195)
									s->invalidate_worldCOM();
								}
								HX_STACK_LINE(3195)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(3195)
						cur->zip_worldCOM = true;
					}
					HX_STACK_LINE(3196)
					if ((urot)){
						HX_STACK_LINE(3196)
						cur->zip_axis = true;
						HX_STACK_LINE(3196)
						{
							HX_STACK_LINE(3196)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3196)
							while((true)){
								HX_STACK_LINE(3196)
								if ((!(((cx_ite1 != null()))))){
									HX_STACK_LINE(3196)
									break;
								}
								HX_STACK_LINE(3196)
								::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
								HX_STACK_LINE(3196)
								{
									HX_STACK_LINE(3196)
									if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
										HX_STACK_LINE(3196)
										s->polygon->invalidate_gverts();
										HX_STACK_LINE(3196)
										s->polygon->invalidate_gaxi();
									}
									HX_STACK_LINE(3196)
									s->invalidate_worldCOM();
								}
								HX_STACK_LINE(3196)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(3196)
						cur->zip_worldCOM = true;
					}
				}
				HX_STACK_LINE(3198)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3203)
		{
			HX_STACK_LINE(3204)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3205)
			while((true)){
				HX_STACK_LINE(3205)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3205)
					break;
				}
				HX_STACK_LINE(3206)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3207)
				{
					HX_STACK_LINE(3208)
					bool upos = !(((bool((cur->posx == cur->pre_posx)) && bool((cur->posy == cur->pre_posy)))));		HX_STACK_VAR(upos,"upos");
					HX_STACK_LINE(3209)
					bool urot = (cur->pre_rot != cur->rot);		HX_STACK_VAR(urot,"urot");
					HX_STACK_LINE(3210)
					if ((upos)){
						HX_STACK_LINE(3210)
						{
							HX_STACK_LINE(3210)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3210)
							while((true)){
								HX_STACK_LINE(3210)
								if ((!(((cx_ite1 != null()))))){
									HX_STACK_LINE(3210)
									break;
								}
								HX_STACK_LINE(3210)
								::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
								HX_STACK_LINE(3210)
								{
									HX_STACK_LINE(3210)
									if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
										HX_STACK_LINE(3210)
										s->polygon->invalidate_gverts();
										HX_STACK_LINE(3210)
										s->polygon->invalidate_gaxi();
									}
									HX_STACK_LINE(3210)
									s->invalidate_worldCOM();
								}
								HX_STACK_LINE(3210)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(3210)
						cur->zip_worldCOM = true;
					}
					HX_STACK_LINE(3211)
					if ((urot)){
						HX_STACK_LINE(3211)
						cur->zip_axis = true;
						HX_STACK_LINE(3211)
						{
							HX_STACK_LINE(3211)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3211)
							while((true)){
								HX_STACK_LINE(3211)
								if ((!(((cx_ite1 != null()))))){
									HX_STACK_LINE(3211)
									break;
								}
								HX_STACK_LINE(3211)
								::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
								HX_STACK_LINE(3211)
								{
									HX_STACK_LINE(3211)
									if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
										HX_STACK_LINE(3211)
										s->polygon->invalidate_gverts();
										HX_STACK_LINE(3211)
										s->polygon->invalidate_gaxi();
									}
									HX_STACK_LINE(3211)
									s->invalidate_worldCOM();
								}
								HX_STACK_LINE(3211)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(3211)
						cur->zip_worldCOM = true;
					}
				}
				HX_STACK_LINE(3213)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3217)
		::zpp_nape::util::ZNPNode_ZPP_Body pre = null();		HX_STACK_VAR(pre,"pre");
		HX_STACK_LINE(3218)
		{
			HX_STACK_LINE(3219)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->staticsleep->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3220)
			while((true)){
				HX_STACK_LINE(3220)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3220)
					break;
				}
				HX_STACK_LINE(3221)
				::zpp_nape::phys::ZPP_Body b = cx_ite->elt;		HX_STACK_VAR(b,"b");
				HX_STACK_LINE(3222)
				{
					HX_STACK_LINE(3231)
					if (((bool(!(((b->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC)))) || bool((bool((bool((b->velx == (int)0)) && bool((b->vely == (int)0)))) && bool((b->angvel == (int)0))))))){
						HX_STACK_LINE(3232)
						if ((b->kinematicDelaySleep)){
							HX_STACK_LINE(3233)
							b->kinematicDelaySleep = false;
							HX_STACK_LINE(3234)
							{
								HX_STACK_LINE(3235)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(3236)
								continue;
							}
						}
						HX_STACK_LINE(3239)
						b->component->sleeping = true;
						HX_STACK_LINE(3240)
						::zpp_nape::util::ZNPNode_ZPP_Body _g1;		HX_STACK_VAR(_g1,"_g1");
						HX_STACK_LINE(3240)
						{
							HX_STACK_LINE(3240)
							::zpp_nape::util::ZNPList_ZPP_Body _this = this->staticsleep;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3240)
							::zpp_nape::util::ZNPNode_ZPP_Body old;		HX_STACK_VAR(old,"old");
							HX_STACK_LINE(3240)
							::zpp_nape::util::ZNPNode_ZPP_Body ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(3240)
							if (((pre == null()))){
								HX_STACK_LINE(3240)
								old = _this->head;
								HX_STACK_LINE(3240)
								ret = old->next;
								HX_STACK_LINE(3240)
								_this->head = ret;
								HX_STACK_LINE(3240)
								if (((_this->head == null()))){
									HX_STACK_LINE(3240)
									_this->pushmod = true;
								}
							}
							else{
								HX_STACK_LINE(3240)
								old = pre->next;
								HX_STACK_LINE(3240)
								ret = old->next;
								HX_STACK_LINE(3240)
								pre->next = ret;
								HX_STACK_LINE(3240)
								if (((ret == null()))){
									HX_STACK_LINE(3240)
									_this->pushmod = true;
								}
							}
							HX_STACK_LINE(3240)
							{
								HX_STACK_LINE(3240)
								::zpp_nape::util::ZNPNode_ZPP_Body o = old;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(3240)
								o->elt = null();
								HX_STACK_LINE(3240)
								o->next = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
								HX_STACK_LINE(3240)
								::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = o;
							}
							HX_STACK_LINE(3240)
							_this->modified = true;
							HX_STACK_LINE(3240)
							(_this->length)--;
							HX_STACK_LINE(3240)
							_this->pushmod = true;
							HX_STACK_LINE(3240)
							_g1 = ret;
						}
						HX_STACK_LINE(3240)
						cx_ite = _g1;
						HX_STACK_LINE(3241)
						continue;
					}
					HX_STACK_LINE(3243)
					pre = cx_ite;
				}
				HX_STACK_LINE(3245)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3250)
		this->doForests(deltaTime);
		HX_STACK_LINE(3251)
		this->sleepArbiters();
		HX_STACK_LINE(3254)
		this->midstep = false;
		HX_STACK_LINE(3255)
		::zpp_nape::space::ZPP_CallbackSet pre1 = null();		HX_STACK_VAR(pre1,"pre1");
		HX_STACK_LINE(3256)
		{
			HX_STACK_LINE(3257)
			::zpp_nape::space::ZPP_CallbackSet cx_ite = this->callbackset_list->next;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3258)
			while((true)){
				HX_STACK_LINE(3258)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3258)
					break;
				}
				HX_STACK_LINE(3259)
				::zpp_nape::space::ZPP_CallbackSet set = cx_ite;		HX_STACK_VAR(set,"set");
				HX_STACK_LINE(3260)
				{
					HX_STACK_LINE(3261)
					if (((set->arbiters->head == null()))){
						HX_STACK_LINE(3262)
						::zpp_nape::space::ZPP_CallbackSet _g2;		HX_STACK_VAR(_g2,"_g2");
						HX_STACK_LINE(3262)
						{
							HX_STACK_LINE(3262)
							::zpp_nape::space::ZPP_CallbackSet _this = this->callbackset_list;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3262)
							::zpp_nape::space::ZPP_CallbackSet old;		HX_STACK_VAR(old,"old");
							HX_STACK_LINE(3262)
							::zpp_nape::space::ZPP_CallbackSet ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(3262)
							if (((pre1 == null()))){
								HX_STACK_LINE(3262)
								old = _this->next;
								HX_STACK_LINE(3262)
								ret = old->next;
								HX_STACK_LINE(3262)
								_this->next = ret;
								HX_STACK_LINE(3262)
								if (((_this->next == null()))){
									HX_STACK_LINE(3262)
									_this->pushmod = true;
								}
							}
							else{
								HX_STACK_LINE(3262)
								old = pre1->next;
								HX_STACK_LINE(3262)
								ret = old->next;
								HX_STACK_LINE(3262)
								pre1->next = ret;
								HX_STACK_LINE(3262)
								if (((ret == null()))){
									HX_STACK_LINE(3262)
									_this->pushmod = true;
								}
							}
							HX_STACK_LINE(3262)
							old->_inuse = false;
							HX_STACK_LINE(3262)
							_this->modified = true;
							HX_STACK_LINE(3262)
							(_this->length)--;
							HX_STACK_LINE(3262)
							_this->pushmod = true;
							HX_STACK_LINE(3262)
							_g2 = ret;
						}
						HX_STACK_LINE(3262)
						cx_ite = _g2;
						HX_STACK_LINE(3263)
						::String inf = ((set->int1->id + HX_CSTRING(" ")) + set->int2->id);		HX_STACK_VAR(inf,"inf");
						HX_STACK_LINE(3288)
						{
							HX_STACK_LINE(3289)
							::zpp_nape::space::ZPP_CallbackSet o = set;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(3298)
							{
								HX_STACK_LINE(3298)
								::zpp_nape::phys::ZPP_Interactor _g3 = o->int2 = null();		HX_STACK_VAR(_g3,"_g3");
								HX_STACK_LINE(3298)
								o->int1 = _g3;
								HX_STACK_LINE(3298)
								int _g4 = o->di = (int)-1;		HX_STACK_VAR(_g4,"_g4");
								HX_STACK_LINE(3298)
								o->id = _g4;
								HX_STACK_LINE(3298)
								o->freed = true;
								HX_STACK_LINE(3298)
								Dynamic();
							}
							HX_STACK_LINE(3299)
							o->next = ::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool;
							HX_STACK_LINE(3300)
							::zpp_nape::space::ZPP_CallbackSet_obj::zpp_pool = o;
						}
						HX_STACK_LINE(3305)
						continue;
					}
					HX_STACK_LINE(3307)
					bool sleeping;		HX_STACK_VAR(sleeping,"sleeping");
					HX_STACK_LINE(3307)
					{
						HX_STACK_LINE(3307)
						bool ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(3307)
						{
							HX_STACK_LINE(3307)
							ret = true;
							HX_STACK_LINE(3307)
							{
								HX_STACK_LINE(3307)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite1 = set->arbiters->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(3307)
								while((true)){
									HX_STACK_LINE(3307)
									if ((!(((cx_ite1 != null()))))){
										HX_STACK_LINE(3307)
										break;
									}
									HX_STACK_LINE(3307)
									::zpp_nape::dynamics::ZPP_Arbiter x = cx_ite1->elt;		HX_STACK_VAR(x,"x");
									HX_STACK_LINE(3307)
									if ((x->sleeping)){
										HX_STACK_LINE(3307)
										cx_ite1 = cx_ite1->next;
										HX_STACK_LINE(3307)
										continue;
									}
									else{
										HX_STACK_LINE(3307)
										ret = false;
										HX_STACK_LINE(3307)
										break;
									}
									HX_STACK_LINE(3307)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
						HX_STACK_LINE(3307)
						sleeping = ret;
					}
					HX_STACK_LINE(3308)
					{
						HX_STACK_LINE(3308)
						::zpp_nape::callbacks::ZPP_CbSet a = set->int1->cbSet;		HX_STACK_VAR(a,"a");
						HX_STACK_LINE(3308)
						::zpp_nape::callbacks::ZPP_CbSet b = set->int2->cbSet;		HX_STACK_VAR(b,"b");
						HX_STACK_LINE(3308)
						int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_ONGOING;		HX_STACK_VAR(event,"event");
						HX_STACK_LINE(3308)
						{
							HX_STACK_LINE(3308)
							::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3308)
							{
								HX_STACK_LINE(3308)
								::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(3308)
								::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
								HX_STACK_LINE(3308)
								if (((a->cbpairs->length < b->cbpairs->length))){
									HX_STACK_LINE(3308)
									pairs = a->cbpairs;
								}
								else{
									HX_STACK_LINE(3308)
									pairs = b->cbpairs;
								}
								HX_STACK_LINE(3308)
								{
									HX_STACK_LINE(3308)
									::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite1 = pairs->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
									HX_STACK_LINE(3308)
									while((true)){
										HX_STACK_LINE(3308)
										if ((!(((cx_ite1 != null()))))){
											HX_STACK_LINE(3308)
											break;
										}
										HX_STACK_LINE(3308)
										::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite1->elt;		HX_STACK_VAR(p,"p");
										HX_STACK_LINE(3308)
										if (((bool((bool((p->a == a)) && bool((p->b == b)))) || bool((bool((p->a == b)) && bool((p->b == a))))))){
											HX_STACK_LINE(3308)
											ret = p;
											HX_STACK_LINE(3308)
											break;
										}
										HX_STACK_LINE(3308)
										cx_ite1 = cx_ite1->next;
									}
								}
								HX_STACK_LINE(3308)
								if (((ret == null()))){
									HX_STACK_LINE(3308)
									::zpp_nape::callbacks::ZPP_CbSetPair _g6;		HX_STACK_VAR(_g6,"_g6");
									HX_STACK_LINE(3308)
									{
										HX_STACK_LINE(3308)
										::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(3308)
										{
											HX_STACK_LINE(3308)
											if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
												HX_STACK_LINE(3308)
												::zpp_nape::callbacks::ZPP_CbSetPair _g5 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g5,"_g5");
												HX_STACK_LINE(3308)
												ret1 = _g5;
											}
											else{
												HX_STACK_LINE(3308)
												ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
												HX_STACK_LINE(3308)
												::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(3308)
												ret1->next = null();
											}
											HX_STACK_LINE(3308)
											ret1->zip_listeners = true;
										}
										HX_STACK_LINE(3308)
										if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(a,b))){
											HX_STACK_LINE(3308)
											ret1->a = a;
											HX_STACK_LINE(3308)
											ret1->b = b;
										}
										else{
											HX_STACK_LINE(3308)
											ret1->a = b;
											HX_STACK_LINE(3308)
											ret1->b = a;
										}
										HX_STACK_LINE(3308)
										_g6 = ret1;
									}
									HX_STACK_LINE(3308)
									ret = _g6;
									HX_STACK_LINE(3308)
									a->cbpairs->add(ret);
									HX_STACK_LINE(3308)
									if (((b != a))){
										HX_STACK_LINE(3308)
										b->cbpairs->add(ret);
									}
								}
								HX_STACK_LINE(3308)
								if ((ret->zip_listeners)){
									HX_STACK_LINE(3308)
									ret->zip_listeners = false;
									HX_STACK_LINE(3308)
									ret->__validate();
								}
								HX_STACK_LINE(3308)
								_this = ret;
							}
							HX_STACK_LINE(3308)
							{
								HX_STACK_LINE(3308)
								::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite1 = _this->listeners->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(3308)
								while((true)){
									HX_STACK_LINE(3308)
									if ((!(((cx_ite1 != null()))))){
										HX_STACK_LINE(3308)
										break;
									}
									HX_STACK_LINE(3308)
									::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite1->elt;		HX_STACK_VAR(x,"x");
									HX_STACK_LINE(3308)
									if (((x->event == event))){
										HX_STACK_LINE(3309)
										if (((  (((bool(!(sleeping)) || bool(x->allowSleepingCallbacks)))) ? bool(!(set->empty_arb(x->itype))) : bool(false) ))){
											HX_STACK_LINE(3310)
											::zpp_nape::callbacks::ZPP_Callback cb = _g->push_callback(x);		HX_STACK_VAR(cb,"cb");
											HX_STACK_LINE(3311)
											cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_ONGOING;
											HX_STACK_LINE(3312)
											{
												HX_STACK_LINE(3312)
												::zpp_nape::phys::ZPP_Interactor o1 = set->int1;		HX_STACK_VAR(o1,"o1");
												HX_STACK_LINE(3312)
												::zpp_nape::phys::ZPP_Interactor o2 = set->int2;		HX_STACK_VAR(o2,"o2");
												struct _Function_11_1{
													inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o1){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",3312,0x2b65ed03)
														{
															HX_STACK_LINE(3312)
															::zpp_nape::callbacks::ZPP_OptionType _this1 = x->options1;		HX_STACK_VAR(_this1,"_this1");
															HX_STACK_LINE(3312)
															::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
															HX_STACK_LINE(3312)
															return (  ((_this1->nonemptyintersection(xs,_this1->includes))) ? bool(!(_this1->nonemptyintersection(xs,_this1->excludes))) : bool(false) );
														}
														return null();
													}
												};
												struct _Function_11_2{
													inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o2){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",3312,0x2b65ed03)
														{
															HX_STACK_LINE(3312)
															::zpp_nape::callbacks::ZPP_OptionType _this1 = x->options2;		HX_STACK_VAR(_this1,"_this1");
															HX_STACK_LINE(3312)
															::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
															HX_STACK_LINE(3312)
															return (  ((_this1->nonemptyintersection(xs,_this1->includes))) ? bool(!(_this1->nonemptyintersection(xs,_this1->excludes))) : bool(false) );
														}
														return null();
													}
												};
												HX_STACK_LINE(3312)
												if (((  ((_Function_11_1::Block(x,o1))) ? bool(_Function_11_2::Block(x,o2)) : bool(false) ))){
													HX_STACK_LINE(3312)
													cb->int1 = o1;
													HX_STACK_LINE(3312)
													cb->int2 = o2;
												}
												else{
													HX_STACK_LINE(3312)
													cb->int1 = o2;
													HX_STACK_LINE(3312)
													cb->int2 = o1;
												}
											}
											HX_STACK_LINE(3313)
											cb->set = set;
										}
									}
									HX_STACK_LINE(3308)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
					}
					HX_STACK_LINE(3316)
					pre1 = cx_ite;
				}
				HX_STACK_LINE(3318)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3321)
		while((true)){
			HX_STACK_LINE(3321)
			if ((!((!(this->callbacks->empty()))))){
				HX_STACK_LINE(3321)
				break;
			}
			HX_STACK_LINE(3322)
			::zpp_nape::callbacks::ZPP_Callback cb = this->callbacks->pop();		HX_STACK_VAR(cb,"cb");
			HX_STACK_LINE(3323)
			if (((cb->listener->type == ::zpp_nape::util::ZPP_Flags_obj::id_ListenerType_BODY))){
				HX_STACK_LINE(3324)
				::zpp_nape::callbacks::ZPP_BodyListener o = cb->listener->body;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(3325)
				::nape::callbacks::BodyCallback _g7 = cb->wrapper_body();		HX_STACK_VAR(_g7,"_g7");
				HX_STACK_LINE(3325)
				o->handler(_g7);
			}
			else{
				HX_STACK_LINE(3327)
				if (((cb->listener->type == ::zpp_nape::util::ZPP_Flags_obj::id_ListenerType_CONSTRAINT))){
					HX_STACK_LINE(3328)
					::zpp_nape::callbacks::ZPP_ConstraintListener o = cb->listener->constraint;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(3329)
					::nape::callbacks::ConstraintCallback _g8 = cb->wrapper_con();		HX_STACK_VAR(_g8,"_g8");
					HX_STACK_LINE(3329)
					o->handler(_g8);
				}
				else{
					HX_STACK_LINE(3331)
					if (((cb->listener->type == ::zpp_nape::util::ZPP_Flags_obj::id_ListenerType_INTERACTION))){
						HX_STACK_LINE(3332)
						::zpp_nape::callbacks::ZPP_InteractionListener o = cb->listener->interaction;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(3333)
						::nape::callbacks::InteractionCallback _g9 = cb->wrapper_int();		HX_STACK_VAR(_g9,"_g9");
						HX_STACK_LINE(3333)
						o->handleri(_g9);
					}
				}
			}
			HX_STACK_LINE(3335)
			{
				HX_STACK_LINE(3336)
				::zpp_nape::callbacks::ZPP_Callback o = cb;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(3345)
				{
					HX_STACK_LINE(3345)
					::zpp_nape::phys::ZPP_Interactor _g10 = o->int2 = null();		HX_STACK_VAR(_g10,"_g10");
					HX_STACK_LINE(3345)
					o->int1 = _g10;
					HX_STACK_LINE(3345)
					o->body = null();
					HX_STACK_LINE(3345)
					o->constraint = null();
					HX_STACK_LINE(3345)
					o->listener = null();
					HX_STACK_LINE(3345)
					if (((o->wrap_arbiters != null()))){
						HX_STACK_LINE(3345)
						o->wrap_arbiters->zpp_inner->inner = null();
					}
					HX_STACK_LINE(3345)
					o->set = null();
				}
				HX_STACK_LINE(3346)
				o->next = ::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool;
				HX_STACK_LINE(3347)
				::zpp_nape::callbacks::ZPP_Callback_obj::zpp_pool = o;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Space_obj,step,(void))

Void ZPP_Space_obj::continuousCollisions( Float deltaTime){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","continuousCollisions",0xd9b3b026,"zpp_nape.space.ZPP_Space.continuousCollisions","zpp_nape/space/Space.hx",3355,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(deltaTime,"deltaTime")
		HX_STACK_LINE(3356)
		Float MAX_VEL = (Float(((int)2 * ::Math_obj::PI)) / Float(deltaTime));		HX_STACK_VAR(MAX_VEL,"MAX_VEL");
		HX_STACK_LINE(3357)
		this->bphase->broadphase(hx::ObjectPtr<OBJ_>(this),false);
		HX_STACK_LINE(3358)
		Float curTimeAlpha = 0.0;		HX_STACK_VAR(curTimeAlpha,"curTimeAlpha");
		HX_STACK_LINE(3359)
		while((true)){
			HX_STACK_LINE(3359)
			if ((!(((bool((curTimeAlpha < (int)1)) && bool(!(((this->toiEvents->head == null()))))))))){
				HX_STACK_LINE(3359)
				break;
			}
			HX_STACK_LINE(3360)
			::zpp_nape::geom::ZPP_ToiEvent minTOI = null();		HX_STACK_VAR(minTOI,"minTOI");
			HX_STACK_LINE(3361)
			Float minTime = 2.0;		HX_STACK_VAR(minTime,"minTime");
			HX_STACK_LINE(3362)
			bool minKinematic = false;		HX_STACK_VAR(minKinematic,"minKinematic");
			HX_STACK_LINE(3363)
			::zpp_nape::util::ZNPNode_ZPP_ToiEvent preMin = null();		HX_STACK_VAR(preMin,"preMin");
			HX_STACK_LINE(3364)
			::zpp_nape::util::ZNPNode_ZPP_ToiEvent pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(3365)
			{
				HX_STACK_LINE(3366)
				::zpp_nape::util::ZNPNode_ZPP_ToiEvent cx_ite = this->toiEvents->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3367)
				while((true)){
					HX_STACK_LINE(3367)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(3367)
						break;
					}
					HX_STACK_LINE(3368)
					::zpp_nape::geom::ZPP_ToiEvent toi = cx_ite->elt;		HX_STACK_VAR(toi,"toi");
					HX_STACK_LINE(3369)
					{
						HX_STACK_LINE(3370)
						::zpp_nape::phys::ZPP_Body b1 = toi->s1->body;		HX_STACK_VAR(b1,"b1");
						HX_STACK_LINE(3371)
						::zpp_nape::phys::ZPP_Body b2 = toi->s2->body;		HX_STACK_VAR(b2,"b2");
						HX_STACK_LINE(3372)
						if (((bool(b1->sweepFrozen) && bool(b2->sweepFrozen)))){
							HX_STACK_LINE(3373)
							if (((  (((toi->toi != (int)0))) ? bool(::zpp_nape::geom::ZPP_Collide_obj::testCollide_safe(toi->s1,toi->s2)) : bool(false) ))){
								HX_STACK_LINE(3374)
								toi->toi = (int)0;
							}
							else{
								HX_STACK_LINE(3377)
								::zpp_nape::util::ZNPNode_ZPP_ToiEvent _g = this->toiEvents->erase(pre);		HX_STACK_VAR(_g,"_g");
								HX_STACK_LINE(3377)
								cx_ite = _g;
								HX_STACK_LINE(3378)
								{
									HX_STACK_LINE(3379)
									::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(3389)
									o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
									HX_STACK_LINE(3390)
									::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
								}
								HX_STACK_LINE(3395)
								continue;
							}
						}
						HX_STACK_LINE(3398)
						if (((bool((toi->frozen1 != b1->sweepFrozen)) || bool((toi->frozen2 != b2->sweepFrozen))))){
							HX_STACK_LINE(3399)
							if ((!(toi->kinematic))){
								HX_STACK_LINE(3400)
								toi->frozen1 = b1->sweepFrozen;
								HX_STACK_LINE(3401)
								toi->frozen2 = b2->sweepFrozen;
								HX_STACK_LINE(3402)
								if ((toi->frozen1)){
									HX_STACK_LINE(3403)
									::zpp_nape::shape::ZPP_Shape tmp = toi->s1;		HX_STACK_VAR(tmp,"tmp");
									HX_STACK_LINE(3404)
									toi->s1 = toi->s2;
									HX_STACK_LINE(3405)
									toi->s2 = tmp;
									HX_STACK_LINE(3406)
									toi->frozen1 = false;
									HX_STACK_LINE(3407)
									toi->frozen2 = true;
								}
								HX_STACK_LINE(3409)
								::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,deltaTime,(int)0,::nape::Config_obj::collisionSlopCCD);
								HX_STACK_LINE(3410)
								if (((toi->toi < (int)0))){
									HX_STACK_LINE(3411)
									::zpp_nape::util::ZNPNode_ZPP_ToiEvent _g1 = this->toiEvents->erase(pre);		HX_STACK_VAR(_g1,"_g1");
									HX_STACK_LINE(3411)
									cx_ite = _g1;
									HX_STACK_LINE(3412)
									{
										HX_STACK_LINE(3413)
										::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(3423)
										o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
										HX_STACK_LINE(3424)
										::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
									}
									HX_STACK_LINE(3429)
									continue;
								}
							}
							else{
								HX_STACK_LINE(3433)
								::zpp_nape::util::ZNPNode_ZPP_ToiEvent _g2 = this->toiEvents->erase(pre);		HX_STACK_VAR(_g2,"_g2");
								HX_STACK_LINE(3433)
								cx_ite = _g2;
								HX_STACK_LINE(3434)
								{
									HX_STACK_LINE(3435)
									::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(3445)
									o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
									HX_STACK_LINE(3446)
									::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
								}
								HX_STACK_LINE(3451)
								continue;
							}
						}
						HX_STACK_LINE(3454)
						if (((bool((toi->toi >= (int)0)) && bool(((bool((toi->toi < minTime)) || bool((bool(!(minKinematic)) && bool(toi->kinematic))))))))){
							HX_STACK_LINE(3455)
							minTOI = toi;
							HX_STACK_LINE(3456)
							minTime = toi->toi;
							HX_STACK_LINE(3457)
							minKinematic = toi->kinematic;
							HX_STACK_LINE(3458)
							preMin = pre;
						}
						HX_STACK_LINE(3460)
						pre = cx_ite;
					}
					HX_STACK_LINE(3462)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(3465)
			if (((minTOI == null()))){
				HX_STACK_LINE(3466)
				break;
			}
			HX_STACK_LINE(3468)
			this->toiEvents->erase(preMin);
			HX_STACK_LINE(3469)
			curTimeAlpha = minTOI->toi;
			HX_STACK_LINE(3470)
			::zpp_nape::phys::ZPP_Body b1 = minTOI->s1->body;		HX_STACK_VAR(b1,"b1");
			HX_STACK_LINE(3471)
			::zpp_nape::phys::ZPP_Body b2 = minTOI->s2->body;		HX_STACK_VAR(b2,"b2");
			HX_STACK_LINE(3472)
			if ((!(b1->sweepFrozen))){
				HX_STACK_LINE(3473)
				{
					HX_STACK_LINE(3473)
					Float dt = (curTimeAlpha * deltaTime);		HX_STACK_VAR(dt,"dt");
					HX_STACK_LINE(3473)
					Float delta = (dt - b1->sweepTime);		HX_STACK_VAR(delta,"delta");
					HX_STACK_LINE(3473)
					if (((delta != (int)0))){
						HX_STACK_LINE(3473)
						b1->sweepTime = dt;
						HX_STACK_LINE(3473)
						{
							HX_STACK_LINE(3473)
							Float t = delta;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(3473)
							hx::AddEq(b1->posx,(b1->velx * t));
							HX_STACK_LINE(3473)
							hx::AddEq(b1->posy,(b1->vely * t));
						}
						HX_STACK_LINE(3473)
						if (((b1->angvel != (int)0))){
							HX_STACK_LINE(3473)
							Float dr = (b1->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
							HX_STACK_LINE(3473)
							hx::AddEq(b1->rot,dr);
							HX_STACK_LINE(3473)
							if ((((dr * dr) > 0.0001))){
								HX_STACK_LINE(3473)
								Float _g3 = ::Math_obj::sin(b1->rot);		HX_STACK_VAR(_g3,"_g3");
								HX_STACK_LINE(3473)
								b1->axisx = _g3;
								HX_STACK_LINE(3473)
								Float _g4 = ::Math_obj::cos(b1->rot);		HX_STACK_VAR(_g4,"_g4");
								HX_STACK_LINE(3473)
								b1->axisy = _g4;
								HX_STACK_LINE(3473)
								Dynamic();
							}
							else{
								HX_STACK_LINE(3473)
								Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
								HX_STACK_LINE(3473)
								Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
								HX_STACK_LINE(3473)
								Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
								HX_STACK_LINE(3473)
								Float nx = ((((p * b1->axisx) + (dr * b1->axisy))) * m);		HX_STACK_VAR(nx,"nx");
								HX_STACK_LINE(3473)
								b1->axisy = ((((p * b1->axisy) - (dr * b1->axisx))) * m);
								HX_STACK_LINE(3473)
								b1->axisx = nx;
							}
						}
					}
				}
				HX_STACK_LINE(3474)
				{
					HX_STACK_LINE(3474)
					::zpp_nape::shape::ZPP_Shape s = minTOI->s1;		HX_STACK_VAR(s,"s");
					HX_STACK_LINE(3474)
					if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
						HX_STACK_LINE(3474)
						s->worldCOMx = (b1->posx + (((b1->axisy * s->localCOMx) - (b1->axisx * s->localCOMy))));
						HX_STACK_LINE(3474)
						s->worldCOMy = (b1->posy + (((s->localCOMx * b1->axisx) + (s->localCOMy * b1->axisy))));
					}
					else{
						HX_STACK_LINE(3474)
						::zpp_nape::shape::ZPP_Polygon p = s->polygon;		HX_STACK_VAR(p,"p");
						HX_STACK_LINE(3474)
						::zpp_nape::geom::ZPP_Vec2 li = p->lverts->next;		HX_STACK_VAR(li,"li");
						HX_STACK_LINE(3474)
						{
							HX_STACK_LINE(3474)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3474)
							while((true)){
								HX_STACK_LINE(3474)
								if ((!(((cx_ite != null()))))){
									HX_STACK_LINE(3474)
									break;
								}
								HX_STACK_LINE(3474)
								::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
								HX_STACK_LINE(3474)
								{
									HX_STACK_LINE(3474)
									::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
									HX_STACK_LINE(3474)
									li = li->next;
									HX_STACK_LINE(3474)
									{
										HX_STACK_LINE(3474)
										g->x = (b1->posx + (((b1->axisy * l->x) - (b1->axisx * l->y))));
										HX_STACK_LINE(3474)
										g->y = (b1->posy + (((l->x * b1->axisx) + (l->y * b1->axisy))));
									}
								}
								HX_STACK_LINE(3474)
								cx_ite = cx_ite->next;
							}
						}
						HX_STACK_LINE(3474)
						::zpp_nape::util::ZNPNode_ZPP_Edge ite = p->edges->head;		HX_STACK_VAR(ite,"ite");
						HX_STACK_LINE(3474)
						{
							HX_STACK_LINE(3474)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3474)
							::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
							HX_STACK_LINE(3474)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3474)
							while((true)){
								HX_STACK_LINE(3474)
								if ((!(((cx_ite != null()))))){
									HX_STACK_LINE(3474)
									break;
								}
								HX_STACK_LINE(3474)
								::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
								HX_STACK_LINE(3474)
								{
									HX_STACK_LINE(3474)
									::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
									HX_STACK_LINE(3474)
									ite = ite->next;
									HX_STACK_LINE(3474)
									{
										HX_STACK_LINE(3474)
										e->gnormx = ((b1->axisy * e->lnormx) - (b1->axisx * e->lnormy));
										HX_STACK_LINE(3474)
										e->gnormy = ((e->lnormx * b1->axisx) + (e->lnormy * b1->axisy));
									}
									HX_STACK_LINE(3474)
									e->gprojection = (((b1->posx * e->gnormx) + (b1->posy * e->gnormy)) + e->lprojection);
									HX_STACK_LINE(3474)
									e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
									HX_STACK_LINE(3474)
									e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
								}
								HX_STACK_LINE(3474)
								u = v;
								HX_STACK_LINE(3474)
								cx_ite = cx_ite->next;
							}
							HX_STACK_LINE(3474)
							::zpp_nape::geom::ZPP_Vec2 v = p->gverts->next;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(3474)
							{
								HX_STACK_LINE(3474)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(3474)
								ite = ite->next;
								HX_STACK_LINE(3474)
								{
									HX_STACK_LINE(3474)
									e->gnormx = ((b1->axisy * e->lnormx) - (b1->axisx * e->lnormy));
									HX_STACK_LINE(3474)
									e->gnormy = ((e->lnormx * b1->axisx) + (e->lnormy * b1->axisy));
								}
								HX_STACK_LINE(3474)
								e->gprojection = (((b1->posx * e->gnormx) + (b1->posy * e->gnormy)) + e->lprojection);
								HX_STACK_LINE(3474)
								e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
								HX_STACK_LINE(3474)
								e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
							}
						}
					}
				}
			}
			HX_STACK_LINE(3476)
			if ((!(b2->sweepFrozen))){
				HX_STACK_LINE(3477)
				{
					HX_STACK_LINE(3477)
					Float dt = (curTimeAlpha * deltaTime);		HX_STACK_VAR(dt,"dt");
					HX_STACK_LINE(3477)
					Float delta = (dt - b2->sweepTime);		HX_STACK_VAR(delta,"delta");
					HX_STACK_LINE(3477)
					if (((delta != (int)0))){
						HX_STACK_LINE(3477)
						b2->sweepTime = dt;
						HX_STACK_LINE(3477)
						{
							HX_STACK_LINE(3477)
							Float t = delta;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(3477)
							hx::AddEq(b2->posx,(b2->velx * t));
							HX_STACK_LINE(3477)
							hx::AddEq(b2->posy,(b2->vely * t));
						}
						HX_STACK_LINE(3477)
						if (((b2->angvel != (int)0))){
							HX_STACK_LINE(3477)
							Float dr = (b2->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
							HX_STACK_LINE(3477)
							hx::AddEq(b2->rot,dr);
							HX_STACK_LINE(3477)
							if ((((dr * dr) > 0.0001))){
								HX_STACK_LINE(3477)
								Float _g5 = ::Math_obj::sin(b2->rot);		HX_STACK_VAR(_g5,"_g5");
								HX_STACK_LINE(3477)
								b2->axisx = _g5;
								HX_STACK_LINE(3477)
								Float _g6 = ::Math_obj::cos(b2->rot);		HX_STACK_VAR(_g6,"_g6");
								HX_STACK_LINE(3477)
								b2->axisy = _g6;
								HX_STACK_LINE(3477)
								Dynamic();
							}
							else{
								HX_STACK_LINE(3477)
								Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
								HX_STACK_LINE(3477)
								Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
								HX_STACK_LINE(3477)
								Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
								HX_STACK_LINE(3477)
								Float nx = ((((p * b2->axisx) + (dr * b2->axisy))) * m);		HX_STACK_VAR(nx,"nx");
								HX_STACK_LINE(3477)
								b2->axisy = ((((p * b2->axisy) - (dr * b2->axisx))) * m);
								HX_STACK_LINE(3477)
								b2->axisx = nx;
							}
						}
					}
				}
				HX_STACK_LINE(3478)
				{
					HX_STACK_LINE(3478)
					::zpp_nape::shape::ZPP_Shape s = minTOI->s2;		HX_STACK_VAR(s,"s");
					HX_STACK_LINE(3478)
					if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
						HX_STACK_LINE(3478)
						s->worldCOMx = (b2->posx + (((b2->axisy * s->localCOMx) - (b2->axisx * s->localCOMy))));
						HX_STACK_LINE(3478)
						s->worldCOMy = (b2->posy + (((s->localCOMx * b2->axisx) + (s->localCOMy * b2->axisy))));
					}
					else{
						HX_STACK_LINE(3478)
						::zpp_nape::shape::ZPP_Polygon p = s->polygon;		HX_STACK_VAR(p,"p");
						HX_STACK_LINE(3478)
						::zpp_nape::geom::ZPP_Vec2 li = p->lverts->next;		HX_STACK_VAR(li,"li");
						HX_STACK_LINE(3478)
						{
							HX_STACK_LINE(3478)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3478)
							while((true)){
								HX_STACK_LINE(3478)
								if ((!(((cx_ite != null()))))){
									HX_STACK_LINE(3478)
									break;
								}
								HX_STACK_LINE(3478)
								::zpp_nape::geom::ZPP_Vec2 g = cx_ite;		HX_STACK_VAR(g,"g");
								HX_STACK_LINE(3478)
								{
									HX_STACK_LINE(3478)
									::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
									HX_STACK_LINE(3478)
									li = li->next;
									HX_STACK_LINE(3478)
									{
										HX_STACK_LINE(3478)
										g->x = (b2->posx + (((b2->axisy * l->x) - (b2->axisx * l->y))));
										HX_STACK_LINE(3478)
										g->y = (b2->posy + (((l->x * b2->axisx) + (l->y * b2->axisy))));
									}
								}
								HX_STACK_LINE(3478)
								cx_ite = cx_ite->next;
							}
						}
						HX_STACK_LINE(3478)
						::zpp_nape::util::ZNPNode_ZPP_Edge ite = p->edges->head;		HX_STACK_VAR(ite,"ite");
						HX_STACK_LINE(3478)
						{
							HX_STACK_LINE(3478)
							::zpp_nape::geom::ZPP_Vec2 cx_ite = p->gverts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3478)
							::zpp_nape::geom::ZPP_Vec2 u = cx_ite;		HX_STACK_VAR(u,"u");
							HX_STACK_LINE(3478)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3478)
							while((true)){
								HX_STACK_LINE(3478)
								if ((!(((cx_ite != null()))))){
									HX_STACK_LINE(3478)
									break;
								}
								HX_STACK_LINE(3478)
								::zpp_nape::geom::ZPP_Vec2 v = cx_ite;		HX_STACK_VAR(v,"v");
								HX_STACK_LINE(3478)
								{
									HX_STACK_LINE(3478)
									::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
									HX_STACK_LINE(3478)
									ite = ite->next;
									HX_STACK_LINE(3478)
									{
										HX_STACK_LINE(3478)
										e->gnormx = ((b2->axisy * e->lnormx) - (b2->axisx * e->lnormy));
										HX_STACK_LINE(3478)
										e->gnormy = ((e->lnormx * b2->axisx) + (e->lnormy * b2->axisy));
									}
									HX_STACK_LINE(3478)
									e->gprojection = (((b2->posx * e->gnormx) + (b2->posy * e->gnormy)) + e->lprojection);
									HX_STACK_LINE(3478)
									e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
									HX_STACK_LINE(3478)
									e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
								}
								HX_STACK_LINE(3478)
								u = v;
								HX_STACK_LINE(3478)
								cx_ite = cx_ite->next;
							}
							HX_STACK_LINE(3478)
							::zpp_nape::geom::ZPP_Vec2 v = p->gverts->next;		HX_STACK_VAR(v,"v");
							HX_STACK_LINE(3478)
							{
								HX_STACK_LINE(3478)
								::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
								HX_STACK_LINE(3478)
								ite = ite->next;
								HX_STACK_LINE(3478)
								{
									HX_STACK_LINE(3478)
									e->gnormx = ((b2->axisy * e->lnormx) - (b2->axisx * e->lnormy));
									HX_STACK_LINE(3478)
									e->gnormy = ((e->lnormx * b2->axisx) + (e->lnormy * b2->axisy));
								}
								HX_STACK_LINE(3478)
								e->gprojection = (((b2->posx * e->gnormx) + (b2->posy * e->gnormy)) + e->lprojection);
								HX_STACK_LINE(3478)
								e->tp0 = ((u->y * e->gnormx) - (u->x * e->gnormy));
								HX_STACK_LINE(3478)
								e->tp1 = ((v->y * e->gnormx) - (v->x * e->gnormy));
							}
						}
					}
				}
			}
			HX_STACK_LINE(3480)
			bool wasnull = (minTOI->arbiter == null());		HX_STACK_VAR(wasnull,"wasnull");
			HX_STACK_LINE(3481)
			::zpp_nape::dynamics::ZPP_Arbiter arb = this->narrowPhase(minTOI->s1,minTOI->s2,true,minTOI->arbiter,true);		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(3482)
			if (((arb == null()))){
				HX_STACK_LINE(3483)
				if (((bool((minTOI->arbiter != null())) && bool((minTOI->arbiter->pair != null()))))){
					HX_STACK_LINE(3484)
					minTOI->arbiter->pair->arb = null();
					HX_STACK_LINE(3485)
					minTOI->arbiter->pair = null();
				}
			}
			else{
				HX_STACK_LINE(3489)
				if ((!(this->presteparb(arb,deltaTime,true)))){
					HX_STACK_LINE(3490)
					if (((bool((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL)) && bool(((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0)))))))){
						HX_STACK_LINE(3491)
						{
							HX_STACK_LINE(3491)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3491)
							{
								HX_STACK_LINE(3491)
								Float jx = ((_this->nx * _this->c1->jnAcc) - (_this->ny * _this->c1->jtAcc));		HX_STACK_VAR(jx,"jx");
								HX_STACK_LINE(3491)
								Float jy = ((_this->ny * _this->c1->jnAcc) + (_this->nx * _this->c1->jtAcc));		HX_STACK_VAR(jy,"jy");
								HX_STACK_LINE(3491)
								{
									HX_STACK_LINE(3491)
									Float t = _this->b1->imass;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(3491)
									hx::SubEq(_this->b1->velx,(jx * t));
									HX_STACK_LINE(3491)
									hx::SubEq(_this->b1->vely,(jy * t));
								}
								HX_STACK_LINE(3491)
								hx::SubEq(_this->b1->angvel,(_this->b1->iinertia * (((jy * _this->c1->r1x) - (jx * _this->c1->r1y)))));
								HX_STACK_LINE(3491)
								{
									HX_STACK_LINE(3491)
									Float t = _this->b2->imass;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(3491)
									hx::AddEq(_this->b2->velx,(jx * t));
									HX_STACK_LINE(3491)
									hx::AddEq(_this->b2->vely,(jy * t));
								}
								HX_STACK_LINE(3491)
								hx::AddEq(_this->b2->angvel,(_this->b2->iinertia * (((jy * _this->c1->r2x) - (jx * _this->c1->r2y)))));
							}
							HX_STACK_LINE(3491)
							if ((_this->hc2)){
								HX_STACK_LINE(3491)
								Float jx = ((_this->nx * _this->c2->jnAcc) - (_this->ny * _this->c2->jtAcc));		HX_STACK_VAR(jx,"jx");
								HX_STACK_LINE(3491)
								Float jy = ((_this->ny * _this->c2->jnAcc) + (_this->nx * _this->c2->jtAcc));		HX_STACK_VAR(jy,"jy");
								HX_STACK_LINE(3491)
								{
									HX_STACK_LINE(3491)
									Float t = _this->b1->imass;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(3491)
									hx::SubEq(_this->b1->velx,(jx * t));
									HX_STACK_LINE(3491)
									hx::SubEq(_this->b1->vely,(jy * t));
								}
								HX_STACK_LINE(3491)
								hx::SubEq(_this->b1->angvel,(_this->b1->iinertia * (((jy * _this->c2->r1x) - (jx * _this->c2->r1y)))));
								HX_STACK_LINE(3491)
								{
									HX_STACK_LINE(3491)
									Float t = _this->b2->imass;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(3491)
									hx::AddEq(_this->b2->velx,(jx * t));
									HX_STACK_LINE(3491)
									hx::AddEq(_this->b2->vely,(jy * t));
								}
								HX_STACK_LINE(3491)
								hx::AddEq(_this->b2->angvel,(_this->b2->iinertia * (((jy * _this->c2->r2x) - (jx * _this->c2->r2y)))));
							}
							HX_STACK_LINE(3491)
							hx::AddEq(_this->b2->angvel,(_this->jrAcc * _this->b2->iinertia));
							HX_STACK_LINE(3491)
							hx::SubEq(_this->b1->angvel,(_this->jrAcc * _this->b1->iinertia));
						}
						HX_STACK_LINE(3492)
						{
							HX_STACK_LINE(3492)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3492)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(3492)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(3492)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(3492)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(3492)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(3492)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(3492)
							Float v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(3492)
							Float v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(3492)
							j = (((((v1y * _this->nx) - (v1x * _this->ny)) + _this->surfacex)) * _this->c1->tMass);
							HX_STACK_LINE(3492)
							jMax = (_this->c1->friction * _this->c1->jnAcc);
							HX_STACK_LINE(3492)
							jOld = _this->c1->jtAcc;
							HX_STACK_LINE(3492)
							cjAcc = (jOld - j);
							HX_STACK_LINE(3492)
							if (((cjAcc > jMax))){
								HX_STACK_LINE(3492)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(3492)
								if (((cjAcc < -(jMax)))){
									HX_STACK_LINE(3492)
									cjAcc = -(jMax);
								}
							}
							HX_STACK_LINE(3492)
							j = (cjAcc - jOld);
							HX_STACK_LINE(3492)
							_this->c1->jtAcc = cjAcc;
							HX_STACK_LINE(3492)
							jx = (-(_this->ny) * j);
							HX_STACK_LINE(3492)
							jy = (_this->nx * j);
							HX_STACK_LINE(3492)
							hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
							HX_STACK_LINE(3492)
							hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
							HX_STACK_LINE(3492)
							hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
							HX_STACK_LINE(3492)
							hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
							HX_STACK_LINE(3492)
							hx::AddEq(_this->b2->angvel,((_this->rt1b * j) * _this->b2->iinertia));
							HX_STACK_LINE(3492)
							hx::SubEq(_this->b1->angvel,((_this->rt1a * j) * _this->b1->iinertia));
							HX_STACK_LINE(3492)
							if ((_this->hc2)){
								HX_STACK_LINE(3492)
								Float v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(3492)
								Float v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(3492)
								j = (((((v2y * _this->nx) - (v2x * _this->ny)) + _this->surfacex)) * _this->c2->tMass);
								HX_STACK_LINE(3492)
								jMax = (_this->c2->friction * _this->c2->jnAcc);
								HX_STACK_LINE(3492)
								jOld = _this->c2->jtAcc;
								HX_STACK_LINE(3492)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3492)
								if (((cjAcc > jMax))){
									HX_STACK_LINE(3492)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(3492)
									if (((cjAcc < -(jMax)))){
										HX_STACK_LINE(3492)
										cjAcc = -(jMax);
									}
								}
								HX_STACK_LINE(3492)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3492)
								_this->c2->jtAcc = cjAcc;
								HX_STACK_LINE(3492)
								jx = (-(_this->ny) * j);
								HX_STACK_LINE(3492)
								jy = (_this->nx * j);
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->angvel,((_this->rt2b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->angvel,((_this->rt2a * j) * _this->b1->iinertia));
								HX_STACK_LINE(3492)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3492)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3492)
								v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3492)
								v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3492)
								Float ax = _this->c1->jnAcc;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(3492)
								Float ay = _this->c2->jnAcc;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(3492)
								Float jnx = (((((v1x * _this->nx) + (v1y * _this->ny)) + _this->surfacey) + _this->c1->bounce) - (((_this->Ka * ax) + (_this->Kb * ay))));		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(3492)
								Float jny = (((((v2x * _this->nx) + (v2y * _this->ny)) + _this->surfacey) + _this->c2->bounce) - (((_this->Kb * ax) + (_this->Kc * ay))));		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(3492)
								Float xx = -((((_this->kMassa * jnx) + (_this->kMassb * jny))));		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(3492)
								Float xy = -((((_this->kMassb * jnx) + (_this->kMassc * jny))));		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(3492)
								if (((bool((xx >= (int)0)) && bool((xy >= (int)0))))){
									HX_STACK_LINE(3492)
									{
										HX_STACK_LINE(3492)
										jnx = (xx - ax);
										HX_STACK_LINE(3492)
										jny = (xy - ay);
									}
									HX_STACK_LINE(3492)
									_this->c1->jnAcc = xx;
									HX_STACK_LINE(3492)
									_this->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(3492)
									xx = (-(_this->c1->nMass) * jnx);
									HX_STACK_LINE(3492)
									if (((bool((xx >= (int)0)) && bool((((_this->Kb * xx) + jny) >= (int)0))))){
										HX_STACK_LINE(3492)
										jnx = (xx - ax);
										HX_STACK_LINE(3492)
										jny = -(ay);
										HX_STACK_LINE(3492)
										_this->c1->jnAcc = xx;
										HX_STACK_LINE(3492)
										_this->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(3492)
										xy = (-(_this->c2->nMass) * jny);
										HX_STACK_LINE(3492)
										if (((bool((xy >= (int)0)) && bool((((_this->Kb * xy) + jnx) >= (int)0))))){
											HX_STACK_LINE(3492)
											jnx = -(ax);
											HX_STACK_LINE(3492)
											jny = (xy - ay);
											HX_STACK_LINE(3492)
											_this->c1->jnAcc = (int)0;
											HX_STACK_LINE(3492)
											_this->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(3492)
											if (((bool((jnx >= (int)0)) && bool((jny >= (int)0))))){
												HX_STACK_LINE(3492)
												jnx = -(ax);
												HX_STACK_LINE(3492)
												jny = -(ay);
												HX_STACK_LINE(3492)
												Float _g7 = _this->c2->jnAcc = (int)0;		HX_STACK_VAR(_g7,"_g7");
												HX_STACK_LINE(3492)
												_this->c1->jnAcc = _g7;
											}
											else{
												HX_STACK_LINE(3492)
												jnx = (int)0;
												HX_STACK_LINE(3492)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(3492)
								j = (jnx + jny);
								HX_STACK_LINE(3492)
								jx = (_this->nx * j);
								HX_STACK_LINE(3492)
								jy = (_this->ny * j);
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->angvel,((((_this->rn1b * jnx) + (_this->rn2b * jny))) * _this->b2->iinertia));
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->angvel,((((_this->rn1a * jnx) + (_this->rn2a * jny))) * _this->b1->iinertia));
							}
							else{
								HX_STACK_LINE(3492)
								if (((_this->radius != 0.0))){
									HX_STACK_LINE(3492)
									Float dw = (_this->b2->angvel - _this->b1->angvel);		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(3492)
									j = (dw * _this->rMass);
									HX_STACK_LINE(3492)
									jMax = (_this->rfric * _this->c1->jnAcc);
									HX_STACK_LINE(3492)
									jOld = _this->jrAcc;
									HX_STACK_LINE(3492)
									hx::SubEq(_this->jrAcc,j);
									HX_STACK_LINE(3492)
									if (((_this->jrAcc > jMax))){
										HX_STACK_LINE(3492)
										_this->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(3492)
										if (((_this->jrAcc < -(jMax)))){
											HX_STACK_LINE(3492)
											_this->jrAcc = -(jMax);
										}
									}
									HX_STACK_LINE(3492)
									j = (_this->jrAcc - jOld);
									HX_STACK_LINE(3492)
									hx::AddEq(_this->b2->angvel,(j * _this->b2->iinertia));
									HX_STACK_LINE(3492)
									hx::SubEq(_this->b1->angvel,(j * _this->b1->iinertia));
								}
								HX_STACK_LINE(3492)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3492)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3492)
								j = ((((_this->c1->bounce + (((_this->nx * v1x) + (_this->ny * v1y)))) + _this->surfacey)) * _this->c1->nMass);
								HX_STACK_LINE(3492)
								jOld = _this->c1->jnAcc;
								HX_STACK_LINE(3492)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3492)
								if (((cjAcc < 0.0))){
									HX_STACK_LINE(3492)
									cjAcc = 0.0;
								}
								HX_STACK_LINE(3492)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3492)
								_this->c1->jnAcc = cjAcc;
								HX_STACK_LINE(3492)
								jx = (_this->nx * j);
								HX_STACK_LINE(3492)
								jy = (_this->ny * j);
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3492)
								hx::AddEq(_this->b2->angvel,((_this->rn1b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3492)
								hx::SubEq(_this->b1->angvel,((_this->rn1a * j) * _this->b1->iinertia));
							}
						}
						HX_STACK_LINE(3493)
						{
							HX_STACK_LINE(3493)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3493)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(3493)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(3493)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(3493)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(3493)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(3493)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(3493)
							Float v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(3493)
							Float v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(3493)
							j = (((((v1y * _this->nx) - (v1x * _this->ny)) + _this->surfacex)) * _this->c1->tMass);
							HX_STACK_LINE(3493)
							jMax = (_this->c1->friction * _this->c1->jnAcc);
							HX_STACK_LINE(3493)
							jOld = _this->c1->jtAcc;
							HX_STACK_LINE(3493)
							cjAcc = (jOld - j);
							HX_STACK_LINE(3493)
							if (((cjAcc > jMax))){
								HX_STACK_LINE(3493)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(3493)
								if (((cjAcc < -(jMax)))){
									HX_STACK_LINE(3493)
									cjAcc = -(jMax);
								}
							}
							HX_STACK_LINE(3493)
							j = (cjAcc - jOld);
							HX_STACK_LINE(3493)
							_this->c1->jtAcc = cjAcc;
							HX_STACK_LINE(3493)
							jx = (-(_this->ny) * j);
							HX_STACK_LINE(3493)
							jy = (_this->nx * j);
							HX_STACK_LINE(3493)
							hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
							HX_STACK_LINE(3493)
							hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
							HX_STACK_LINE(3493)
							hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
							HX_STACK_LINE(3493)
							hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
							HX_STACK_LINE(3493)
							hx::AddEq(_this->b2->angvel,((_this->rt1b * j) * _this->b2->iinertia));
							HX_STACK_LINE(3493)
							hx::SubEq(_this->b1->angvel,((_this->rt1a * j) * _this->b1->iinertia));
							HX_STACK_LINE(3493)
							if ((_this->hc2)){
								HX_STACK_LINE(3493)
								Float v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(3493)
								Float v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(3493)
								j = (((((v2y * _this->nx) - (v2x * _this->ny)) + _this->surfacex)) * _this->c2->tMass);
								HX_STACK_LINE(3493)
								jMax = (_this->c2->friction * _this->c2->jnAcc);
								HX_STACK_LINE(3493)
								jOld = _this->c2->jtAcc;
								HX_STACK_LINE(3493)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3493)
								if (((cjAcc > jMax))){
									HX_STACK_LINE(3493)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(3493)
									if (((cjAcc < -(jMax)))){
										HX_STACK_LINE(3493)
										cjAcc = -(jMax);
									}
								}
								HX_STACK_LINE(3493)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3493)
								_this->c2->jtAcc = cjAcc;
								HX_STACK_LINE(3493)
								jx = (-(_this->ny) * j);
								HX_STACK_LINE(3493)
								jy = (_this->nx * j);
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->angvel,((_this->rt2b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->angvel,((_this->rt2a * j) * _this->b1->iinertia));
								HX_STACK_LINE(3493)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3493)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3493)
								v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3493)
								v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3493)
								Float ax = _this->c1->jnAcc;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(3493)
								Float ay = _this->c2->jnAcc;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(3493)
								Float jnx = (((((v1x * _this->nx) + (v1y * _this->ny)) + _this->surfacey) + _this->c1->bounce) - (((_this->Ka * ax) + (_this->Kb * ay))));		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(3493)
								Float jny = (((((v2x * _this->nx) + (v2y * _this->ny)) + _this->surfacey) + _this->c2->bounce) - (((_this->Kb * ax) + (_this->Kc * ay))));		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(3493)
								Float xx = -((((_this->kMassa * jnx) + (_this->kMassb * jny))));		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(3493)
								Float xy = -((((_this->kMassb * jnx) + (_this->kMassc * jny))));		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(3493)
								if (((bool((xx >= (int)0)) && bool((xy >= (int)0))))){
									HX_STACK_LINE(3493)
									{
										HX_STACK_LINE(3493)
										jnx = (xx - ax);
										HX_STACK_LINE(3493)
										jny = (xy - ay);
									}
									HX_STACK_LINE(3493)
									_this->c1->jnAcc = xx;
									HX_STACK_LINE(3493)
									_this->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(3493)
									xx = (-(_this->c1->nMass) * jnx);
									HX_STACK_LINE(3493)
									if (((bool((xx >= (int)0)) && bool((((_this->Kb * xx) + jny) >= (int)0))))){
										HX_STACK_LINE(3493)
										jnx = (xx - ax);
										HX_STACK_LINE(3493)
										jny = -(ay);
										HX_STACK_LINE(3493)
										_this->c1->jnAcc = xx;
										HX_STACK_LINE(3493)
										_this->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(3493)
										xy = (-(_this->c2->nMass) * jny);
										HX_STACK_LINE(3493)
										if (((bool((xy >= (int)0)) && bool((((_this->Kb * xy) + jnx) >= (int)0))))){
											HX_STACK_LINE(3493)
											jnx = -(ax);
											HX_STACK_LINE(3493)
											jny = (xy - ay);
											HX_STACK_LINE(3493)
											_this->c1->jnAcc = (int)0;
											HX_STACK_LINE(3493)
											_this->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(3493)
											if (((bool((jnx >= (int)0)) && bool((jny >= (int)0))))){
												HX_STACK_LINE(3493)
												jnx = -(ax);
												HX_STACK_LINE(3493)
												jny = -(ay);
												HX_STACK_LINE(3493)
												Float _g8 = _this->c2->jnAcc = (int)0;		HX_STACK_VAR(_g8,"_g8");
												HX_STACK_LINE(3493)
												_this->c1->jnAcc = _g8;
											}
											else{
												HX_STACK_LINE(3493)
												jnx = (int)0;
												HX_STACK_LINE(3493)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(3493)
								j = (jnx + jny);
								HX_STACK_LINE(3493)
								jx = (_this->nx * j);
								HX_STACK_LINE(3493)
								jy = (_this->ny * j);
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->angvel,((((_this->rn1b * jnx) + (_this->rn2b * jny))) * _this->b2->iinertia));
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->angvel,((((_this->rn1a * jnx) + (_this->rn2a * jny))) * _this->b1->iinertia));
							}
							else{
								HX_STACK_LINE(3493)
								if (((_this->radius != 0.0))){
									HX_STACK_LINE(3493)
									Float dw = (_this->b2->angvel - _this->b1->angvel);		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(3493)
									j = (dw * _this->rMass);
									HX_STACK_LINE(3493)
									jMax = (_this->rfric * _this->c1->jnAcc);
									HX_STACK_LINE(3493)
									jOld = _this->jrAcc;
									HX_STACK_LINE(3493)
									hx::SubEq(_this->jrAcc,j);
									HX_STACK_LINE(3493)
									if (((_this->jrAcc > jMax))){
										HX_STACK_LINE(3493)
										_this->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(3493)
										if (((_this->jrAcc < -(jMax)))){
											HX_STACK_LINE(3493)
											_this->jrAcc = -(jMax);
										}
									}
									HX_STACK_LINE(3493)
									j = (_this->jrAcc - jOld);
									HX_STACK_LINE(3493)
									hx::AddEq(_this->b2->angvel,(j * _this->b2->iinertia));
									HX_STACK_LINE(3493)
									hx::SubEq(_this->b1->angvel,(j * _this->b1->iinertia));
								}
								HX_STACK_LINE(3493)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3493)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3493)
								j = ((((_this->c1->bounce + (((_this->nx * v1x) + (_this->ny * v1y)))) + _this->surfacey)) * _this->c1->nMass);
								HX_STACK_LINE(3493)
								jOld = _this->c1->jnAcc;
								HX_STACK_LINE(3493)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3493)
								if (((cjAcc < 0.0))){
									HX_STACK_LINE(3493)
									cjAcc = 0.0;
								}
								HX_STACK_LINE(3493)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3493)
								_this->c1->jnAcc = cjAcc;
								HX_STACK_LINE(3493)
								jx = (_this->nx * j);
								HX_STACK_LINE(3493)
								jy = (_this->ny * j);
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3493)
								hx::AddEq(_this->b2->angvel,((_this->rn1b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3493)
								hx::SubEq(_this->b1->angvel,((_this->rn1a * j) * _this->b1->iinertia));
							}
						}
						HX_STACK_LINE(3494)
						{
							HX_STACK_LINE(3494)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3494)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(3494)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(3494)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(3494)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(3494)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(3494)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(3494)
							Float v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(3494)
							Float v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(3494)
							j = (((((v1y * _this->nx) - (v1x * _this->ny)) + _this->surfacex)) * _this->c1->tMass);
							HX_STACK_LINE(3494)
							jMax = (_this->c1->friction * _this->c1->jnAcc);
							HX_STACK_LINE(3494)
							jOld = _this->c1->jtAcc;
							HX_STACK_LINE(3494)
							cjAcc = (jOld - j);
							HX_STACK_LINE(3494)
							if (((cjAcc > jMax))){
								HX_STACK_LINE(3494)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(3494)
								if (((cjAcc < -(jMax)))){
									HX_STACK_LINE(3494)
									cjAcc = -(jMax);
								}
							}
							HX_STACK_LINE(3494)
							j = (cjAcc - jOld);
							HX_STACK_LINE(3494)
							_this->c1->jtAcc = cjAcc;
							HX_STACK_LINE(3494)
							jx = (-(_this->ny) * j);
							HX_STACK_LINE(3494)
							jy = (_this->nx * j);
							HX_STACK_LINE(3494)
							hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
							HX_STACK_LINE(3494)
							hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
							HX_STACK_LINE(3494)
							hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
							HX_STACK_LINE(3494)
							hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
							HX_STACK_LINE(3494)
							hx::AddEq(_this->b2->angvel,((_this->rt1b * j) * _this->b2->iinertia));
							HX_STACK_LINE(3494)
							hx::SubEq(_this->b1->angvel,((_this->rt1a * j) * _this->b1->iinertia));
							HX_STACK_LINE(3494)
							if ((_this->hc2)){
								HX_STACK_LINE(3494)
								Float v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(3494)
								Float v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(3494)
								j = (((((v2y * _this->nx) - (v2x * _this->ny)) + _this->surfacex)) * _this->c2->tMass);
								HX_STACK_LINE(3494)
								jMax = (_this->c2->friction * _this->c2->jnAcc);
								HX_STACK_LINE(3494)
								jOld = _this->c2->jtAcc;
								HX_STACK_LINE(3494)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3494)
								if (((cjAcc > jMax))){
									HX_STACK_LINE(3494)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(3494)
									if (((cjAcc < -(jMax)))){
										HX_STACK_LINE(3494)
										cjAcc = -(jMax);
									}
								}
								HX_STACK_LINE(3494)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3494)
								_this->c2->jtAcc = cjAcc;
								HX_STACK_LINE(3494)
								jx = (-(_this->ny) * j);
								HX_STACK_LINE(3494)
								jy = (_this->nx * j);
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->angvel,((_this->rt2b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->angvel,((_this->rt2a * j) * _this->b1->iinertia));
								HX_STACK_LINE(3494)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3494)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3494)
								v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3494)
								v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3494)
								Float ax = _this->c1->jnAcc;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(3494)
								Float ay = _this->c2->jnAcc;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(3494)
								Float jnx = (((((v1x * _this->nx) + (v1y * _this->ny)) + _this->surfacey) + _this->c1->bounce) - (((_this->Ka * ax) + (_this->Kb * ay))));		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(3494)
								Float jny = (((((v2x * _this->nx) + (v2y * _this->ny)) + _this->surfacey) + _this->c2->bounce) - (((_this->Kb * ax) + (_this->Kc * ay))));		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(3494)
								Float xx = -((((_this->kMassa * jnx) + (_this->kMassb * jny))));		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(3494)
								Float xy = -((((_this->kMassb * jnx) + (_this->kMassc * jny))));		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(3494)
								if (((bool((xx >= (int)0)) && bool((xy >= (int)0))))){
									HX_STACK_LINE(3494)
									{
										HX_STACK_LINE(3494)
										jnx = (xx - ax);
										HX_STACK_LINE(3494)
										jny = (xy - ay);
									}
									HX_STACK_LINE(3494)
									_this->c1->jnAcc = xx;
									HX_STACK_LINE(3494)
									_this->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(3494)
									xx = (-(_this->c1->nMass) * jnx);
									HX_STACK_LINE(3494)
									if (((bool((xx >= (int)0)) && bool((((_this->Kb * xx) + jny) >= (int)0))))){
										HX_STACK_LINE(3494)
										jnx = (xx - ax);
										HX_STACK_LINE(3494)
										jny = -(ay);
										HX_STACK_LINE(3494)
										_this->c1->jnAcc = xx;
										HX_STACK_LINE(3494)
										_this->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(3494)
										xy = (-(_this->c2->nMass) * jny);
										HX_STACK_LINE(3494)
										if (((bool((xy >= (int)0)) && bool((((_this->Kb * xy) + jnx) >= (int)0))))){
											HX_STACK_LINE(3494)
											jnx = -(ax);
											HX_STACK_LINE(3494)
											jny = (xy - ay);
											HX_STACK_LINE(3494)
											_this->c1->jnAcc = (int)0;
											HX_STACK_LINE(3494)
											_this->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(3494)
											if (((bool((jnx >= (int)0)) && bool((jny >= (int)0))))){
												HX_STACK_LINE(3494)
												jnx = -(ax);
												HX_STACK_LINE(3494)
												jny = -(ay);
												HX_STACK_LINE(3494)
												Float _g9 = _this->c2->jnAcc = (int)0;		HX_STACK_VAR(_g9,"_g9");
												HX_STACK_LINE(3494)
												_this->c1->jnAcc = _g9;
											}
											else{
												HX_STACK_LINE(3494)
												jnx = (int)0;
												HX_STACK_LINE(3494)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(3494)
								j = (jnx + jny);
								HX_STACK_LINE(3494)
								jx = (_this->nx * j);
								HX_STACK_LINE(3494)
								jy = (_this->ny * j);
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->angvel,((((_this->rn1b * jnx) + (_this->rn2b * jny))) * _this->b2->iinertia));
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->angvel,((((_this->rn1a * jnx) + (_this->rn2a * jny))) * _this->b1->iinertia));
							}
							else{
								HX_STACK_LINE(3494)
								if (((_this->radius != 0.0))){
									HX_STACK_LINE(3494)
									Float dw = (_this->b2->angvel - _this->b1->angvel);		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(3494)
									j = (dw * _this->rMass);
									HX_STACK_LINE(3494)
									jMax = (_this->rfric * _this->c1->jnAcc);
									HX_STACK_LINE(3494)
									jOld = _this->jrAcc;
									HX_STACK_LINE(3494)
									hx::SubEq(_this->jrAcc,j);
									HX_STACK_LINE(3494)
									if (((_this->jrAcc > jMax))){
										HX_STACK_LINE(3494)
										_this->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(3494)
										if (((_this->jrAcc < -(jMax)))){
											HX_STACK_LINE(3494)
											_this->jrAcc = -(jMax);
										}
									}
									HX_STACK_LINE(3494)
									j = (_this->jrAcc - jOld);
									HX_STACK_LINE(3494)
									hx::AddEq(_this->b2->angvel,(j * _this->b2->iinertia));
									HX_STACK_LINE(3494)
									hx::SubEq(_this->b1->angvel,(j * _this->b1->iinertia));
								}
								HX_STACK_LINE(3494)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3494)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3494)
								j = ((((_this->c1->bounce + (((_this->nx * v1x) + (_this->ny * v1y)))) + _this->surfacey)) * _this->c1->nMass);
								HX_STACK_LINE(3494)
								jOld = _this->c1->jnAcc;
								HX_STACK_LINE(3494)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3494)
								if (((cjAcc < 0.0))){
									HX_STACK_LINE(3494)
									cjAcc = 0.0;
								}
								HX_STACK_LINE(3494)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3494)
								_this->c1->jnAcc = cjAcc;
								HX_STACK_LINE(3494)
								jx = (_this->nx * j);
								HX_STACK_LINE(3494)
								jy = (_this->ny * j);
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3494)
								hx::AddEq(_this->b2->angvel,((_this->rn1b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3494)
								hx::SubEq(_this->b1->angvel,((_this->rn1a * j) * _this->b1->iinertia));
							}
						}
						HX_STACK_LINE(3495)
						{
							HX_STACK_LINE(3495)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(3495)
							Float jx;		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(3495)
							Float jy;		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(3495)
							Float j;		HX_STACK_VAR(j,"j");
							HX_STACK_LINE(3495)
							Float jMax;		HX_STACK_VAR(jMax,"jMax");
							HX_STACK_LINE(3495)
							Float jOld;		HX_STACK_VAR(jOld,"jOld");
							HX_STACK_LINE(3495)
							Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
							HX_STACK_LINE(3495)
							Float v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));		HX_STACK_VAR(v1x,"v1x");
							HX_STACK_LINE(3495)
							Float v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));		HX_STACK_VAR(v1y,"v1y");
							HX_STACK_LINE(3495)
							j = (((((v1y * _this->nx) - (v1x * _this->ny)) + _this->surfacex)) * _this->c1->tMass);
							HX_STACK_LINE(3495)
							jMax = (_this->c1->friction * _this->c1->jnAcc);
							HX_STACK_LINE(3495)
							jOld = _this->c1->jtAcc;
							HX_STACK_LINE(3495)
							cjAcc = (jOld - j);
							HX_STACK_LINE(3495)
							if (((cjAcc > jMax))){
								HX_STACK_LINE(3495)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(3495)
								if (((cjAcc < -(jMax)))){
									HX_STACK_LINE(3495)
									cjAcc = -(jMax);
								}
							}
							HX_STACK_LINE(3495)
							j = (cjAcc - jOld);
							HX_STACK_LINE(3495)
							_this->c1->jtAcc = cjAcc;
							HX_STACK_LINE(3495)
							jx = (-(_this->ny) * j);
							HX_STACK_LINE(3495)
							jy = (_this->nx * j);
							HX_STACK_LINE(3495)
							hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
							HX_STACK_LINE(3495)
							hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
							HX_STACK_LINE(3495)
							hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
							HX_STACK_LINE(3495)
							hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
							HX_STACK_LINE(3495)
							hx::AddEq(_this->b2->angvel,((_this->rt1b * j) * _this->b2->iinertia));
							HX_STACK_LINE(3495)
							hx::SubEq(_this->b1->angvel,((_this->rt1a * j) * _this->b1->iinertia));
							HX_STACK_LINE(3495)
							if ((_this->hc2)){
								HX_STACK_LINE(3495)
								Float v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));		HX_STACK_VAR(v2x,"v2x");
								HX_STACK_LINE(3495)
								Float v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));		HX_STACK_VAR(v2y,"v2y");
								HX_STACK_LINE(3495)
								j = (((((v2y * _this->nx) - (v2x * _this->ny)) + _this->surfacex)) * _this->c2->tMass);
								HX_STACK_LINE(3495)
								jMax = (_this->c2->friction * _this->c2->jnAcc);
								HX_STACK_LINE(3495)
								jOld = _this->c2->jtAcc;
								HX_STACK_LINE(3495)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3495)
								if (((cjAcc > jMax))){
									HX_STACK_LINE(3495)
									cjAcc = jMax;
								}
								else{
									HX_STACK_LINE(3495)
									if (((cjAcc < -(jMax)))){
										HX_STACK_LINE(3495)
										cjAcc = -(jMax);
									}
								}
								HX_STACK_LINE(3495)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3495)
								_this->c2->jtAcc = cjAcc;
								HX_STACK_LINE(3495)
								jx = (-(_this->ny) * j);
								HX_STACK_LINE(3495)
								jy = (_this->nx * j);
								HX_STACK_LINE(3495)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3495)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3495)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3495)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3495)
								hx::AddEq(_this->b2->angvel,((_this->rt2b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3495)
								hx::SubEq(_this->b1->angvel,((_this->rt2a * j) * _this->b1->iinertia));
								HX_STACK_LINE(3495)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3495)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3495)
								v2x = (((_this->k2x + _this->b2->velx) - (_this->c2->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c2->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3495)
								v2y = (((_this->k2y + _this->b2->vely) + (_this->c2->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c2->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3495)
								Float ax = _this->c1->jnAcc;		HX_STACK_VAR(ax,"ax");
								HX_STACK_LINE(3495)
								Float ay = _this->c2->jnAcc;		HX_STACK_VAR(ay,"ay");
								HX_STACK_LINE(3495)
								Float jnx = (((((v1x * _this->nx) + (v1y * _this->ny)) + _this->surfacey) + _this->c1->bounce) - (((_this->Ka * ax) + (_this->Kb * ay))));		HX_STACK_VAR(jnx,"jnx");
								HX_STACK_LINE(3495)
								Float jny = (((((v2x * _this->nx) + (v2y * _this->ny)) + _this->surfacey) + _this->c2->bounce) - (((_this->Kb * ax) + (_this->Kc * ay))));		HX_STACK_VAR(jny,"jny");
								HX_STACK_LINE(3495)
								Float xx = -((((_this->kMassa * jnx) + (_this->kMassb * jny))));		HX_STACK_VAR(xx,"xx");
								HX_STACK_LINE(3495)
								Float xy = -((((_this->kMassb * jnx) + (_this->kMassc * jny))));		HX_STACK_VAR(xy,"xy");
								HX_STACK_LINE(3495)
								if (((bool((xx >= (int)0)) && bool((xy >= (int)0))))){
									HX_STACK_LINE(3495)
									{
										HX_STACK_LINE(3495)
										jnx = (xx - ax);
										HX_STACK_LINE(3495)
										jny = (xy - ay);
									}
									HX_STACK_LINE(3495)
									_this->c1->jnAcc = xx;
									HX_STACK_LINE(3495)
									_this->c2->jnAcc = xy;
								}
								else{
									HX_STACK_LINE(3495)
									xx = (-(_this->c1->nMass) * jnx);
									HX_STACK_LINE(3495)
									if (((bool((xx >= (int)0)) && bool((((_this->Kb * xx) + jny) >= (int)0))))){
										HX_STACK_LINE(3495)
										jnx = (xx - ax);
										HX_STACK_LINE(3495)
										jny = -(ay);
										HX_STACK_LINE(3495)
										_this->c1->jnAcc = xx;
										HX_STACK_LINE(3495)
										_this->c2->jnAcc = (int)0;
									}
									else{
										HX_STACK_LINE(3495)
										xy = (-(_this->c2->nMass) * jny);
										HX_STACK_LINE(3495)
										if (((bool((xy >= (int)0)) && bool((((_this->Kb * xy) + jnx) >= (int)0))))){
											HX_STACK_LINE(3495)
											jnx = -(ax);
											HX_STACK_LINE(3495)
											jny = (xy - ay);
											HX_STACK_LINE(3495)
											_this->c1->jnAcc = (int)0;
											HX_STACK_LINE(3495)
											_this->c2->jnAcc = xy;
										}
										else{
											HX_STACK_LINE(3495)
											if (((bool((jnx >= (int)0)) && bool((jny >= (int)0))))){
												HX_STACK_LINE(3495)
												jnx = -(ax);
												HX_STACK_LINE(3495)
												jny = -(ay);
												HX_STACK_LINE(3495)
												Float _g10 = _this->c2->jnAcc = (int)0;		HX_STACK_VAR(_g10,"_g10");
												HX_STACK_LINE(3495)
												_this->c1->jnAcc = _g10;
											}
											else{
												HX_STACK_LINE(3495)
												jnx = (int)0;
												HX_STACK_LINE(3495)
												jny = (int)0;
											}
										}
									}
								}
								HX_STACK_LINE(3495)
								j = (jnx + jny);
								HX_STACK_LINE(3495)
								jx = (_this->nx * j);
								HX_STACK_LINE(3495)
								jy = (_this->ny * j);
								HX_STACK_LINE(3495)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3495)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3495)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3495)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3495)
								hx::AddEq(_this->b2->angvel,((((_this->rn1b * jnx) + (_this->rn2b * jny))) * _this->b2->iinertia));
								HX_STACK_LINE(3495)
								hx::SubEq(_this->b1->angvel,((((_this->rn1a * jnx) + (_this->rn2a * jny))) * _this->b1->iinertia));
							}
							else{
								HX_STACK_LINE(3495)
								if (((_this->radius != 0.0))){
									HX_STACK_LINE(3495)
									Float dw = (_this->b2->angvel - _this->b1->angvel);		HX_STACK_VAR(dw,"dw");
									HX_STACK_LINE(3495)
									j = (dw * _this->rMass);
									HX_STACK_LINE(3495)
									jMax = (_this->rfric * _this->c1->jnAcc);
									HX_STACK_LINE(3495)
									jOld = _this->jrAcc;
									HX_STACK_LINE(3495)
									hx::SubEq(_this->jrAcc,j);
									HX_STACK_LINE(3495)
									if (((_this->jrAcc > jMax))){
										HX_STACK_LINE(3495)
										_this->jrAcc = jMax;
									}
									else{
										HX_STACK_LINE(3495)
										if (((_this->jrAcc < -(jMax)))){
											HX_STACK_LINE(3495)
											_this->jrAcc = -(jMax);
										}
									}
									HX_STACK_LINE(3495)
									j = (_this->jrAcc - jOld);
									HX_STACK_LINE(3495)
									hx::AddEq(_this->b2->angvel,(j * _this->b2->iinertia));
									HX_STACK_LINE(3495)
									hx::SubEq(_this->b1->angvel,(j * _this->b1->iinertia));
								}
								HX_STACK_LINE(3495)
								v1x = (((_this->k1x + _this->b2->velx) - (_this->c1->r2y * _this->b2->angvel)) - ((_this->b1->velx - (_this->c1->r1y * _this->b1->angvel))));
								HX_STACK_LINE(3495)
								v1y = (((_this->k1y + _this->b2->vely) + (_this->c1->r2x * _this->b2->angvel)) - ((_this->b1->vely + (_this->c1->r1x * _this->b1->angvel))));
								HX_STACK_LINE(3495)
								j = ((((_this->c1->bounce + (((_this->nx * v1x) + (_this->ny * v1y)))) + _this->surfacey)) * _this->c1->nMass);
								HX_STACK_LINE(3495)
								jOld = _this->c1->jnAcc;
								HX_STACK_LINE(3495)
								cjAcc = (jOld - j);
								HX_STACK_LINE(3495)
								if (((cjAcc < 0.0))){
									HX_STACK_LINE(3495)
									cjAcc = 0.0;
								}
								HX_STACK_LINE(3495)
								j = (cjAcc - jOld);
								HX_STACK_LINE(3495)
								_this->c1->jnAcc = cjAcc;
								HX_STACK_LINE(3495)
								jx = (_this->nx * j);
								HX_STACK_LINE(3495)
								jy = (_this->ny * j);
								HX_STACK_LINE(3495)
								hx::AddEq(_this->b2->velx,(jx * _this->b2->imass));
								HX_STACK_LINE(3495)
								hx::AddEq(_this->b2->vely,(jy * _this->b2->imass));
								HX_STACK_LINE(3495)
								hx::SubEq(_this->b1->velx,(jx * _this->b1->imass));
								HX_STACK_LINE(3495)
								hx::SubEq(_this->b1->vely,(jy * _this->b1->imass));
								HX_STACK_LINE(3495)
								hx::AddEq(_this->b2->angvel,((_this->rn1b * j) * _this->b2->iinertia));
								HX_STACK_LINE(3495)
								hx::SubEq(_this->b1->angvel,((_this->rn1a * j) * _this->b1->iinertia));
							}
						}
						HX_STACK_LINE(3496)
						b1->sweep_angvel = hx::Mod(b1->angvel,MAX_VEL);
						HX_STACK_LINE(3497)
						b2->sweep_angvel = hx::Mod(b2->angvel,MAX_VEL);
					}
				}
			}
			HX_STACK_LINE(3501)
			if (((bool((bool((arb != null())) && bool(((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))))) && bool((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL))))){
				HX_STACK_LINE(3502)
				if (((bool(!(b1->sweepFrozen)) && bool(!(((b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))))))){
					HX_STACK_LINE(3503)
					b1->sweepFrozen = true;
					HX_STACK_LINE(3504)
					if ((minTOI->failed)){
						HX_STACK_LINE(3504)
						Float _g11 = b1->sweep_angvel = (int)0;		HX_STACK_VAR(_g11,"_g11");
						HX_STACK_LINE(3504)
						b1->angvel = _g11;
					}
					else{
						HX_STACK_LINE(3505)
						if ((minTOI->slipped)){
							HX_STACK_LINE(3505)
							Float _g12 = hx::MultEq(b1->sweep_angvel,::nape::Config_obj::angularCCDSlipScale);		HX_STACK_VAR(_g12,"_g12");
							HX_STACK_LINE(3505)
							b1->angvel = _g12;
						}
						else{
							HX_STACK_LINE(3506)
							b1->angvel = b1->sweep_angvel;
						}
					}
				}
				HX_STACK_LINE(3508)
				if (((bool(!(b2->sweepFrozen)) && bool(!(((b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))))))){
					HX_STACK_LINE(3509)
					b2->sweepFrozen = true;
					HX_STACK_LINE(3510)
					if ((minTOI->failed)){
						HX_STACK_LINE(3510)
						Float _g13 = b2->sweep_angvel = (int)0;		HX_STACK_VAR(_g13,"_g13");
						HX_STACK_LINE(3510)
						b2->angvel = _g13;
					}
					else{
						HX_STACK_LINE(3511)
						if ((minTOI->slipped)){
							HX_STACK_LINE(3511)
							Float _g14 = hx::MultEq(b2->sweep_angvel,::nape::Config_obj::angularCCDSlipScale);		HX_STACK_VAR(_g14,"_g14");
							HX_STACK_LINE(3511)
							b2->angvel = _g14;
						}
						else{
							HX_STACK_LINE(3512)
							b2->angvel = b2->sweep_angvel;
						}
					}
				}
			}
		}
		HX_STACK_LINE(3517)
		while((true)){
			HX_STACK_LINE(3517)
			if ((!((!(((this->toiEvents->head == null()))))))){
				HX_STACK_LINE(3517)
				break;
			}
			HX_STACK_LINE(3518)
			::zpp_nape::geom::ZPP_ToiEvent toi = this->toiEvents->pop_unsafe();		HX_STACK_VAR(toi,"toi");
			HX_STACK_LINE(3520)
			{
				HX_STACK_LINE(3521)
				::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
				HX_STACK_LINE(3531)
				o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
				HX_STACK_LINE(3532)
				::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
			}
		}
		HX_STACK_LINE(3540)
		{
			HX_STACK_LINE(3541)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->kinematics->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3542)
			while((true)){
				HX_STACK_LINE(3542)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3542)
					break;
				}
				HX_STACK_LINE(3543)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3544)
				{
					HX_STACK_LINE(3545)
					{
						HX_STACK_LINE(3545)
						Float delta = (deltaTime - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(3545)
						if (((delta != (int)0))){
							HX_STACK_LINE(3545)
							cur->sweepTime = deltaTime;
							HX_STACK_LINE(3545)
							{
								HX_STACK_LINE(3545)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(3545)
								hx::AddEq(cur->posx,(cur->velx * t));
								HX_STACK_LINE(3545)
								hx::AddEq(cur->posy,(cur->vely * t));
							}
							HX_STACK_LINE(3545)
							if (((cur->angvel != (int)0))){
								HX_STACK_LINE(3545)
								Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(3545)
								hx::AddEq(cur->rot,dr);
								HX_STACK_LINE(3545)
								if ((((dr * dr) > 0.0001))){
									HX_STACK_LINE(3545)
									Float _g15 = ::Math_obj::sin(cur->rot);		HX_STACK_VAR(_g15,"_g15");
									HX_STACK_LINE(3545)
									cur->axisx = _g15;
									HX_STACK_LINE(3545)
									Float _g16 = ::Math_obj::cos(cur->rot);		HX_STACK_VAR(_g16,"_g16");
									HX_STACK_LINE(3545)
									cur->axisy = _g16;
									HX_STACK_LINE(3545)
									Dynamic();
								}
								else{
									HX_STACK_LINE(3545)
									Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(3545)
									Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(3545)
									Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(3545)
									Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(3545)
									cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
									HX_STACK_LINE(3545)
									cur->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(3546)
					cur->sweepTime = (int)0;
				}
				HX_STACK_LINE(3548)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3551)
		{
			HX_STACK_LINE(3552)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3553)
			while((true)){
				HX_STACK_LINE(3553)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3553)
					break;
				}
				HX_STACK_LINE(3554)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(3555)
				{
					HX_STACK_LINE(3556)
					if ((!(cur->sweepFrozen))){
						HX_STACK_LINE(3557)
						Float delta = (deltaTime - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(3557)
						if (((delta != (int)0))){
							HX_STACK_LINE(3557)
							cur->sweepTime = deltaTime;
							HX_STACK_LINE(3557)
							{
								HX_STACK_LINE(3557)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(3557)
								hx::AddEq(cur->posx,(cur->velx * t));
								HX_STACK_LINE(3557)
								hx::AddEq(cur->posy,(cur->vely * t));
							}
							HX_STACK_LINE(3557)
							if (((cur->angvel != (int)0))){
								HX_STACK_LINE(3557)
								Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(3557)
								hx::AddEq(cur->rot,dr);
								HX_STACK_LINE(3557)
								if ((((dr * dr) > 0.0001))){
									HX_STACK_LINE(3557)
									Float _g17 = ::Math_obj::sin(cur->rot);		HX_STACK_VAR(_g17,"_g17");
									HX_STACK_LINE(3557)
									cur->axisx = _g17;
									HX_STACK_LINE(3557)
									Float _g18 = ::Math_obj::cos(cur->rot);		HX_STACK_VAR(_g18,"_g18");
									HX_STACK_LINE(3557)
									cur->axisy = _g18;
									HX_STACK_LINE(3557)
									Dynamic();
								}
								else{
									HX_STACK_LINE(3557)
									Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(3557)
									Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(3557)
									Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(3557)
									Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(3557)
									cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
									HX_STACK_LINE(3557)
									cur->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(3559)
					cur->sweepTime = (int)0;
				}
				HX_STACK_LINE(3561)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,continuousCollisions,(void))

::zpp_nape::dynamics::ZPP_Arbiter ZPP_Space_obj::continuousEvent( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2,bool stat,::zpp_nape::dynamics::ZPP_Arbiter in_arb,bool _){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","continuousEvent",0xdb782dd5,"zpp_nape.space.ZPP_Space.continuousEvent","zpp_nape/space/Space.hx",3565,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(s1,"s1")
	HX_STACK_ARG(s2,"s2")
	HX_STACK_ARG(stat,"stat")
	HX_STACK_ARG(in_arb,"in_arb")
	HX_STACK_ARG(_,"_")
	HX_STACK_LINE(3566)
	if (((bool(s1->body->sweepFrozen) && bool(s2->body->sweepFrozen)))){
		HX_STACK_LINE(3566)
		return in_arb;
	}
	HX_STACK_LINE(3567)
	if (((bool(s1->body->disableCCD) || bool(s2->body->disableCCD)))){
		HX_STACK_LINE(3567)
		return in_arb;
	}
	struct _Function_1_1{
		inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",3568,0x2b65ed03)
			{
				HX_STACK_LINE(3568)
				int _g;		HX_STACK_VAR(_g,"_g");
				HX_STACK_LINE(3568)
				{
					HX_STACK_LINE(3568)
					::zpp_nape::phys::ZPP_Body b1 = s1->body;		HX_STACK_VAR(b1,"b1");
					HX_STACK_LINE(3568)
					::zpp_nape::phys::ZPP_Body b2 = s2->body;		HX_STACK_VAR(b2,"b2");
					HX_STACK_LINE(3568)
					bool con_ignore;		HX_STACK_VAR(con_ignore,"con_ignore");
					HX_STACK_LINE(3568)
					{
						HX_STACK_LINE(3568)
						con_ignore = false;
						HX_STACK_LINE(3568)
						{
							HX_STACK_LINE(3568)
							::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = b1->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
							HX_STACK_LINE(3568)
							while((true)){
								HX_STACK_LINE(3568)
								if ((!(((cx_ite != null()))))){
									HX_STACK_LINE(3568)
									break;
								}
								HX_STACK_LINE(3568)
								::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
								HX_STACK_LINE(3568)
								if (((  ((con->ignore)) ? bool(con->pair_exists(b1->id,b2->id)) : bool(false) ))){
									HX_STACK_LINE(3568)
									con_ignore = true;
									HX_STACK_LINE(3568)
									break;
								}
								HX_STACK_LINE(3568)
								cx_ite = cx_ite->next;
							}
						}
					}
					struct _Function_3_1{
						inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",3568,0x2b65ed03)
							{
								HX_STACK_LINE(3568)
								::zpp_nape::dynamics::ZPP_InteractionGroup g1;		HX_STACK_VAR(g1,"g1");
								HX_STACK_LINE(3568)
								{
									HX_STACK_LINE(3568)
									::zpp_nape::phys::ZPP_Interactor cur = s1;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(3568)
									while((true)){
										HX_STACK_LINE(3568)
										if ((!(((bool((cur != null())) && bool((cur->group == null()))))))){
											HX_STACK_LINE(3568)
											break;
										}
										HX_STACK_LINE(3568)
										if (((cur->ishape != null()))){
											HX_STACK_LINE(3568)
											cur = cur->ishape->body;
										}
										else{
											HX_STACK_LINE(3568)
											if (((cur->icompound != null()))){
												HX_STACK_LINE(3568)
												cur = cur->icompound->compound;
											}
											else{
												HX_STACK_LINE(3568)
												cur = cur->ibody->compound;
											}
										}
									}
									HX_STACK_LINE(3568)
									if (((cur == null()))){
										HX_STACK_LINE(3568)
										g1 = null();
									}
									else{
										HX_STACK_LINE(3568)
										g1 = cur->group;
									}
								}
								struct _Function_4_1{
									inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::dynamics::ZPP_InteractionGroup &g1){
										HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",3568,0x2b65ed03)
										{
											HX_STACK_LINE(3568)
											::zpp_nape::dynamics::ZPP_InteractionGroup g2;		HX_STACK_VAR(g2,"g2");
											HX_STACK_LINE(3568)
											{
												HX_STACK_LINE(3568)
												::zpp_nape::phys::ZPP_Interactor cur = s2;		HX_STACK_VAR(cur,"cur");
												HX_STACK_LINE(3568)
												while((true)){
													HX_STACK_LINE(3568)
													if ((!(((bool((cur != null())) && bool((cur->group == null()))))))){
														HX_STACK_LINE(3568)
														break;
													}
													HX_STACK_LINE(3568)
													if (((cur->ishape != null()))){
														HX_STACK_LINE(3568)
														cur = cur->ishape->body;
													}
													else{
														HX_STACK_LINE(3568)
														if (((cur->icompound != null()))){
															HX_STACK_LINE(3568)
															cur = cur->icompound->compound;
														}
														else{
															HX_STACK_LINE(3568)
															cur = cur->ibody->compound;
														}
													}
												}
												HX_STACK_LINE(3568)
												if (((cur == null()))){
													HX_STACK_LINE(3568)
													g2 = null();
												}
												else{
													HX_STACK_LINE(3568)
													g2 = cur->group;
												}
											}
											struct _Function_5_1{
												inline static bool Block( ::zpp_nape::dynamics::ZPP_InteractionGroup &g1,::zpp_nape::dynamics::ZPP_InteractionGroup &g2){
													HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",3568,0x2b65ed03)
													{
														HX_STACK_LINE(3568)
														bool ret = false;		HX_STACK_VAR(ret,"ret");
														HX_STACK_LINE(3568)
														while((true)){
															HX_STACK_LINE(3568)
															if ((!(((bool((g1 != null())) && bool((g2 != null()))))))){
																HX_STACK_LINE(3568)
																break;
															}
															HX_STACK_LINE(3568)
															if (((g1 == g2))){
																HX_STACK_LINE(3568)
																ret = g1->ignore;
																HX_STACK_LINE(3568)
																break;
															}
															HX_STACK_LINE(3568)
															if (((g1->depth < g2->depth))){
																HX_STACK_LINE(3568)
																g2 = g2->group;
															}
															else{
																HX_STACK_LINE(3568)
																g1 = g1->group;
															}
														}
														HX_STACK_LINE(3568)
														return ret;
													}
													return null();
												}
											};
											HX_STACK_LINE(3568)
											return (  (((g2 == null()))) ? bool(false) : bool(_Function_5_1::Block(g1,g2)) );
										}
										return null();
									}
								};
								HX_STACK_LINE(3568)
								return (  (((g1 == null()))) ? bool(false) : bool(_Function_4_1::Block(s2,g1)) );
							}
							return null();
						}
					};
					HX_STACK_LINE(3568)
					if (((  ((!(con_ignore))) ? bool(!(_Function_3_1::Block(s2,s1))) : bool(false) ))){
						struct _Function_4_1{
							inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
								HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",3568,0x2b65ed03)
								{
									HX_STACK_LINE(3568)
									::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(3568)
									::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
									HX_STACK_LINE(3568)
									return (bool((((int(_this->sensorMask) & int(x->sensorGroup))) != (int)0)) && bool((((int(x->sensorMask) & int(_this->sensorGroup))) != (int)0)));
								}
								return null();
							}
						};
						HX_STACK_LINE(3568)
						if (((bool(((bool(s1->sensorEnabled) || bool(s2->sensorEnabled)))) && bool(_Function_4_1::Block(s2,s1))))){
							HX_STACK_LINE(3568)
							_g = (int)2;
						}
						else{
							struct _Function_5_1{
								inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
									HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",3568,0x2b65ed03)
									{
										HX_STACK_LINE(3568)
										::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(3568)
										::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
										HX_STACK_LINE(3568)
										return (bool((((int(_this->fluidMask) & int(x->fluidGroup))) != (int)0)) && bool((((int(x->fluidMask) & int(_this->fluidGroup))) != (int)0)));
									}
									return null();
								}
							};
							HX_STACK_LINE(3568)
							if (((bool((bool(((bool(s1->fluidEnabled) || bool(s2->fluidEnabled)))) && bool(_Function_5_1::Block(s2,s1)))) && bool(!(((bool((bool((bool((b1->imass == (int)0)) && bool((b2->imass == (int)0)))) && bool((b1->iinertia == (int)0)))) && bool((b2->iinertia == (int)0))))))))){
								HX_STACK_LINE(3568)
								_g = (int)0;
							}
							else{
								struct _Function_6_1{
									inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
										HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",3568,0x2b65ed03)
										{
											HX_STACK_LINE(3568)
											::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(3568)
											::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
											HX_STACK_LINE(3568)
											return (bool((((int(_this->collisionMask) & int(x->collisionGroup))) != (int)0)) && bool((((int(x->collisionMask) & int(_this->collisionGroup))) != (int)0)));
										}
										return null();
									}
								};
								HX_STACK_LINE(3568)
								if (((bool(_Function_6_1::Block(s2,s1)) && bool(!(((bool((bool((bool((b1->imass == (int)0)) && bool((b2->imass == (int)0)))) && bool((b1->iinertia == (int)0)))) && bool((b2->iinertia == (int)0))))))))){
									HX_STACK_LINE(3568)
									_g = (int)1;
								}
								else{
									HX_STACK_LINE(3568)
									_g = (int)-1;
								}
							}
						}
					}
					else{
						HX_STACK_LINE(3568)
						_g = (int)-1;
					}
				}
				HX_STACK_LINE(3568)
				return (_g <= (int)0);
			}
			return null();
		}
	};
	HX_STACK_LINE(3568)
	if (((  ((!(((bool((in_arb != null())) && bool((in_arb->colarb == null()))))))) ? bool(_Function_1_1::Block(s2,s1)) : bool(true) ))){
		HX_STACK_LINE(3569)
		return in_arb;
	}
	HX_STACK_LINE(3571)
	::zpp_nape::phys::ZPP_Body b1 = s1->body;		HX_STACK_VAR(b1,"b1");
	HX_STACK_LINE(3572)
	::zpp_nape::phys::ZPP_Body b2 = s2->body;		HX_STACK_VAR(b2,"b2");
	HX_STACK_LINE(3573)
	if (((bool((bool(stat) || bool(b1->bullet))) || bool(b2->bullet)))){
		HX_STACK_LINE(3574)
		::zpp_nape::geom::ZPP_ToiEvent toi;		HX_STACK_VAR(toi,"toi");
		HX_STACK_LINE(3575)
		{
			HX_STACK_LINE(3576)
			if (((::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool == null()))){
				HX_STACK_LINE(3577)
				::zpp_nape::geom::ZPP_ToiEvent _g1 = ::zpp_nape::geom::ZPP_ToiEvent_obj::__new();		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(3577)
				toi = _g1;
			}
			else{
				HX_STACK_LINE(3583)
				toi = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
				HX_STACK_LINE(3584)
				::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = toi->next;
				HX_STACK_LINE(3585)
				toi->next = null();
			}
			HX_STACK_LINE(3590)
			{
				HX_STACK_LINE(3590)
				toi->failed = false;
				HX_STACK_LINE(3590)
				::zpp_nape::shape::ZPP_Shape _g2 = toi->s2 = null();		HX_STACK_VAR(_g2,"_g2");
				HX_STACK_LINE(3590)
				toi->s1 = _g2;
				HX_STACK_LINE(3590)
				toi->arbiter = null();
			}
		}
		HX_STACK_LINE(3592)
		bool kin = (bool((b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC)) || bool((b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC)));		HX_STACK_VAR(kin,"kin");
		HX_STACK_LINE(3593)
		if (((bool(stat) && bool(!(kin))))){
			HX_STACK_LINE(3594)
			if ((!(((s1->body->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))))){
				HX_STACK_LINE(3595)
				toi->s2 = s1;
				HX_STACK_LINE(3596)
				toi->s1 = s2;
			}
			else{
				HX_STACK_LINE(3599)
				toi->s1 = s1;
				HX_STACK_LINE(3600)
				toi->s2 = s2;
			}
			HX_STACK_LINE(3602)
			toi->kinematic = false;
			HX_STACK_LINE(3603)
			::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,this->pre_dt,(int)0,::nape::Config_obj::collisionSlopCCD);
		}
		else{
			HX_STACK_LINE(3606)
			toi->s1 = s1;
			HX_STACK_LINE(3607)
			toi->s2 = s2;
			HX_STACK_LINE(3608)
			toi->kinematic = kin;
			HX_STACK_LINE(3609)
			if (((bool(toi->s1->body->sweepFrozen) || bool(toi->s2->body->sweepFrozen)))){
				HX_STACK_LINE(3610)
				if ((toi->s1->body->sweepFrozen)){
					HX_STACK_LINE(3611)
					::zpp_nape::shape::ZPP_Shape tmp = toi->s1;		HX_STACK_VAR(tmp,"tmp");
					HX_STACK_LINE(3612)
					toi->s1 = toi->s2;
					HX_STACK_LINE(3613)
					toi->s2 = tmp;
					HX_STACK_LINE(3614)
					toi->frozen1 = false;
					HX_STACK_LINE(3615)
					toi->frozen2 = true;
				}
				HX_STACK_LINE(3617)
				::zpp_nape::geom::ZPP_SweepDistance_obj::staticSweep(toi,this->pre_dt,(int)0,::nape::Config_obj::collisionSlopCCD);
			}
			else{
				HX_STACK_LINE(3620)
				::zpp_nape::geom::ZPP_SweepDistance_obj::dynamicSweep(toi,this->pre_dt,(int)0,::nape::Config_obj::collisionSlopCCD,null());
			}
		}
		HX_STACK_LINE(3623)
		if (((bool((bool(stat) && bool((toi->toi < (int)0)))) || bool(toi->failed)))){
			HX_STACK_LINE(3625)
			::zpp_nape::geom::ZPP_ToiEvent o = toi;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(3635)
			o->next = ::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool;
			HX_STACK_LINE(3636)
			::zpp_nape::geom::ZPP_ToiEvent_obj::zpp_pool = o;
		}
		else{
			HX_STACK_LINE(3643)
			this->toiEvents->add(toi);
			HX_STACK_LINE(3644)
			toi->frozen1 = toi->s1->body->sweepFrozen;
			HX_STACK_LINE(3645)
			toi->frozen2 = toi->s2->body->sweepFrozen;
			HX_STACK_LINE(3646)
			if (((in_arb != null()))){
				HX_STACK_LINE(3646)
				toi->arbiter = in_arb->colarb;
			}
			else{
				HX_STACK_LINE(3646)
				toi->arbiter = null();
			}
		}
	}
	HX_STACK_LINE(3649)
	return in_arb;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,continuousEvent,return )

Void ZPP_Space_obj::bodyCbWake( ::zpp_nape::phys::ZPP_Body b){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodyCbWake",0x1bbe819b,"zpp_nape.space.ZPP_Space.bodyCbWake","zpp_nape/space/Space.hx",3652,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(b,"b")
		HX_STACK_LINE(3652)
		if (((bool((b->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool((b->cbSet != null()))))){
			HX_STACK_LINE(3653)
			if ((this->midstep)){
				HX_STACK_LINE(3655)
				::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite = b->cbSet->bodylisteners->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3656)
				while((true)){
					HX_STACK_LINE(3656)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(3656)
						break;
					}
					HX_STACK_LINE(3657)
					::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(3658)
					{
						HX_STACK_LINE(3659)
						if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE))){
							HX_STACK_LINE(3660)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3661)
							continue;
						}
						HX_STACK_LINE(3663)
						::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
						HX_STACK_LINE(3664)
						cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;
						HX_STACK_LINE(3665)
						cb->body = b;
					}
					HX_STACK_LINE(3667)
					cx_ite = cx_ite->next;
				}
			}
			else{
				HX_STACK_LINE(3671)
				b->component->woken = true;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodyCbWake,(void))

Void ZPP_Space_obj::bodyCbSleep( ::zpp_nape::phys::ZPP_Body b){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","bodyCbSleep",0xe4995fc0,"zpp_nape.space.ZPP_Space.bodyCbSleep","zpp_nape/space/Space.hx",3675,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(b,"b")
		HX_STACK_LINE(3675)
		if (((bool((b->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool((b->cbSet != null()))))){
			HX_STACK_LINE(3677)
			::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite = b->cbSet->bodylisteners->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3678)
			while((true)){
				HX_STACK_LINE(3678)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3678)
					break;
				}
				HX_STACK_LINE(3679)
				::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3680)
				{
					HX_STACK_LINE(3681)
					if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_SLEEP))){
						HX_STACK_LINE(3682)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(3683)
						continue;
					}
					HX_STACK_LINE(3685)
					::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
					HX_STACK_LINE(3686)
					cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_SLEEP;
					HX_STACK_LINE(3687)
					cb->body = b;
				}
				HX_STACK_LINE(3689)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,bodyCbSleep,(void))

Void ZPP_Space_obj::constraintCbWake( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","constraintCbWake",0x06582216,"zpp_nape.space.ZPP_Space.constraintCbWake","zpp_nape/space/Space.hx",3695,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(con,"con")
		HX_STACK_LINE(3695)
		if (((con->cbSet != null()))){
			HX_STACK_LINE(3696)
			if ((this->midstep)){
				HX_STACK_LINE(3698)
				::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = con->cbSet->conlisteners->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3699)
				while((true)){
					HX_STACK_LINE(3699)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(3699)
						break;
					}
					HX_STACK_LINE(3700)
					::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
					HX_STACK_LINE(3701)
					{
						HX_STACK_LINE(3702)
						if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE))){
							HX_STACK_LINE(3703)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3704)
							continue;
						}
						HX_STACK_LINE(3706)
						::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
						HX_STACK_LINE(3707)
						cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;
						HX_STACK_LINE(3708)
						cb->constraint = con;
					}
					HX_STACK_LINE(3710)
					cx_ite = cx_ite->next;
				}
			}
			else{
				HX_STACK_LINE(3714)
				con->component->woken = true;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraintCbWake,(void))

Void ZPP_Space_obj::constraintCbSleep( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","constraintCbSleep",0x406c2ae5,"zpp_nape.space.ZPP_Space.constraintCbSleep","zpp_nape/space/Space.hx",3718,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(con,"con")
		HX_STACK_LINE(3718)
		if (((con->cbSet != null()))){
			HX_STACK_LINE(3720)
			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = con->cbSet->conlisteners->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3721)
			while((true)){
				HX_STACK_LINE(3721)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3721)
					break;
				}
				HX_STACK_LINE(3722)
				::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3723)
				{
					HX_STACK_LINE(3724)
					if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_SLEEP))){
						HX_STACK_LINE(3725)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(3726)
						continue;
					}
					HX_STACK_LINE(3728)
					::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
					HX_STACK_LINE(3729)
					cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_SLEEP;
					HX_STACK_LINE(3730)
					cb->constraint = con;
				}
				HX_STACK_LINE(3732)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraintCbSleep,(void))

Void ZPP_Space_obj::constraintCbBreak( ::zpp_nape::constraint::ZPP_Constraint con){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","constraintCbBreak",0x7a93928d,"zpp_nape.space.ZPP_Space.constraintCbBreak","zpp_nape/space/Space.hx",3738,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(con,"con")
		HX_STACK_LINE(3738)
		if (((con->cbSet != null()))){
			HX_STACK_LINE(3740)
			::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite = con->cbSet->conlisteners->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3741)
			while((true)){
				HX_STACK_LINE(3741)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3741)
					break;
				}
				HX_STACK_LINE(3742)
				::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3743)
				{
					HX_STACK_LINE(3744)
					if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_BREAK))){
						HX_STACK_LINE(3745)
						cx_ite = cx_ite->next;
						HX_STACK_LINE(3746)
						continue;
					}
					HX_STACK_LINE(3748)
					::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
					HX_STACK_LINE(3749)
					cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_BREAK;
					HX_STACK_LINE(3750)
					cb->constraint = con;
				}
				HX_STACK_LINE(3752)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,constraintCbBreak,(void))

Void ZPP_Space_obj::nullListenerType( ::zpp_nape::callbacks::ZPP_CbSet cb1,::zpp_nape::callbacks::ZPP_CbSet cb2){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","nullListenerType",0x3dedf1eb,"zpp_nape.space.ZPP_Space.nullListenerType","zpp_nape/space/Space.hx",3757,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(cb1,"cb1")
		HX_STACK_ARG(cb2,"cb2")
		HX_STACK_LINE(3758)
		::zpp_nape::util::ZNPList_ZPP_Interactor stack = ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__new();		HX_STACK_VAR(stack,"stack");
		HX_STACK_LINE(3759)
		{
			HX_STACK_LINE(3760)
			::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = cb1->interactors->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3761)
			while((true)){
				HX_STACK_LINE(3761)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3761)
					break;
				}
				HX_STACK_LINE(3762)
				::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3763)
				stack->add(i);
				HX_STACK_LINE(3764)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3767)
		if (((cb1 != cb2))){
			HX_STACK_LINE(3768)
			::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = cb2->interactors->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3769)
			while((true)){
				HX_STACK_LINE(3769)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3769)
					break;
				}
				HX_STACK_LINE(3770)
				::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3771)
				stack->add(i);
				HX_STACK_LINE(3772)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3775)
		while((true)){
			HX_STACK_LINE(3775)
			if ((!((!(((stack->head == null()))))))){
				HX_STACK_LINE(3775)
				break;
			}
			HX_STACK_LINE(3776)
			::zpp_nape::phys::ZPP_Interactor intx = stack->pop_unsafe();		HX_STACK_VAR(intx,"intx");
			HX_STACK_LINE(3777)
			if (((intx->icompound != null()))){
				HX_STACK_LINE(3778)
				::zpp_nape::phys::ZPP_Compound comp = intx->icompound;		HX_STACK_VAR(comp,"comp");
				HX_STACK_LINE(3779)
				{
					HX_STACK_LINE(3780)
					::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3781)
					while((true)){
						HX_STACK_LINE(3781)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(3781)
							break;
						}
						HX_STACK_LINE(3782)
						::zpp_nape::phys::ZPP_Body i = cx_ite->elt;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(3783)
						stack->add(i);
						HX_STACK_LINE(3784)
						cx_ite = cx_ite->next;
					}
				}
				HX_STACK_LINE(3787)
				{
					HX_STACK_LINE(3788)
					::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = comp->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3789)
					while((true)){
						HX_STACK_LINE(3789)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(3789)
							break;
						}
						HX_STACK_LINE(3790)
						::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(3791)
						stack->add(i);
						HX_STACK_LINE(3792)
						cx_ite = cx_ite->next;
					}
				}
			}
			else{
				HX_STACK_LINE(3797)
				::zpp_nape::phys::ZPP_Body xbody;		HX_STACK_VAR(xbody,"xbody");
				HX_STACK_LINE(3797)
				if (((intx->ibody != null()))){
					HX_STACK_LINE(3797)
					xbody = intx->ibody;
				}
				else{
					HX_STACK_LINE(3797)
					xbody = intx->ishape->body;
				}
				HX_STACK_LINE(3798)
				::zpp_nape::shape::ZPP_Shape xshp;		HX_STACK_VAR(xshp,"xshp");
				HX_STACK_LINE(3798)
				if (((intx->ishape != null()))){
					HX_STACK_LINE(3798)
					xshp = intx->ishape;
				}
				else{
					HX_STACK_LINE(3798)
					xshp = null();
				}
				HX_STACK_LINE(3799)
				{
					HX_STACK_LINE(3800)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = xbody->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3801)
					while((true)){
						HX_STACK_LINE(3801)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(3801)
							break;
						}
						HX_STACK_LINE(3802)
						::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
						HX_STACK_LINE(3803)
						{
							HX_STACK_LINE(3804)
							if (((xarb->present == (int)0))){
								HX_STACK_LINE(3805)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(3806)
								continue;
							}
							HX_STACK_LINE(3808)
							if (((bool((xshp != null())) && bool(!(((bool((xarb->ws1 == xshp)) || bool((xarb->ws2 == xshp))))))))){
								HX_STACK_LINE(3809)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(3810)
								continue;
							}
							HX_STACK_LINE(3812)
							this->MRCA_chains(xarb->ws1,xarb->ws2);
							HX_STACK_LINE(3813)
							{
								HX_STACK_LINE(3814)
								::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca1->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(3815)
								while((true)){
									HX_STACK_LINE(3815)
									if ((!(((cx_ite1 != null()))))){
										HX_STACK_LINE(3815)
										break;
									}
									HX_STACK_LINE(3816)
									::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
									HX_STACK_LINE(3817)
									{
										HX_STACK_LINE(3818)
										if (((bool((i1->cbSet != cb1)) && bool((i1->cbSet != cb2))))){
											HX_STACK_LINE(3819)
											cx_ite1 = cx_ite1->next;
											HX_STACK_LINE(3820)
											continue;
										}
										HX_STACK_LINE(3822)
										{
											HX_STACK_LINE(3823)
											::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = this->mrca2->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
											HX_STACK_LINE(3824)
											while((true)){
												HX_STACK_LINE(3824)
												if ((!(((cx_ite2 != null()))))){
													HX_STACK_LINE(3824)
													break;
												}
												HX_STACK_LINE(3825)
												::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
												HX_STACK_LINE(3826)
												{
													HX_STACK_LINE(3827)
													if (((bool((bool((i1->cbSet == cb1)) && bool((i2->cbSet != cb2)))) || bool((bool((i1->cbSet == cb2)) && bool((i2->cbSet != cb1))))))){
														HX_STACK_LINE(3828)
														cx_ite2 = cx_ite2->next;
														HX_STACK_LINE(3829)
														continue;
													}
													HX_STACK_LINE(3831)
													::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(callbackset,"callbackset");
													HX_STACK_LINE(3832)
													if (((callbackset != null()))){
														HX_STACK_LINE(3834)
														while((true)){
															HX_STACK_LINE(3834)
															if ((!((!(((callbackset->arbiters->head == null()))))))){
																HX_STACK_LINE(3834)
																break;
															}
															HX_STACK_LINE(3835)
															::zpp_nape::dynamics::ZPP_Arbiter arb = callbackset->arbiters->pop_unsafe();		HX_STACK_VAR(arb,"arb");
															HX_STACK_LINE(3836)
															{
																HX_STACK_LINE(3837)
																(arb->present)--;
																HX_STACK_LINE(3838)
																{
																}
															}
														}
														HX_STACK_LINE(3849)
														this->remove_callbackset(callbackset);
													}
												}
												HX_STACK_LINE(3852)
												cx_ite2 = cx_ite2->next;
											}
										}
									}
									HX_STACK_LINE(3856)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
						HX_STACK_LINE(3860)
						cx_ite = cx_ite->next;
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,nullListenerType,(void))

Void ZPP_Space_obj::nullInteractorType( ::zpp_nape::phys::ZPP_Interactor intx,::zpp_nape::phys::ZPP_Interactor me){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","nullInteractorType",0x73de2f90,"zpp_nape.space.ZPP_Space.nullInteractorType","zpp_nape/space/Space.hx",3866,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(intx,"intx")
		HX_STACK_ARG(me,"me")
		HX_STACK_LINE(3867)
		if (((me == null()))){
			HX_STACK_LINE(3867)
			me = intx;
		}
		HX_STACK_LINE(3868)
		if (((intx->icompound != null()))){
			HX_STACK_LINE(3869)
			::zpp_nape::phys::ZPP_Compound comp = intx->icompound;		HX_STACK_VAR(comp,"comp");
			HX_STACK_LINE(3870)
			{
				HX_STACK_LINE(3871)
				::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3872)
				while((true)){
					HX_STACK_LINE(3872)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(3872)
						break;
					}
					HX_STACK_LINE(3873)
					::zpp_nape::phys::ZPP_Body body = cx_ite->elt;		HX_STACK_VAR(body,"body");
					HX_STACK_LINE(3874)
					this->nullInteractorType(body,me);
					HX_STACK_LINE(3875)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(3878)
			{
				HX_STACK_LINE(3879)
				::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = comp->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3880)
				while((true)){
					HX_STACK_LINE(3880)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(3880)
						break;
					}
					HX_STACK_LINE(3881)
					::zpp_nape::phys::ZPP_Compound comp1 = cx_ite->elt;		HX_STACK_VAR(comp1,"comp1");
					HX_STACK_LINE(3882)
					this->nullInteractorType(comp1,me);
					HX_STACK_LINE(3883)
					cx_ite = cx_ite->next;
				}
			}
		}
		else{
			HX_STACK_LINE(3888)
			::zpp_nape::phys::ZPP_Body xbody;		HX_STACK_VAR(xbody,"xbody");
			HX_STACK_LINE(3888)
			if (((intx->ibody != null()))){
				HX_STACK_LINE(3888)
				xbody = intx->ibody;
			}
			else{
				HX_STACK_LINE(3888)
				xbody = intx->ishape->body;
			}
			HX_STACK_LINE(3889)
			::zpp_nape::shape::ZPP_Shape xshp;		HX_STACK_VAR(xshp,"xshp");
			HX_STACK_LINE(3889)
			if (((intx->ishape != null()))){
				HX_STACK_LINE(3889)
				xshp = intx->ishape;
			}
			else{
				HX_STACK_LINE(3889)
				xshp = null();
			}
			HX_STACK_LINE(3890)
			{
				HX_STACK_LINE(3891)
				::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = xbody->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(3892)
				while((true)){
					HX_STACK_LINE(3892)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(3892)
						break;
					}
					HX_STACK_LINE(3893)
					::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
					HX_STACK_LINE(3894)
					{
						HX_STACK_LINE(3895)
						if (((xarb->present == (int)0))){
							HX_STACK_LINE(3896)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3897)
							continue;
						}
						HX_STACK_LINE(3899)
						if (((bool((xshp != null())) && bool(!(((bool((xarb->ws1 == xshp)) || bool((xarb->ws2 == xshp))))))))){
							HX_STACK_LINE(3900)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(3901)
							continue;
						}
						HX_STACK_LINE(3903)
						this->MRCA_chains(xarb->ws1,xarb->ws2);
						HX_STACK_LINE(3904)
						{
							HX_STACK_LINE(3905)
							::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca1->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(3906)
							while((true)){
								HX_STACK_LINE(3906)
								if ((!(((cx_ite1 != null()))))){
									HX_STACK_LINE(3906)
									break;
								}
								HX_STACK_LINE(3907)
								::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
								HX_STACK_LINE(3909)
								{
									HX_STACK_LINE(3910)
									::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = this->mrca2->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
									HX_STACK_LINE(3911)
									while((true)){
										HX_STACK_LINE(3911)
										if ((!(((cx_ite2 != null()))))){
											HX_STACK_LINE(3911)
											break;
										}
										HX_STACK_LINE(3912)
										::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
										HX_STACK_LINE(3913)
										{
											HX_STACK_LINE(3914)
											if (((bool((i1 != me)) && bool((i2 != me))))){
												HX_STACK_LINE(3915)
												cx_ite2 = cx_ite2->next;
												HX_STACK_LINE(3916)
												continue;
											}
											HX_STACK_LINE(3918)
											::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(callbackset,"callbackset");
											HX_STACK_LINE(3919)
											if (((callbackset != null()))){
												HX_STACK_LINE(3920)
												(xarb->present)--;
												HX_STACK_LINE(3929)
												callbackset->remove_arb(xarb);
												HX_STACK_LINE(3930)
												if (((callbackset->arbiters->head == null()))){
													HX_STACK_LINE(3931)
													this->remove_callbackset(callbackset);
												}
											}
										}
										HX_STACK_LINE(3935)
										cx_ite2 = cx_ite2->next;
									}
								}
								HX_STACK_LINE(3939)
								cx_ite1 = cx_ite1->next;
							}
						}
					}
					HX_STACK_LINE(3943)
					cx_ite = cx_ite->next;
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,nullInteractorType,(void))

Void ZPP_Space_obj::freshListenerType( ::zpp_nape::callbacks::ZPP_CbSet cb1,::zpp_nape::callbacks::ZPP_CbSet cb2){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","freshListenerType",0xf4ea40a6,"zpp_nape.space.ZPP_Space.freshListenerType","zpp_nape/space/Space.hx",3948,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(cb1,"cb1")
		HX_STACK_ARG(cb2,"cb2")
		HX_STACK_LINE(3949)
		::zpp_nape::util::ZNPList_ZPP_Interactor stack = ::zpp_nape::util::ZNPList_ZPP_Interactor_obj::__new();		HX_STACK_VAR(stack,"stack");
		HX_STACK_LINE(3950)
		{
			HX_STACK_LINE(3951)
			::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = cb1->interactors->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3952)
			while((true)){
				HX_STACK_LINE(3952)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3952)
					break;
				}
				HX_STACK_LINE(3953)
				::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3954)
				stack->add(i);
				HX_STACK_LINE(3955)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3958)
		if (((cb1 != cb2))){
			HX_STACK_LINE(3959)
			::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = cb2->interactors->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(3960)
			while((true)){
				HX_STACK_LINE(3960)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(3960)
					break;
				}
				HX_STACK_LINE(3961)
				::zpp_nape::phys::ZPP_Interactor i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(3962)
				stack->add(i);
				HX_STACK_LINE(3963)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(3966)
		while((true)){
			HX_STACK_LINE(3966)
			if ((!((!(((stack->head == null()))))))){
				HX_STACK_LINE(3966)
				break;
			}
			HX_STACK_LINE(3967)
			::zpp_nape::phys::ZPP_Interactor intx = stack->pop_unsafe();		HX_STACK_VAR(intx,"intx");
			HX_STACK_LINE(3968)
			if (((intx->icompound != null()))){
				HX_STACK_LINE(3969)
				::zpp_nape::phys::ZPP_Compound comp = intx->icompound;		HX_STACK_VAR(comp,"comp");
				HX_STACK_LINE(3970)
				{
					HX_STACK_LINE(3971)
					::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3972)
					while((true)){
						HX_STACK_LINE(3972)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(3972)
							break;
						}
						HX_STACK_LINE(3973)
						::zpp_nape::phys::ZPP_Body i = cx_ite->elt;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(3974)
						stack->add(i);
						HX_STACK_LINE(3975)
						cx_ite = cx_ite->next;
					}
				}
				HX_STACK_LINE(3978)
				{
					HX_STACK_LINE(3979)
					::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = comp->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3980)
					while((true)){
						HX_STACK_LINE(3980)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(3980)
							break;
						}
						HX_STACK_LINE(3981)
						::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
						HX_STACK_LINE(3982)
						stack->add(i);
						HX_STACK_LINE(3983)
						cx_ite = cx_ite->next;
					}
				}
			}
			else{
				HX_STACK_LINE(3988)
				::zpp_nape::phys::ZPP_Body xbody;		HX_STACK_VAR(xbody,"xbody");
				HX_STACK_LINE(3988)
				if (((intx->ibody != null()))){
					HX_STACK_LINE(3988)
					xbody = intx->ibody;
				}
				else{
					HX_STACK_LINE(3988)
					xbody = intx->ishape->body;
				}
				HX_STACK_LINE(3989)
				::zpp_nape::shape::ZPP_Shape xshp;		HX_STACK_VAR(xshp,"xshp");
				HX_STACK_LINE(3989)
				if (((intx->ishape != null()))){
					HX_STACK_LINE(3989)
					xshp = intx->ishape;
				}
				else{
					HX_STACK_LINE(3989)
					xshp = null();
				}
				HX_STACK_LINE(3990)
				{
					HX_STACK_LINE(3991)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = xbody->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(3992)
					while((true)){
						HX_STACK_LINE(3992)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(3992)
							break;
						}
						HX_STACK_LINE(3993)
						::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
						HX_STACK_LINE(3994)
						{
							HX_STACK_LINE(3995)
							if ((!(xarb->presentable))){
								HX_STACK_LINE(3996)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(3997)
								continue;
							}
							HX_STACK_LINE(3999)
							if (((bool((xshp != null())) && bool(!(((bool((xarb->ws1 == xshp)) || bool((xarb->ws2 == xshp))))))))){
								HX_STACK_LINE(4000)
								cx_ite = cx_ite->next;
								HX_STACK_LINE(4001)
								continue;
							}
							HX_STACK_LINE(4003)
							this->MRCA_chains(xarb->ws1,xarb->ws2);
							HX_STACK_LINE(4004)
							{
								HX_STACK_LINE(4005)
								::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca1->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(4006)
								while((true)){
									HX_STACK_LINE(4006)
									if ((!(((cx_ite1 != null()))))){
										HX_STACK_LINE(4006)
										break;
									}
									HX_STACK_LINE(4007)
									::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
									HX_STACK_LINE(4008)
									{
										HX_STACK_LINE(4009)
										if (((bool((i1->cbSet != cb1)) && bool((i1->cbSet != cb2))))){
											HX_STACK_LINE(4010)
											cx_ite1 = cx_ite1->next;
											HX_STACK_LINE(4011)
											continue;
										}
										HX_STACK_LINE(4013)
										{
											HX_STACK_LINE(4014)
											::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = this->mrca2->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
											HX_STACK_LINE(4015)
											while((true)){
												HX_STACK_LINE(4015)
												if ((!(((cx_ite2 != null()))))){
													HX_STACK_LINE(4015)
													break;
												}
												HX_STACK_LINE(4016)
												::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
												HX_STACK_LINE(4017)
												{
													HX_STACK_LINE(4018)
													if (((bool((bool((i1->cbSet == cb1)) && bool((i2->cbSet != cb2)))) || bool((bool((i1->cbSet == cb2)) && bool((i2->cbSet != cb1))))))){
														HX_STACK_LINE(4019)
														cx_ite2 = cx_ite2->next;
														HX_STACK_LINE(4020)
														continue;
													}
													HX_STACK_LINE(4022)
													::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(callbackset,"callbackset");
													HX_STACK_LINE(4023)
													if (((callbackset == null()))){
														HX_STACK_LINE(4024)
														::zpp_nape::space::ZPP_CallbackSet _g = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);		HX_STACK_VAR(_g,"_g");
														HX_STACK_LINE(4024)
														callbackset = _g;
														HX_STACK_LINE(4025)
														this->add_callbackset(callbackset);
													}
													struct _Function_12_1{
														inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &callbackset,::zpp_nape::dynamics::ZPP_Arbiter &xarb){
															HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",4027,0x2b65ed03)
															{
																HX_STACK_LINE(4027)
																bool ret;		HX_STACK_VAR(ret,"ret");
																HX_STACK_LINE(4027)
																{
																	HX_STACK_LINE(4027)
																	ret = false;
																	HX_STACK_LINE(4027)
																	{
																		HX_STACK_LINE(4027)
																		::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite3 = callbackset->arbiters->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
																		HX_STACK_LINE(4027)
																		while((true)){
																			HX_STACK_LINE(4027)
																			if ((!(((cx_ite3 != null()))))){
																				HX_STACK_LINE(4027)
																				break;
																			}
																			HX_STACK_LINE(4027)
																			::zpp_nape::dynamics::ZPP_Arbiter npite = cx_ite3->elt;		HX_STACK_VAR(npite,"npite");
																			HX_STACK_LINE(4027)
																			if (((npite == xarb))){
																				HX_STACK_LINE(4027)
																				ret = true;
																				HX_STACK_LINE(4027)
																				break;
																			}
																			HX_STACK_LINE(4027)
																			cx_ite3 = cx_ite3->next;
																		}
																	}
																}
																HX_STACK_LINE(4027)
																return ret;
															}
															return null();
														}
													};
													struct _Function_12_2{
														inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &callbackset,::zpp_nape::dynamics::ZPP_Arbiter &xarb){
															HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",4027,0x2b65ed03)
															{
																HX_STACK_LINE(4027)
																{
																	HX_STACK_LINE(4027)
																	::zpp_nape::util::ZNPList_ZPP_Arbiter _this = callbackset->arbiters;		HX_STACK_VAR(_this,"_this");
																	HX_STACK_LINE(4027)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter temp;		HX_STACK_VAR(temp,"temp");
																	HX_STACK_LINE(4027)
																	{
																		HX_STACK_LINE(4027)
																		::zpp_nape::util::ZNPNode_ZPP_Arbiter ret;		HX_STACK_VAR(ret,"ret");
																		HX_STACK_LINE(4027)
																		{
																			HX_STACK_LINE(4027)
																			if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
																				HX_STACK_LINE(4027)
																				::zpp_nape::util::ZNPNode_ZPP_Arbiter _g1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(_g1,"_g1");
																				HX_STACK_LINE(4027)
																				ret = _g1;
																			}
																			else{
																				HX_STACK_LINE(4027)
																				ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
																				HX_STACK_LINE(4027)
																				::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
																				HX_STACK_LINE(4027)
																				ret->next = null();
																			}
																			HX_STACK_LINE(4027)
																			Dynamic();
																		}
																		HX_STACK_LINE(4027)
																		ret->elt = xarb;
																		HX_STACK_LINE(4027)
																		temp = ret;
																	}
																	HX_STACK_LINE(4027)
																	temp->next = _this->head;
																	HX_STACK_LINE(4027)
																	_this->head = temp;
																	HX_STACK_LINE(4027)
																	_this->modified = true;
																	HX_STACK_LINE(4027)
																	(_this->length)++;
																	HX_STACK_LINE(4027)
																	xarb;
																}
																HX_STACK_LINE(4027)
																return true;
															}
															return null();
														}
													};
													HX_STACK_LINE(4027)
													if (((  ((!(_Function_12_1::Block(callbackset,xarb)))) ? bool(_Function_12_2::Block(callbackset,xarb)) : bool(false) ))){
														HX_STACK_LINE(4028)
														(xarb->present)++;
													}
												}
												HX_STACK_LINE(4031)
												cx_ite2 = cx_ite2->next;
											}
										}
									}
									HX_STACK_LINE(4035)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
						HX_STACK_LINE(4039)
						cx_ite = cx_ite->next;
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,freshListenerType,(void))

Void ZPP_Space_obj::freshInteractorType( ::zpp_nape::phys::ZPP_Interactor intx,::zpp_nape::phys::ZPP_Interactor me){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","freshInteractorType",0x1d97e30b,"zpp_nape.space.ZPP_Space.freshInteractorType","zpp_nape/space/Space.hx",4045,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(intx,"intx")
		HX_STACK_ARG(me,"me")
		HX_STACK_LINE(4046)
		if (((me == null()))){
			HX_STACK_LINE(4046)
			me = intx;
		}
		HX_STACK_LINE(4047)
		if (((intx->icompound != null()))){
			HX_STACK_LINE(4048)
			::zpp_nape::phys::ZPP_Compound comp = intx->icompound;		HX_STACK_VAR(comp,"comp");
			HX_STACK_LINE(4049)
			{
				HX_STACK_LINE(4050)
				::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = comp->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4051)
				while((true)){
					HX_STACK_LINE(4051)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(4051)
						break;
					}
					HX_STACK_LINE(4052)
					::zpp_nape::phys::ZPP_Body body = cx_ite->elt;		HX_STACK_VAR(body,"body");
					HX_STACK_LINE(4053)
					this->freshInteractorType(body,me);
					HX_STACK_LINE(4054)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(4057)
			{
				HX_STACK_LINE(4058)
				::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = comp->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4059)
				while((true)){
					HX_STACK_LINE(4059)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(4059)
						break;
					}
					HX_STACK_LINE(4060)
					::zpp_nape::phys::ZPP_Compound comp1 = cx_ite->elt;		HX_STACK_VAR(comp1,"comp1");
					HX_STACK_LINE(4061)
					this->freshInteractorType(comp1,me);
					HX_STACK_LINE(4062)
					cx_ite = cx_ite->next;
				}
			}
		}
		else{
			HX_STACK_LINE(4067)
			::zpp_nape::phys::ZPP_Body xbody;		HX_STACK_VAR(xbody,"xbody");
			HX_STACK_LINE(4067)
			if (((intx->ibody != null()))){
				HX_STACK_LINE(4067)
				xbody = intx->ibody;
			}
			else{
				HX_STACK_LINE(4067)
				xbody = intx->ishape->body;
			}
			HX_STACK_LINE(4068)
			::zpp_nape::shape::ZPP_Shape xshp;		HX_STACK_VAR(xshp,"xshp");
			HX_STACK_LINE(4068)
			if (((intx->ishape != null()))){
				HX_STACK_LINE(4068)
				xshp = intx->ishape;
			}
			else{
				HX_STACK_LINE(4068)
				xshp = null();
			}
			HX_STACK_LINE(4069)
			{
				HX_STACK_LINE(4070)
				::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = xbody->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4071)
				while((true)){
					HX_STACK_LINE(4071)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(4071)
						break;
					}
					HX_STACK_LINE(4072)
					::zpp_nape::dynamics::ZPP_Arbiter xarb = cx_ite->elt;		HX_STACK_VAR(xarb,"xarb");
					HX_STACK_LINE(4073)
					{
						HX_STACK_LINE(4074)
						if ((!(xarb->presentable))){
							HX_STACK_LINE(4075)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(4076)
							continue;
						}
						HX_STACK_LINE(4078)
						if (((bool((xshp != null())) && bool(!(((bool((xarb->ws1 == xshp)) || bool((xarb->ws2 == xshp))))))))){
							HX_STACK_LINE(4079)
							cx_ite = cx_ite->next;
							HX_STACK_LINE(4080)
							continue;
						}
						HX_STACK_LINE(4082)
						this->MRCA_chains(xarb->ws1,xarb->ws2);
						HX_STACK_LINE(4083)
						{
							HX_STACK_LINE(4084)
							::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca1->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(4085)
							while((true)){
								HX_STACK_LINE(4085)
								if ((!(((cx_ite1 != null()))))){
									HX_STACK_LINE(4085)
									break;
								}
								HX_STACK_LINE(4086)
								::zpp_nape::phys::ZPP_Interactor i1 = cx_ite1->elt;		HX_STACK_VAR(i1,"i1");
								HX_STACK_LINE(4088)
								{
									HX_STACK_LINE(4089)
									::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite2 = this->mrca2->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
									HX_STACK_LINE(4090)
									while((true)){
										HX_STACK_LINE(4090)
										if ((!(((cx_ite2 != null()))))){
											HX_STACK_LINE(4090)
											break;
										}
										HX_STACK_LINE(4091)
										::zpp_nape::phys::ZPP_Interactor i2 = cx_ite2->elt;		HX_STACK_VAR(i2,"i2");
										HX_STACK_LINE(4092)
										{
											HX_STACK_LINE(4093)
											if (((bool((i1 != me)) && bool((i2 != me))))){
												HX_STACK_LINE(4094)
												cx_ite2 = cx_ite2->next;
												HX_STACK_LINE(4095)
												continue;
											}
											HX_STACK_LINE(4097)
											::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
											HX_STACK_LINE(4098)
											::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
											HX_STACK_LINE(4107)
											cb1->validate();
											HX_STACK_LINE(4108)
											cb2->validate();
											struct _Function_10_1{
												inline static bool Block( ::zpp_nape::callbacks::ZPP_CbSet &cb2,::zpp_nape::callbacks::ZPP_CbSet &cb1){
													HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",4109,0x2b65ed03)
													{
														HX_STACK_LINE(4109)
														::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(4109)
														{
															HX_STACK_LINE(4109)
															::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
															HX_STACK_LINE(4109)
															::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
															HX_STACK_LINE(4109)
															if (((cb1->cbpairs->length < cb2->cbpairs->length))){
																HX_STACK_LINE(4109)
																pairs = cb1->cbpairs;
															}
															else{
																HX_STACK_LINE(4109)
																pairs = cb2->cbpairs;
															}
															HX_STACK_LINE(4109)
															{
																HX_STACK_LINE(4109)
																::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite3 = pairs->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
																HX_STACK_LINE(4109)
																while((true)){
																	HX_STACK_LINE(4109)
																	if ((!(((cx_ite3 != null()))))){
																		HX_STACK_LINE(4109)
																		break;
																	}
																	HX_STACK_LINE(4109)
																	::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite3->elt;		HX_STACK_VAR(p,"p");
																	HX_STACK_LINE(4109)
																	if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																		HX_STACK_LINE(4109)
																		ret = p;
																		HX_STACK_LINE(4109)
																		break;
																	}
																	HX_STACK_LINE(4109)
																	cx_ite3 = cx_ite3->next;
																}
															}
															HX_STACK_LINE(4109)
															if (((ret == null()))){
																HX_STACK_LINE(4109)
																::zpp_nape::callbacks::ZPP_CbSetPair _g1;		HX_STACK_VAR(_g1,"_g1");
																HX_STACK_LINE(4109)
																{
																	HX_STACK_LINE(4109)
																	::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(4109)
																	{
																		HX_STACK_LINE(4109)
																		if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																			HX_STACK_LINE(4109)
																			::zpp_nape::callbacks::ZPP_CbSetPair _g = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g,"_g");
																			HX_STACK_LINE(4109)
																			ret1 = _g;
																		}
																		else{
																			HX_STACK_LINE(4109)
																			ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																			HX_STACK_LINE(4109)
																			::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																			HX_STACK_LINE(4109)
																			ret1->next = null();
																		}
																		HX_STACK_LINE(4109)
																		ret1->zip_listeners = true;
																	}
																	HX_STACK_LINE(4109)
																	if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																		HX_STACK_LINE(4109)
																		ret1->a = cb1;
																		HX_STACK_LINE(4109)
																		ret1->b = cb2;
																	}
																	else{
																		HX_STACK_LINE(4109)
																		ret1->a = cb2;
																		HX_STACK_LINE(4109)
																		ret1->b = cb1;
																	}
																	HX_STACK_LINE(4109)
																	_g1 = ret1;
																}
																HX_STACK_LINE(4109)
																ret = _g1;
																HX_STACK_LINE(4109)
																cb1->cbpairs->add(ret);
																HX_STACK_LINE(4109)
																if (((cb2 != cb1))){
																	HX_STACK_LINE(4109)
																	cb2->cbpairs->add(ret);
																}
															}
															HX_STACK_LINE(4109)
															if ((ret->zip_listeners)){
																HX_STACK_LINE(4109)
																ret->zip_listeners = false;
																HX_STACK_LINE(4109)
																ret->__validate();
															}
															HX_STACK_LINE(4109)
															_this = ret;
														}
														HX_STACK_LINE(4109)
														return (_this->listeners->head == null());
													}
													return null();
												}
											};
											HX_STACK_LINE(4109)
											if ((!(_Function_10_1::Block(cb2,cb1)))){
												HX_STACK_LINE(4110)
												::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(callbackset,"callbackset");
												HX_STACK_LINE(4111)
												if (((callbackset == null()))){
													HX_STACK_LINE(4112)
													::zpp_nape::space::ZPP_CallbackSet _g2 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);		HX_STACK_VAR(_g2,"_g2");
													HX_STACK_LINE(4112)
													callbackset = _g2;
													HX_STACK_LINE(4113)
													this->add_callbackset(callbackset);
												}
												struct _Function_11_1{
													inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &callbackset,::zpp_nape::dynamics::ZPP_Arbiter &xarb){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",4115,0x2b65ed03)
														{
															HX_STACK_LINE(4115)
															bool ret;		HX_STACK_VAR(ret,"ret");
															HX_STACK_LINE(4115)
															{
																HX_STACK_LINE(4115)
																ret = false;
																HX_STACK_LINE(4115)
																{
																	HX_STACK_LINE(4115)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite3 = callbackset->arbiters->head;		HX_STACK_VAR(cx_ite3,"cx_ite3");
																	HX_STACK_LINE(4115)
																	while((true)){
																		HX_STACK_LINE(4115)
																		if ((!(((cx_ite3 != null()))))){
																			HX_STACK_LINE(4115)
																			break;
																		}
																		HX_STACK_LINE(4115)
																		::zpp_nape::dynamics::ZPP_Arbiter npite = cx_ite3->elt;		HX_STACK_VAR(npite,"npite");
																		HX_STACK_LINE(4115)
																		if (((npite == xarb))){
																			HX_STACK_LINE(4115)
																			ret = true;
																			HX_STACK_LINE(4115)
																			break;
																		}
																		HX_STACK_LINE(4115)
																		cx_ite3 = cx_ite3->next;
																	}
																}
															}
															HX_STACK_LINE(4115)
															return ret;
														}
														return null();
													}
												};
												struct _Function_11_2{
													inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &callbackset,::zpp_nape::dynamics::ZPP_Arbiter &xarb){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",4115,0x2b65ed03)
														{
															HX_STACK_LINE(4115)
															{
																HX_STACK_LINE(4115)
																::zpp_nape::util::ZNPList_ZPP_Arbiter _this = callbackset->arbiters;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(4115)
																::zpp_nape::util::ZNPNode_ZPP_Arbiter temp;		HX_STACK_VAR(temp,"temp");
																HX_STACK_LINE(4115)
																{
																	HX_STACK_LINE(4115)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter ret;		HX_STACK_VAR(ret,"ret");
																	HX_STACK_LINE(4115)
																	{
																		HX_STACK_LINE(4115)
																		if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
																			HX_STACK_LINE(4115)
																			::zpp_nape::util::ZNPNode_ZPP_Arbiter _g3 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(_g3,"_g3");
																			HX_STACK_LINE(4115)
																			ret = _g3;
																		}
																		else{
																			HX_STACK_LINE(4115)
																			ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
																			HX_STACK_LINE(4115)
																			::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
																			HX_STACK_LINE(4115)
																			ret->next = null();
																		}
																		HX_STACK_LINE(4115)
																		Dynamic();
																	}
																	HX_STACK_LINE(4115)
																	ret->elt = xarb;
																	HX_STACK_LINE(4115)
																	temp = ret;
																}
																HX_STACK_LINE(4115)
																temp->next = _this->head;
																HX_STACK_LINE(4115)
																_this->head = temp;
																HX_STACK_LINE(4115)
																_this->modified = true;
																HX_STACK_LINE(4115)
																(_this->length)++;
																HX_STACK_LINE(4115)
																xarb;
															}
															HX_STACK_LINE(4115)
															return true;
														}
														return null();
													}
												};
												HX_STACK_LINE(4115)
												if (((  ((!(_Function_11_1::Block(callbackset,xarb)))) ? bool(_Function_11_2::Block(callbackset,xarb)) : bool(false) ))){
													HX_STACK_LINE(4116)
													(xarb->present)++;
												}
											}
										}
										HX_STACK_LINE(4120)
										cx_ite2 = cx_ite2->next;
									}
								}
								HX_STACK_LINE(4124)
								cx_ite1 = cx_ite1->next;
							}
						}
					}
					HX_STACK_LINE(4128)
					cx_ite = cx_ite->next;
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,freshInteractorType,(void))

Void ZPP_Space_obj::wakeCompound( ::zpp_nape::phys::ZPP_Compound x){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","wakeCompound",0x17729c25,"zpp_nape.space.ZPP_Space.wakeCompound","zpp_nape/space/Space.hx",4133,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(x,"x")
		HX_STACK_LINE(4134)
		{
			HX_STACK_LINE(4135)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = x->bodies->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4136)
			while((true)){
				HX_STACK_LINE(4136)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(4136)
					break;
				}
				HX_STACK_LINE(4137)
				::zpp_nape::phys::ZPP_Body y = cx_ite->elt;		HX_STACK_VAR(y,"y");
				HX_STACK_LINE(4138)
				{
					HX_STACK_LINE(4139)
					::zpp_nape::phys::ZPP_Body o = y;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(4148)
					if ((!(o->world))){
						HX_STACK_LINE(4157)
						o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
						HX_STACK_LINE(4158)
						if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
							HX_STACK_LINE(4158)
							o->kinematicDelaySleep = true;
						}
						HX_STACK_LINE(4159)
						if ((o->component->sleeping)){
							HX_STACK_LINE(4160)
							this->really_wake(o,false);
						}
					}
				}
				HX_STACK_LINE(4164)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4167)
		{
			HX_STACK_LINE(4168)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = x->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4169)
			while((true)){
				HX_STACK_LINE(4169)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(4169)
					break;
				}
				HX_STACK_LINE(4170)
				::zpp_nape::constraint::ZPP_Constraint i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(4171)
				this->wake_constraint(i,null());
				HX_STACK_LINE(4172)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4175)
		{
			HX_STACK_LINE(4176)
			::zpp_nape::util::ZNPNode_ZPP_Compound cx_ite = x->compounds->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4177)
			while((true)){
				HX_STACK_LINE(4177)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(4177)
					break;
				}
				HX_STACK_LINE(4178)
				::zpp_nape::phys::ZPP_Compound i = cx_ite->elt;		HX_STACK_VAR(i,"i");
				HX_STACK_LINE(4179)
				this->wakeCompound(i);
				HX_STACK_LINE(4180)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,wakeCompound,(void))

Void ZPP_Space_obj::wakeIsland( ::zpp_nape::space::ZPP_Island i){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","wakeIsland",0xe72ff50f,"zpp_nape.space.ZPP_Space.wakeIsland","zpp_nape/space/Space.hx",4184,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(i,"i")
		HX_STACK_LINE(4193)
		while((true)){
			HX_STACK_LINE(4193)
			if ((!((!(((i->comps->head == null()))))))){
				HX_STACK_LINE(4193)
				break;
			}
			HX_STACK_LINE(4194)
			::zpp_nape::space::ZPP_Component c = i->comps->pop_unsafe();		HX_STACK_VAR(c,"c");
			HX_STACK_LINE(4203)
			c->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
			HX_STACK_LINE(4204)
			if ((c->isBody)){
				HX_STACK_LINE(4205)
				::zpp_nape::phys::ZPP_Body b = c->body;		HX_STACK_VAR(b,"b");
				HX_STACK_LINE(4222)
				this->live->add(b);
				HX_STACK_LINE(4223)
				{
					HX_STACK_LINE(4224)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = b->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(4225)
					while((true)){
						HX_STACK_LINE(4225)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(4225)
							break;
						}
						HX_STACK_LINE(4226)
						::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
						HX_STACK_LINE(4228)
						if ((arb->sleeping)){
							HX_STACK_LINE(4229)
							arb->sleeping = false;
							HX_STACK_LINE(4230)
							hx::AddEq(arb->up_stamp,(this->stamp - arb->sleep_stamp));
							HX_STACK_LINE(4231)
							if (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL))){
								HX_STACK_LINE(4232)
								::zpp_nape::dynamics::ZPP_ColArbiter carb = arb->colarb;		HX_STACK_VAR(carb,"carb");
								HX_STACK_LINE(4233)
								if ((carb->stat)){
									HX_STACK_LINE(4233)
									::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = this->c_arbiters_true;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4233)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4233)
									{
										HX_STACK_LINE(4233)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(4233)
										{
											HX_STACK_LINE(4233)
											if (((::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool == null()))){
												HX_STACK_LINE(4233)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter _g = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(_g,"_g");
												HX_STACK_LINE(4233)
												ret = _g;
											}
											else{
												HX_STACK_LINE(4233)
												ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
												HX_STACK_LINE(4233)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
												HX_STACK_LINE(4233)
												ret->next = null();
											}
											HX_STACK_LINE(4233)
											Dynamic();
										}
										HX_STACK_LINE(4233)
										ret->elt = carb;
										HX_STACK_LINE(4233)
										temp = ret;
									}
									HX_STACK_LINE(4233)
									temp->next = _this->head;
									HX_STACK_LINE(4233)
									_this->head = temp;
									HX_STACK_LINE(4233)
									_this->modified = true;
									HX_STACK_LINE(4233)
									(_this->length)++;
									HX_STACK_LINE(4233)
									carb;
								}
								else{
									HX_STACK_LINE(4234)
									::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = this->c_arbiters_false;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4234)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4234)
									{
										HX_STACK_LINE(4234)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(4234)
										{
											HX_STACK_LINE(4234)
											if (((::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool == null()))){
												HX_STACK_LINE(4234)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter _g1 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(_g1,"_g1");
												HX_STACK_LINE(4234)
												ret = _g1;
											}
											else{
												HX_STACK_LINE(4234)
												ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
												HX_STACK_LINE(4234)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
												HX_STACK_LINE(4234)
												ret->next = null();
											}
											HX_STACK_LINE(4234)
											Dynamic();
										}
										HX_STACK_LINE(4234)
										ret->elt = carb;
										HX_STACK_LINE(4234)
										temp = ret;
									}
									HX_STACK_LINE(4234)
									temp->next = _this->head;
									HX_STACK_LINE(4234)
									_this->head = temp;
									HX_STACK_LINE(4234)
									_this->modified = true;
									HX_STACK_LINE(4234)
									(_this->length)++;
									HX_STACK_LINE(4234)
									carb;
								}
							}
							else{
								HX_STACK_LINE(4236)
								if (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID))){
									HX_STACK_LINE(4236)
									::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this = this->f_arbiters;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4236)
									::zpp_nape::dynamics::ZPP_FluidArbiter o = arb->fluidarb;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(4236)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4236)
									{
										HX_STACK_LINE(4236)
										::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(4236)
										{
											HX_STACK_LINE(4236)
											if (((::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool == null()))){
												HX_STACK_LINE(4236)
												::zpp_nape::util::ZNPNode_ZPP_FluidArbiter _g2 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(_g2,"_g2");
												HX_STACK_LINE(4236)
												ret = _g2;
											}
											else{
												HX_STACK_LINE(4236)
												ret = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
												HX_STACK_LINE(4236)
												::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret->next;
												HX_STACK_LINE(4236)
												ret->next = null();
											}
											HX_STACK_LINE(4236)
											Dynamic();
										}
										HX_STACK_LINE(4236)
										ret->elt = o;
										HX_STACK_LINE(4236)
										temp = ret;
									}
									HX_STACK_LINE(4236)
									temp->next = _this->head;
									HX_STACK_LINE(4236)
									_this->head = temp;
									HX_STACK_LINE(4236)
									_this->modified = true;
									HX_STACK_LINE(4236)
									(_this->length)++;
									HX_STACK_LINE(4236)
									o;
								}
								else{
									HX_STACK_LINE(4237)
									::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this = this->s_arbiters;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4237)
									::zpp_nape::dynamics::ZPP_SensorArbiter o = arb->sensorarb;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(4237)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4237)
									{
										HX_STACK_LINE(4237)
										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(4237)
										{
											HX_STACK_LINE(4237)
											if (((::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool == null()))){
												HX_STACK_LINE(4237)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter _g3 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(_g3,"_g3");
												HX_STACK_LINE(4237)
												ret = _g3;
											}
											else{
												HX_STACK_LINE(4237)
												ret = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
												HX_STACK_LINE(4237)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret->next;
												HX_STACK_LINE(4237)
												ret->next = null();
											}
											HX_STACK_LINE(4237)
											Dynamic();
										}
										HX_STACK_LINE(4237)
										ret->elt = o;
										HX_STACK_LINE(4237)
										temp = ret;
									}
									HX_STACK_LINE(4237)
									temp->next = _this->head;
									HX_STACK_LINE(4237)
									_this->head = temp;
									HX_STACK_LINE(4237)
									_this->modified = true;
									HX_STACK_LINE(4237)
									(_this->length)++;
									HX_STACK_LINE(4237)
									o;
								}
							}
						}
						HX_STACK_LINE(4240)
						cx_ite = cx_ite->next;
					}
				}
				HX_STACK_LINE(4243)
				this->bodyCbWake(b);
				HX_STACK_LINE(4244)
				{
					HX_STACK_LINE(4244)
					c->sleeping = false;
					HX_STACK_LINE(4244)
					c->island = null();
					HX_STACK_LINE(4244)
					c->parent = c;
					HX_STACK_LINE(4244)
					c->rank = (int)0;
				}
				HX_STACK_LINE(4245)
				if ((!(((b->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))))){
					HX_STACK_LINE(4246)
					::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = b->shapes->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(4247)
					while((true)){
						HX_STACK_LINE(4247)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(4247)
							break;
						}
						HX_STACK_LINE(4248)
						::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;		HX_STACK_VAR(shape,"shape");
						HX_STACK_LINE(4249)
						if (((shape->node != null()))){
							HX_STACK_LINE(4249)
							this->bphase->sync(shape);
						}
						HX_STACK_LINE(4250)
						cx_ite = cx_ite->next;
					}
				}
			}
			else{
				HX_STACK_LINE(4255)
				::zpp_nape::constraint::ZPP_Constraint con = c->constraint;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(4264)
				{
					HX_STACK_LINE(4264)
					::zpp_nape::util::ZNPList_ZPP_Constraint _this = this->live_constraints;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(4264)
					::zpp_nape::util::ZNPNode_ZPP_Constraint temp;		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(4264)
					{
						HX_STACK_LINE(4264)
						::zpp_nape::util::ZNPNode_ZPP_Constraint ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4264)
						{
							HX_STACK_LINE(4264)
							if (((::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool == null()))){
								HX_STACK_LINE(4264)
								::zpp_nape::util::ZNPNode_ZPP_Constraint _g4 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__new();		HX_STACK_VAR(_g4,"_g4");
								HX_STACK_LINE(4264)
								ret = _g4;
							}
							else{
								HX_STACK_LINE(4264)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
								HX_STACK_LINE(4264)
								::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
								HX_STACK_LINE(4264)
								ret->next = null();
							}
							HX_STACK_LINE(4264)
							Dynamic();
						}
						HX_STACK_LINE(4264)
						ret->elt = con;
						HX_STACK_LINE(4264)
						temp = ret;
					}
					HX_STACK_LINE(4264)
					temp->next = _this->head;
					HX_STACK_LINE(4264)
					_this->head = temp;
					HX_STACK_LINE(4264)
					_this->modified = true;
					HX_STACK_LINE(4264)
					(_this->length)++;
					HX_STACK_LINE(4264)
					con;
				}
				HX_STACK_LINE(4265)
				this->constraintCbWake(con);
				HX_STACK_LINE(4266)
				{
					HX_STACK_LINE(4266)
					c->sleeping = false;
					HX_STACK_LINE(4266)
					c->island = null();
					HX_STACK_LINE(4266)
					c->parent = c;
					HX_STACK_LINE(4266)
					c->rank = (int)0;
				}
			}
		}
		HX_STACK_LINE(4269)
		{
			HX_STACK_LINE(4270)
			::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(4280)
			o->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
			HX_STACK_LINE(4281)
			::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,wakeIsland,(void))

Void ZPP_Space_obj::non_inlined_wake( ::zpp_nape::phys::ZPP_Body o,hx::Null< bool >  __o_fst){
bool fst = __o_fst.Default(false);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","non_inlined_wake",0xabd7e560,"zpp_nape.space.ZPP_Space.non_inlined_wake","zpp_nape/space/Space.hx",4288,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(o,"o")
	HX_STACK_ARG(fst,"fst")
{
		HX_STACK_LINE(4289)
		::zpp_nape::phys::ZPP_Body o1 = o;		HX_STACK_VAR(o1,"o1");
		HX_STACK_LINE(4298)
		if ((!(o1->world))){
			HX_STACK_LINE(4307)
			o1->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
			HX_STACK_LINE(4308)
			if (((o1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
				HX_STACK_LINE(4308)
				o1->kinematicDelaySleep = true;
			}
			HX_STACK_LINE(4309)
			if ((o1->component->sleeping)){
				HX_STACK_LINE(4310)
				this->really_wake(o1,fst);
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,non_inlined_wake,(void))

Void ZPP_Space_obj::really_wake( ::zpp_nape::phys::ZPP_Body o,hx::Null< bool >  __o_fst){
bool fst = __o_fst.Default(false);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","really_wake",0xda69fb02,"zpp_nape.space.ZPP_Space.really_wake","zpp_nape/space/Space.hx",4315,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(o,"o")
	HX_STACK_ARG(fst,"fst")
{
		HX_STACK_LINE(4316)
		if (((o->component->island == null()))){
			HX_STACK_LINE(4317)
			o->component->sleeping = false;
			HX_STACK_LINE(4318)
			if (((bool((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC)) || bool((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))))){
				HX_STACK_LINE(4318)
				::zpp_nape::util::ZNPList_ZPP_Body _this = this->staticsleep;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4318)
				::zpp_nape::util::ZNPNode_ZPP_Body temp;		HX_STACK_VAR(temp,"temp");
				HX_STACK_LINE(4318)
				{
					HX_STACK_LINE(4318)
					::zpp_nape::util::ZNPNode_ZPP_Body ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(4318)
					{
						HX_STACK_LINE(4318)
						if (((::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool == null()))){
							HX_STACK_LINE(4318)
							::zpp_nape::util::ZNPNode_ZPP_Body _g = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__new();		HX_STACK_VAR(_g,"_g");
							HX_STACK_LINE(4318)
							ret = _g;
						}
						else{
							HX_STACK_LINE(4318)
							ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
							HX_STACK_LINE(4318)
							::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
							HX_STACK_LINE(4318)
							ret->next = null();
						}
						HX_STACK_LINE(4318)
						Dynamic();
					}
					HX_STACK_LINE(4318)
					ret->elt = o;
					HX_STACK_LINE(4318)
					temp = ret;
				}
				HX_STACK_LINE(4318)
				temp->next = _this->head;
				HX_STACK_LINE(4318)
				_this->head = temp;
				HX_STACK_LINE(4318)
				_this->modified = true;
				HX_STACK_LINE(4318)
				(_this->length)++;
				HX_STACK_LINE(4318)
				o;
			}
			else{
				HX_STACK_LINE(4319)
				::zpp_nape::util::ZNPList_ZPP_Body _this = this->live;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4319)
				::zpp_nape::util::ZNPNode_ZPP_Body temp;		HX_STACK_VAR(temp,"temp");
				HX_STACK_LINE(4319)
				{
					HX_STACK_LINE(4319)
					::zpp_nape::util::ZNPNode_ZPP_Body ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(4319)
					{
						HX_STACK_LINE(4319)
						if (((::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool == null()))){
							HX_STACK_LINE(4319)
							::zpp_nape::util::ZNPNode_ZPP_Body _g1 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__new();		HX_STACK_VAR(_g1,"_g1");
							HX_STACK_LINE(4319)
							ret = _g1;
						}
						else{
							HX_STACK_LINE(4319)
							ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
							HX_STACK_LINE(4319)
							::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
							HX_STACK_LINE(4319)
							ret->next = null();
						}
						HX_STACK_LINE(4319)
						Dynamic();
					}
					HX_STACK_LINE(4319)
					ret->elt = o;
					HX_STACK_LINE(4319)
					temp = ret;
				}
				HX_STACK_LINE(4319)
				temp->next = _this->head;
				HX_STACK_LINE(4319)
				_this->head = temp;
				HX_STACK_LINE(4319)
				_this->modified = true;
				HX_STACK_LINE(4319)
				(_this->length)++;
				HX_STACK_LINE(4319)
				o;
			}
			HX_STACK_LINE(4320)
			{
				HX_STACK_LINE(4321)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = o->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4322)
				while((true)){
					HX_STACK_LINE(4322)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(4322)
						break;
					}
					HX_STACK_LINE(4323)
					::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
					HX_STACK_LINE(4324)
					if (((con->space == hx::ObjectPtr<OBJ_>(this)))){
						HX_STACK_LINE(4324)
						this->wake_constraint(con,null());
					}
					HX_STACK_LINE(4325)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(4328)
			{
				HX_STACK_LINE(4329)
				::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = o->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4330)
				while((true)){
					HX_STACK_LINE(4330)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(4330)
						break;
					}
					HX_STACK_LINE(4331)
					::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
					HX_STACK_LINE(4332)
					{
						HX_STACK_LINE(4333)
						if ((arb->sleeping)){
							HX_STACK_LINE(4334)
							arb->sleeping = false;
							HX_STACK_LINE(4335)
							hx::AddEq(arb->up_stamp,((this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) ))) - arb->sleep_stamp));
							HX_STACK_LINE(4336)
							if (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL))){
								HX_STACK_LINE(4337)
								::zpp_nape::dynamics::ZPP_ColArbiter carb = arb->colarb;		HX_STACK_VAR(carb,"carb");
								HX_STACK_LINE(4338)
								if ((carb->stat)){
									HX_STACK_LINE(4338)
									::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = this->c_arbiters_true;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4338)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4338)
									{
										HX_STACK_LINE(4338)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(4338)
										{
											HX_STACK_LINE(4338)
											if (((::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool == null()))){
												HX_STACK_LINE(4338)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter _g2 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(_g2,"_g2");
												HX_STACK_LINE(4338)
												ret = _g2;
											}
											else{
												HX_STACK_LINE(4338)
												ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
												HX_STACK_LINE(4338)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
												HX_STACK_LINE(4338)
												ret->next = null();
											}
											HX_STACK_LINE(4338)
											Dynamic();
										}
										HX_STACK_LINE(4338)
										ret->elt = carb;
										HX_STACK_LINE(4338)
										temp = ret;
									}
									HX_STACK_LINE(4338)
									temp->next = _this->head;
									HX_STACK_LINE(4338)
									_this->head = temp;
									HX_STACK_LINE(4338)
									_this->modified = true;
									HX_STACK_LINE(4338)
									(_this->length)++;
									HX_STACK_LINE(4338)
									carb;
								}
								else{
									HX_STACK_LINE(4339)
									::zpp_nape::util::ZNPList_ZPP_ColArbiter _this = this->c_arbiters_false;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4339)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4339)
									{
										HX_STACK_LINE(4339)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(4339)
										{
											HX_STACK_LINE(4339)
											if (((::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool == null()))){
												HX_STACK_LINE(4339)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter _g3 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(_g3,"_g3");
												HX_STACK_LINE(4339)
												ret = _g3;
											}
											else{
												HX_STACK_LINE(4339)
												ret = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
												HX_STACK_LINE(4339)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret->next;
												HX_STACK_LINE(4339)
												ret->next = null();
											}
											HX_STACK_LINE(4339)
											Dynamic();
										}
										HX_STACK_LINE(4339)
										ret->elt = carb;
										HX_STACK_LINE(4339)
										temp = ret;
									}
									HX_STACK_LINE(4339)
									temp->next = _this->head;
									HX_STACK_LINE(4339)
									_this->head = temp;
									HX_STACK_LINE(4339)
									_this->modified = true;
									HX_STACK_LINE(4339)
									(_this->length)++;
									HX_STACK_LINE(4339)
									carb;
								}
							}
							else{
								HX_STACK_LINE(4341)
								if (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID))){
									HX_STACK_LINE(4341)
									::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this = this->f_arbiters;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4341)
									::zpp_nape::dynamics::ZPP_FluidArbiter o1 = arb->fluidarb;		HX_STACK_VAR(o1,"o1");
									HX_STACK_LINE(4341)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4341)
									{
										HX_STACK_LINE(4341)
										::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(4341)
										{
											HX_STACK_LINE(4341)
											if (((::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool == null()))){
												HX_STACK_LINE(4341)
												::zpp_nape::util::ZNPNode_ZPP_FluidArbiter _g4 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(_g4,"_g4");
												HX_STACK_LINE(4341)
												ret = _g4;
											}
											else{
												HX_STACK_LINE(4341)
												ret = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
												HX_STACK_LINE(4341)
												::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret->next;
												HX_STACK_LINE(4341)
												ret->next = null();
											}
											HX_STACK_LINE(4341)
											Dynamic();
										}
										HX_STACK_LINE(4341)
										ret->elt = o1;
										HX_STACK_LINE(4341)
										temp = ret;
									}
									HX_STACK_LINE(4341)
									temp->next = _this->head;
									HX_STACK_LINE(4341)
									_this->head = temp;
									HX_STACK_LINE(4341)
									_this->modified = true;
									HX_STACK_LINE(4341)
									(_this->length)++;
									HX_STACK_LINE(4341)
									o1;
								}
								else{
									HX_STACK_LINE(4342)
									::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this = this->s_arbiters;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(4342)
									::zpp_nape::dynamics::ZPP_SensorArbiter o1 = arb->sensorarb;		HX_STACK_VAR(o1,"o1");
									HX_STACK_LINE(4342)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(4342)
									{
										HX_STACK_LINE(4342)
										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(4342)
										{
											HX_STACK_LINE(4342)
											if (((::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool == null()))){
												HX_STACK_LINE(4342)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter _g5 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(_g5,"_g5");
												HX_STACK_LINE(4342)
												ret = _g5;
											}
											else{
												HX_STACK_LINE(4342)
												ret = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
												HX_STACK_LINE(4342)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret->next;
												HX_STACK_LINE(4342)
												ret->next = null();
											}
											HX_STACK_LINE(4342)
											Dynamic();
										}
										HX_STACK_LINE(4342)
										ret->elt = o1;
										HX_STACK_LINE(4342)
										temp = ret;
									}
									HX_STACK_LINE(4342)
									temp->next = _this->head;
									HX_STACK_LINE(4342)
									_this->head = temp;
									HX_STACK_LINE(4342)
									_this->modified = true;
									HX_STACK_LINE(4342)
									(_this->length)++;
									HX_STACK_LINE(4342)
									o1;
								}
							}
						}
						HX_STACK_LINE(4344)
						if (((bool((bool((bool((arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR)) && bool(!(arb->cleared)))) && bool((arb->up_stamp >= this->stamp)))) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
							HX_STACK_LINE(4345)
							if (((bool((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(arb->b1->component->sleeping)))){
								HX_STACK_LINE(4346)
								::zpp_nape::phys::ZPP_Body o1 = arb->b1;		HX_STACK_VAR(o1,"o1");
								HX_STACK_LINE(4355)
								if ((!(o1->world))){
									HX_STACK_LINE(4364)
									o1->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
									HX_STACK_LINE(4365)
									if (((o1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
										HX_STACK_LINE(4365)
										o1->kinematicDelaySleep = true;
									}
									HX_STACK_LINE(4366)
									if ((o1->component->sleeping)){
										HX_STACK_LINE(4367)
										this->really_wake(o1,false);
									}
								}
							}
							HX_STACK_LINE(4371)
							if (((bool((arb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(arb->b2->component->sleeping)))){
								HX_STACK_LINE(4372)
								::zpp_nape::phys::ZPP_Body o1 = arb->b2;		HX_STACK_VAR(o1,"o1");
								HX_STACK_LINE(4381)
								if ((!(o1->world))){
									HX_STACK_LINE(4390)
									o1->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
									HX_STACK_LINE(4391)
									if (((o1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
										HX_STACK_LINE(4391)
										o1->kinematicDelaySleep = true;
									}
									HX_STACK_LINE(4392)
									if ((o1->component->sleeping)){
										HX_STACK_LINE(4393)
										this->really_wake(o1,false);
									}
								}
							}
						}
					}
					HX_STACK_LINE(4399)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(4402)
			if (((bool(!(fst)) && bool((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))))){
				HX_STACK_LINE(4402)
				this->bodyCbWake(o);
			}
			HX_STACK_LINE(4403)
			if (((bool((bool(!(fst)) && bool(!(this->bphase->is_sweep)))) && bool(!(((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))))))){
				HX_STACK_LINE(4404)
				::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = o->shapes->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4405)
				while((true)){
					HX_STACK_LINE(4405)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(4405)
						break;
					}
					HX_STACK_LINE(4406)
					::zpp_nape::shape::ZPP_Shape shape = cx_ite->elt;		HX_STACK_VAR(shape,"shape");
					HX_STACK_LINE(4407)
					if (((shape->node != null()))){
						HX_STACK_LINE(4407)
						this->bphase->sync(shape);
					}
					HX_STACK_LINE(4408)
					cx_ite = cx_ite->next;
				}
			}
		}
		else{
			HX_STACK_LINE(4413)
			this->wakeIsland(o->component->island);
		}
		HX_STACK_LINE(4415)
		{
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,really_wake,(void))

bool ZPP_Space_obj::wake_constraint( ::zpp_nape::constraint::ZPP_Constraint con,hx::Null< bool >  __o_fst){
bool fst = __o_fst.Default(false);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","wake_constraint",0xa5c90d22,"zpp_nape.space.ZPP_Space.wake_constraint","zpp_nape/space/Space.hx",4433,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(con,"con")
	HX_STACK_ARG(fst,"fst")
{
		HX_STACK_LINE(4433)
		if ((con->active)){
			HX_STACK_LINE(4442)
			con->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
			HX_STACK_LINE(4443)
			if ((con->component->sleeping)){
				HX_STACK_LINE(4444)
				if (((con->component->island == null()))){
					HX_STACK_LINE(4445)
					con->component->sleeping = false;
					HX_STACK_LINE(4446)
					{
						HX_STACK_LINE(4446)
						::zpp_nape::util::ZNPList_ZPP_Constraint _this = this->live_constraints;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4446)
						::zpp_nape::util::ZNPNode_ZPP_Constraint temp;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(4446)
						{
							HX_STACK_LINE(4446)
							::zpp_nape::util::ZNPNode_ZPP_Constraint ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(4446)
							{
								HX_STACK_LINE(4446)
								if (((::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool == null()))){
									HX_STACK_LINE(4446)
									::zpp_nape::util::ZNPNode_ZPP_Constraint _g = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__new();		HX_STACK_VAR(_g,"_g");
									HX_STACK_LINE(4446)
									ret = _g;
								}
								else{
									HX_STACK_LINE(4446)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
									HX_STACK_LINE(4446)
									::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
									HX_STACK_LINE(4446)
									ret->next = null();
								}
								HX_STACK_LINE(4446)
								Dynamic();
							}
							HX_STACK_LINE(4446)
							ret->elt = con;
							HX_STACK_LINE(4446)
							temp = ret;
						}
						HX_STACK_LINE(4446)
						temp->next = _this->head;
						HX_STACK_LINE(4446)
						_this->head = temp;
						HX_STACK_LINE(4446)
						_this->modified = true;
						HX_STACK_LINE(4446)
						(_this->length)++;
						HX_STACK_LINE(4446)
						con;
					}
					HX_STACK_LINE(4447)
					con->wake_connected();
					HX_STACK_LINE(4448)
					if ((!(fst))){
						HX_STACK_LINE(4448)
						this->constraintCbWake(con);
					}
				}
				else{
					HX_STACK_LINE(4451)
					this->wakeIsland(con->component->island);
				}
				HX_STACK_LINE(4461)
				return true;
			}
			else{
				HX_STACK_LINE(4463)
				return false;
			}
		}
		else{
			HX_STACK_LINE(4465)
			return false;
		}
		HX_STACK_LINE(4433)
		return false;
	}
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,wake_constraint,return )

Void ZPP_Space_obj::doForests( Float dt){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","doForests",0x60499a75,"zpp_nape.space.ZPP_Space.doForests","zpp_nape/space/Space.hx",4467,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(dt,"dt")
		HX_STACK_LINE(4468)
		{
			HX_STACK_LINE(4469)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter cx_ite = this->c_arbiters_false->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4470)
			while((true)){
				HX_STACK_LINE(4470)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(4470)
					break;
				}
				HX_STACK_LINE(4471)
				::zpp_nape::dynamics::ZPP_ColArbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4473)
				if (((bool((bool(!(arb->cleared)) && bool((arb->up_stamp == this->stamp)))) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
					HX_STACK_LINE(4474)
					if (((bool((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool((arb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))))){
						HX_STACK_LINE(4475)
						::zpp_nape::space::ZPP_Component xr;		HX_STACK_VAR(xr,"xr");
						HX_STACK_LINE(4475)
						if (((arb->b1->component == arb->b1->component->parent))){
							HX_STACK_LINE(4476)
							xr = arb->b1->component;
						}
						else{
							HX_STACK_LINE(4478)
							::zpp_nape::space::ZPP_Component obj = arb->b1->component;		HX_STACK_VAR(obj,"obj");
							HX_STACK_LINE(4479)
							::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
							HX_STACK_LINE(4480)
							while((true)){
								HX_STACK_LINE(4480)
								if ((!(((obj != obj->parent))))){
									HX_STACK_LINE(4480)
									break;
								}
								HX_STACK_LINE(4481)
								::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
								HX_STACK_LINE(4482)
								obj->parent = stack;
								HX_STACK_LINE(4483)
								stack = obj;
								HX_STACK_LINE(4484)
								obj = nxt;
							}
							HX_STACK_LINE(4486)
							while((true)){
								HX_STACK_LINE(4486)
								if ((!(((stack != null()))))){
									HX_STACK_LINE(4486)
									break;
								}
								HX_STACK_LINE(4487)
								::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
								HX_STACK_LINE(4488)
								stack->parent = obj;
								HX_STACK_LINE(4489)
								stack = nxt;
							}
							HX_STACK_LINE(4491)
							xr = obj;
						}
						HX_STACK_LINE(4494)
						::zpp_nape::space::ZPP_Component yr;		HX_STACK_VAR(yr,"yr");
						HX_STACK_LINE(4494)
						if (((arb->b2->component == arb->b2->component->parent))){
							HX_STACK_LINE(4495)
							yr = arb->b2->component;
						}
						else{
							HX_STACK_LINE(4497)
							::zpp_nape::space::ZPP_Component obj = arb->b2->component;		HX_STACK_VAR(obj,"obj");
							HX_STACK_LINE(4498)
							::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
							HX_STACK_LINE(4499)
							while((true)){
								HX_STACK_LINE(4499)
								if ((!(((obj != obj->parent))))){
									HX_STACK_LINE(4499)
									break;
								}
								HX_STACK_LINE(4500)
								::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
								HX_STACK_LINE(4501)
								obj->parent = stack;
								HX_STACK_LINE(4502)
								stack = obj;
								HX_STACK_LINE(4503)
								obj = nxt;
							}
							HX_STACK_LINE(4505)
							while((true)){
								HX_STACK_LINE(4505)
								if ((!(((stack != null()))))){
									HX_STACK_LINE(4505)
									break;
								}
								HX_STACK_LINE(4506)
								::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
								HX_STACK_LINE(4507)
								stack->parent = obj;
								HX_STACK_LINE(4508)
								stack = nxt;
							}
							HX_STACK_LINE(4510)
							yr = obj;
						}
						HX_STACK_LINE(4513)
						if (((xr != yr))){
							HX_STACK_LINE(4514)
							if (((xr->rank < yr->rank))){
								HX_STACK_LINE(4514)
								xr->parent = yr;
							}
							else{
								HX_STACK_LINE(4515)
								if (((xr->rank > yr->rank))){
									HX_STACK_LINE(4515)
									yr->parent = xr;
								}
								else{
									HX_STACK_LINE(4517)
									yr->parent = xr;
									HX_STACK_LINE(4518)
									(xr->rank)++;
								}
							}
						}
					}
				}
				HX_STACK_LINE(4524)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4527)
		{
			HX_STACK_LINE(4528)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = this->f_arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4529)
			while((true)){
				HX_STACK_LINE(4529)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(4529)
					break;
				}
				HX_STACK_LINE(4530)
				::zpp_nape::dynamics::ZPP_FluidArbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4532)
				if (((bool((bool(!(arb->cleared)) && bool((arb->up_stamp == this->stamp)))) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
					HX_STACK_LINE(4533)
					if (((bool((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool((arb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))))){
						HX_STACK_LINE(4534)
						::zpp_nape::space::ZPP_Component xr;		HX_STACK_VAR(xr,"xr");
						HX_STACK_LINE(4534)
						if (((arb->b1->component == arb->b1->component->parent))){
							HX_STACK_LINE(4535)
							xr = arb->b1->component;
						}
						else{
							HX_STACK_LINE(4537)
							::zpp_nape::space::ZPP_Component obj = arb->b1->component;		HX_STACK_VAR(obj,"obj");
							HX_STACK_LINE(4538)
							::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
							HX_STACK_LINE(4539)
							while((true)){
								HX_STACK_LINE(4539)
								if ((!(((obj != obj->parent))))){
									HX_STACK_LINE(4539)
									break;
								}
								HX_STACK_LINE(4540)
								::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
								HX_STACK_LINE(4541)
								obj->parent = stack;
								HX_STACK_LINE(4542)
								stack = obj;
								HX_STACK_LINE(4543)
								obj = nxt;
							}
							HX_STACK_LINE(4545)
							while((true)){
								HX_STACK_LINE(4545)
								if ((!(((stack != null()))))){
									HX_STACK_LINE(4545)
									break;
								}
								HX_STACK_LINE(4546)
								::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
								HX_STACK_LINE(4547)
								stack->parent = obj;
								HX_STACK_LINE(4548)
								stack = nxt;
							}
							HX_STACK_LINE(4550)
							xr = obj;
						}
						HX_STACK_LINE(4553)
						::zpp_nape::space::ZPP_Component yr;		HX_STACK_VAR(yr,"yr");
						HX_STACK_LINE(4553)
						if (((arb->b2->component == arb->b2->component->parent))){
							HX_STACK_LINE(4554)
							yr = arb->b2->component;
						}
						else{
							HX_STACK_LINE(4556)
							::zpp_nape::space::ZPP_Component obj = arb->b2->component;		HX_STACK_VAR(obj,"obj");
							HX_STACK_LINE(4557)
							::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
							HX_STACK_LINE(4558)
							while((true)){
								HX_STACK_LINE(4558)
								if ((!(((obj != obj->parent))))){
									HX_STACK_LINE(4558)
									break;
								}
								HX_STACK_LINE(4559)
								::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
								HX_STACK_LINE(4560)
								obj->parent = stack;
								HX_STACK_LINE(4561)
								stack = obj;
								HX_STACK_LINE(4562)
								obj = nxt;
							}
							HX_STACK_LINE(4564)
							while((true)){
								HX_STACK_LINE(4564)
								if ((!(((stack != null()))))){
									HX_STACK_LINE(4564)
									break;
								}
								HX_STACK_LINE(4565)
								::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
								HX_STACK_LINE(4566)
								stack->parent = obj;
								HX_STACK_LINE(4567)
								stack = nxt;
							}
							HX_STACK_LINE(4569)
							yr = obj;
						}
						HX_STACK_LINE(4572)
						if (((xr != yr))){
							HX_STACK_LINE(4573)
							if (((xr->rank < yr->rank))){
								HX_STACK_LINE(4573)
								xr->parent = yr;
							}
							else{
								HX_STACK_LINE(4574)
								if (((xr->rank > yr->rank))){
									HX_STACK_LINE(4574)
									yr->parent = xr;
								}
								else{
									HX_STACK_LINE(4576)
									yr->parent = xr;
									HX_STACK_LINE(4577)
									(xr->rank)++;
								}
							}
						}
					}
				}
				HX_STACK_LINE(4583)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4586)
		{
			HX_STACK_LINE(4587)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4588)
			while((true)){
				HX_STACK_LINE(4588)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(4588)
					break;
				}
				HX_STACK_LINE(4589)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(4590)
				con->forest();
				HX_STACK_LINE(4591)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4594)
		while((true)){
			HX_STACK_LINE(4594)
			if ((!((!(((this->live->head == null()))))))){
				HX_STACK_LINE(4594)
				break;
			}
			HX_STACK_LINE(4595)
			::zpp_nape::phys::ZPP_Body o;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(4595)
			{
				HX_STACK_LINE(4595)
				::zpp_nape::util::ZNPList_ZPP_Body _this = this->live;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4595)
				::zpp_nape::phys::ZPP_Body ret = _this->head->elt;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(4595)
				_this->pop();
				HX_STACK_LINE(4595)
				o = ret;
			}
			HX_STACK_LINE(4596)
			::zpp_nape::space::ZPP_Component oc = o->component;		HX_STACK_VAR(oc,"oc");
			HX_STACK_LINE(4597)
			::zpp_nape::space::ZPP_Component root;		HX_STACK_VAR(root,"root");
			HX_STACK_LINE(4597)
			if (((oc == oc->parent))){
				HX_STACK_LINE(4598)
				root = oc;
			}
			else{
				HX_STACK_LINE(4600)
				::zpp_nape::space::ZPP_Component obj = oc;		HX_STACK_VAR(obj,"obj");
				HX_STACK_LINE(4601)
				::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
				HX_STACK_LINE(4602)
				while((true)){
					HX_STACK_LINE(4602)
					if ((!(((obj != obj->parent))))){
						HX_STACK_LINE(4602)
						break;
					}
					HX_STACK_LINE(4603)
					::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
					HX_STACK_LINE(4604)
					obj->parent = stack;
					HX_STACK_LINE(4605)
					stack = obj;
					HX_STACK_LINE(4606)
					obj = nxt;
				}
				HX_STACK_LINE(4608)
				while((true)){
					HX_STACK_LINE(4608)
					if ((!(((stack != null()))))){
						HX_STACK_LINE(4608)
						break;
					}
					HX_STACK_LINE(4609)
					::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
					HX_STACK_LINE(4610)
					stack->parent = obj;
					HX_STACK_LINE(4611)
					stack = nxt;
				}
				HX_STACK_LINE(4613)
				root = obj;
			}
			HX_STACK_LINE(4616)
			if (((root->island == null()))){
				HX_STACK_LINE(4617)
				{
					HX_STACK_LINE(4618)
					if (((::zpp_nape::space::ZPP_Island_obj::zpp_pool == null()))){
						HX_STACK_LINE(4619)
						::zpp_nape::space::ZPP_Island _g = ::zpp_nape::space::ZPP_Island_obj::__new();		HX_STACK_VAR(_g,"_g");
						HX_STACK_LINE(4619)
						root->island = _g;
					}
					else{
						HX_STACK_LINE(4625)
						root->island = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
						HX_STACK_LINE(4626)
						::zpp_nape::space::ZPP_Island_obj::zpp_pool = root->island->next;
						HX_STACK_LINE(4627)
						root->island->next = null();
					}
					HX_STACK_LINE(4632)
					root->island->waket = (int)0;
				}
				HX_STACK_LINE(4634)
				{
					HX_STACK_LINE(4634)
					::zpp_nape::space::ZPP_Island _this = this->islands;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(4634)
					::zpp_nape::space::ZPP_Island o1 = root->island;		HX_STACK_VAR(o1,"o1");
					HX_STACK_LINE(4634)
					::zpp_nape::space::ZPP_Island temp;		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(4634)
					{
						HX_STACK_LINE(4634)
						o1->_inuse = true;
						HX_STACK_LINE(4634)
						temp = o1;
					}
					HX_STACK_LINE(4634)
					temp->next = _this->next;
					HX_STACK_LINE(4634)
					_this->next = temp;
					HX_STACK_LINE(4634)
					_this->modified = true;
					HX_STACK_LINE(4634)
					(_this->length)++;
					HX_STACK_LINE(4634)
					o1;
				}
				HX_STACK_LINE(4635)
				root->island->sleep = true;
			}
			HX_STACK_LINE(4637)
			oc->island = root->island;
			HX_STACK_LINE(4638)
			{
				HX_STACK_LINE(4638)
				::zpp_nape::util::ZNPList_ZPP_Component _this = oc->island->comps;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4638)
				::zpp_nape::util::ZNPNode_ZPP_Component temp;		HX_STACK_VAR(temp,"temp");
				HX_STACK_LINE(4638)
				{
					HX_STACK_LINE(4638)
					::zpp_nape::util::ZNPNode_ZPP_Component ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(4638)
					{
						HX_STACK_LINE(4638)
						if (((::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool == null()))){
							HX_STACK_LINE(4638)
							::zpp_nape::util::ZNPNode_ZPP_Component _g1 = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::__new();		HX_STACK_VAR(_g1,"_g1");
							HX_STACK_LINE(4638)
							ret = _g1;
						}
						else{
							HX_STACK_LINE(4638)
							ret = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
							HX_STACK_LINE(4638)
							::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret->next;
							HX_STACK_LINE(4638)
							ret->next = null();
						}
						HX_STACK_LINE(4638)
						Dynamic();
					}
					HX_STACK_LINE(4638)
					ret->elt = oc;
					HX_STACK_LINE(4638)
					temp = ret;
				}
				HX_STACK_LINE(4638)
				temp->next = _this->head;
				HX_STACK_LINE(4638)
				_this->head = temp;
				HX_STACK_LINE(4638)
				_this->modified = true;
				HX_STACK_LINE(4638)
				(_this->length)++;
				HX_STACK_LINE(4638)
				oc;
			}
			HX_STACK_LINE(4639)
			bool rest = o->atRest(dt);		HX_STACK_VAR(rest,"rest");
			HX_STACK_LINE(4640)
			oc->island->sleep = (bool(oc->island->sleep) && bool(rest));
			HX_STACK_LINE(4641)
			if (((oc->waket > oc->island->waket))){
				HX_STACK_LINE(4641)
				oc->island->waket = oc->waket;
			}
		}
		HX_STACK_LINE(4643)
		while((true)){
			HX_STACK_LINE(4643)
			if ((!((!(((this->live_constraints->head == null()))))))){
				HX_STACK_LINE(4643)
				break;
			}
			HX_STACK_LINE(4644)
			::zpp_nape::constraint::ZPP_Constraint o;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(4644)
			{
				HX_STACK_LINE(4644)
				::zpp_nape::util::ZNPList_ZPP_Constraint _this = this->live_constraints;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4644)
				::zpp_nape::constraint::ZPP_Constraint ret = _this->head->elt;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(4644)
				_this->pop();
				HX_STACK_LINE(4644)
				o = ret;
			}
			HX_STACK_LINE(4645)
			::zpp_nape::space::ZPP_Component oc = o->component;		HX_STACK_VAR(oc,"oc");
			HX_STACK_LINE(4646)
			::zpp_nape::space::ZPP_Component root;		HX_STACK_VAR(root,"root");
			HX_STACK_LINE(4646)
			if (((oc == oc->parent))){
				HX_STACK_LINE(4647)
				root = oc;
			}
			else{
				HX_STACK_LINE(4649)
				::zpp_nape::space::ZPP_Component obj = oc;		HX_STACK_VAR(obj,"obj");
				HX_STACK_LINE(4650)
				::zpp_nape::space::ZPP_Component stack = null();		HX_STACK_VAR(stack,"stack");
				HX_STACK_LINE(4651)
				while((true)){
					HX_STACK_LINE(4651)
					if ((!(((obj != obj->parent))))){
						HX_STACK_LINE(4651)
						break;
					}
					HX_STACK_LINE(4652)
					::zpp_nape::space::ZPP_Component nxt = obj->parent;		HX_STACK_VAR(nxt,"nxt");
					HX_STACK_LINE(4653)
					obj->parent = stack;
					HX_STACK_LINE(4654)
					stack = obj;
					HX_STACK_LINE(4655)
					obj = nxt;
				}
				HX_STACK_LINE(4657)
				while((true)){
					HX_STACK_LINE(4657)
					if ((!(((stack != null()))))){
						HX_STACK_LINE(4657)
						break;
					}
					HX_STACK_LINE(4658)
					::zpp_nape::space::ZPP_Component nxt = stack->parent;		HX_STACK_VAR(nxt,"nxt");
					HX_STACK_LINE(4659)
					stack->parent = obj;
					HX_STACK_LINE(4660)
					stack = nxt;
				}
				HX_STACK_LINE(4662)
				root = obj;
			}
			HX_STACK_LINE(4673)
			oc->island = root->island;
			HX_STACK_LINE(4674)
			{
				HX_STACK_LINE(4674)
				::zpp_nape::util::ZNPList_ZPP_Component _this = oc->island->comps;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4674)
				::zpp_nape::util::ZNPNode_ZPP_Component temp;		HX_STACK_VAR(temp,"temp");
				HX_STACK_LINE(4674)
				{
					HX_STACK_LINE(4674)
					::zpp_nape::util::ZNPNode_ZPP_Component ret;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(4674)
					{
						HX_STACK_LINE(4674)
						if (((::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool == null()))){
							HX_STACK_LINE(4674)
							::zpp_nape::util::ZNPNode_ZPP_Component _g2 = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::__new();		HX_STACK_VAR(_g2,"_g2");
							HX_STACK_LINE(4674)
							ret = _g2;
						}
						else{
							HX_STACK_LINE(4674)
							ret = ::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool;
							HX_STACK_LINE(4674)
							::zpp_nape::util::ZNPNode_ZPP_Component_obj::zpp_pool = ret->next;
							HX_STACK_LINE(4674)
							ret->next = null();
						}
						HX_STACK_LINE(4674)
						Dynamic();
					}
					HX_STACK_LINE(4674)
					ret->elt = oc;
					HX_STACK_LINE(4674)
					temp = ret;
				}
				HX_STACK_LINE(4674)
				temp->next = _this->head;
				HX_STACK_LINE(4674)
				_this->head = temp;
				HX_STACK_LINE(4674)
				_this->modified = true;
				HX_STACK_LINE(4674)
				(_this->length)++;
				HX_STACK_LINE(4674)
				oc;
			}
			HX_STACK_LINE(4675)
			if (((oc->waket > oc->island->waket))){
				HX_STACK_LINE(4675)
				oc->island->waket = oc->waket;
			}
		}
		HX_STACK_LINE(4677)
		while((true)){
			HX_STACK_LINE(4677)
			if ((!((!(((this->islands->next == null()))))))){
				HX_STACK_LINE(4677)
				break;
			}
			HX_STACK_LINE(4678)
			::zpp_nape::space::ZPP_Island i;		HX_STACK_VAR(i,"i");
			HX_STACK_LINE(4678)
			{
				HX_STACK_LINE(4678)
				::zpp_nape::space::ZPP_Island _this = this->islands;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(4678)
				::zpp_nape::space::ZPP_Island ret = _this->next;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(4678)
				_this->pop();
				HX_STACK_LINE(4678)
				i = ret;
			}
			HX_STACK_LINE(4679)
			if ((i->sleep)){
				HX_STACK_LINE(4681)
				::zpp_nape::util::ZNPNode_ZPP_Component cx_ite = i->comps->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(4682)
				while((true)){
					HX_STACK_LINE(4682)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(4682)
						break;
					}
					HX_STACK_LINE(4683)
					::zpp_nape::space::ZPP_Component c = cx_ite->elt;		HX_STACK_VAR(c,"c");
					HX_STACK_LINE(4685)
					if ((c->isBody)){
						HX_STACK_LINE(4686)
						::zpp_nape::phys::ZPP_Body b = c->body;		HX_STACK_VAR(b,"b");
						HX_STACK_LINE(4687)
						{
							HX_STACK_LINE(4688)
							b->velx = (int)0;
							HX_STACK_LINE(4689)
							b->vely = (int)0;
							HX_STACK_LINE(4698)
							{
							}
						}
						HX_STACK_LINE(4707)
						b->angvel = (int)0;
						HX_STACK_LINE(4708)
						c->sleeping = true;
						HX_STACK_LINE(4709)
						{
							HX_STACK_LINE(4710)
							::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = b->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(4711)
							while((true)){
								HX_STACK_LINE(4711)
								if ((!(((cx_ite1 != null()))))){
									HX_STACK_LINE(4711)
									break;
								}
								HX_STACK_LINE(4712)
								::zpp_nape::shape::ZPP_Shape shape = cx_ite1->elt;		HX_STACK_VAR(shape,"shape");
								HX_STACK_LINE(4713)
								this->bphase->sync(shape);
								HX_STACK_LINE(4714)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(4717)
						this->bodyCbSleep(b);
					}
					else{
						HX_STACK_LINE(4720)
						::zpp_nape::constraint::ZPP_Constraint con = c->constraint;		HX_STACK_VAR(con,"con");
						HX_STACK_LINE(4721)
						this->constraintCbSleep(con);
						HX_STACK_LINE(4722)
						c->sleeping = true;
					}
					HX_STACK_LINE(4725)
					cx_ite = cx_ite->next;
				}
			}
			else{
				HX_STACK_LINE(4730)
				while((true)){
					HX_STACK_LINE(4730)
					if ((!((!(((i->comps->head == null()))))))){
						HX_STACK_LINE(4730)
						break;
					}
					HX_STACK_LINE(4731)
					::zpp_nape::space::ZPP_Component c;		HX_STACK_VAR(c,"c");
					HX_STACK_LINE(4731)
					{
						HX_STACK_LINE(4731)
						::zpp_nape::util::ZNPList_ZPP_Component _this = i->comps;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4731)
						::zpp_nape::space::ZPP_Component ret = _this->head->elt;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4731)
						_this->pop();
						HX_STACK_LINE(4731)
						c = ret;
					}
					HX_STACK_LINE(4732)
					c->waket = i->waket;
					HX_STACK_LINE(4733)
					if ((c->isBody)){
						HX_STACK_LINE(4733)
						::zpp_nape::util::ZNPList_ZPP_Body _this = this->live;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4733)
						::zpp_nape::phys::ZPP_Body o = c->body;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(4733)
						::zpp_nape::util::ZNPNode_ZPP_Body temp;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(4733)
						{
							HX_STACK_LINE(4733)
							::zpp_nape::util::ZNPNode_ZPP_Body ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(4733)
							{
								HX_STACK_LINE(4733)
								if (((::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool == null()))){
									HX_STACK_LINE(4733)
									::zpp_nape::util::ZNPNode_ZPP_Body _g3 = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::__new();		HX_STACK_VAR(_g3,"_g3");
									HX_STACK_LINE(4733)
									ret = _g3;
								}
								else{
									HX_STACK_LINE(4733)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool;
									HX_STACK_LINE(4733)
									::zpp_nape::util::ZNPNode_ZPP_Body_obj::zpp_pool = ret->next;
									HX_STACK_LINE(4733)
									ret->next = null();
								}
								HX_STACK_LINE(4733)
								Dynamic();
							}
							HX_STACK_LINE(4733)
							ret->elt = o;
							HX_STACK_LINE(4733)
							temp = ret;
						}
						HX_STACK_LINE(4733)
						temp->next = _this->head;
						HX_STACK_LINE(4733)
						_this->head = temp;
						HX_STACK_LINE(4733)
						_this->modified = true;
						HX_STACK_LINE(4733)
						(_this->length)++;
						HX_STACK_LINE(4733)
						o;
					}
					else{
						HX_STACK_LINE(4734)
						::zpp_nape::util::ZNPList_ZPP_Constraint _this = this->live_constraints;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4734)
						::zpp_nape::constraint::ZPP_Constraint o = c->constraint;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(4734)
						::zpp_nape::util::ZNPNode_ZPP_Constraint temp;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(4734)
						{
							HX_STACK_LINE(4734)
							::zpp_nape::util::ZNPNode_ZPP_Constraint ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(4734)
							{
								HX_STACK_LINE(4734)
								if (((::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool == null()))){
									HX_STACK_LINE(4734)
									::zpp_nape::util::ZNPNode_ZPP_Constraint _g4 = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::__new();		HX_STACK_VAR(_g4,"_g4");
									HX_STACK_LINE(4734)
									ret = _g4;
								}
								else{
									HX_STACK_LINE(4734)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool;
									HX_STACK_LINE(4734)
									::zpp_nape::util::ZNPNode_ZPP_Constraint_obj::zpp_pool = ret->next;
									HX_STACK_LINE(4734)
									ret->next = null();
								}
								HX_STACK_LINE(4734)
								Dynamic();
							}
							HX_STACK_LINE(4734)
							ret->elt = o;
							HX_STACK_LINE(4734)
							temp = ret;
						}
						HX_STACK_LINE(4734)
						temp->next = _this->head;
						HX_STACK_LINE(4734)
						_this->head = temp;
						HX_STACK_LINE(4734)
						_this->modified = true;
						HX_STACK_LINE(4734)
						(_this->length)++;
						HX_STACK_LINE(4734)
						o;
					}
					HX_STACK_LINE(4735)
					{
						HX_STACK_LINE(4735)
						c->sleeping = false;
						HX_STACK_LINE(4735)
						c->island = null();
						HX_STACK_LINE(4735)
						c->parent = c;
						HX_STACK_LINE(4735)
						c->rank = (int)0;
					}
				}
				HX_STACK_LINE(4737)
				{
					HX_STACK_LINE(4738)
					::zpp_nape::space::ZPP_Island o = i;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(4748)
					o->next = ::zpp_nape::space::ZPP_Island_obj::zpp_pool;
					HX_STACK_LINE(4749)
					::zpp_nape::space::ZPP_Island_obj::zpp_pool = o;
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,doForests,(void))

Void ZPP_Space_obj::sleepArbiters( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","sleepArbiters",0xb30aff6b,"zpp_nape.space.ZPP_Space.sleepArbiters","zpp_nape/space/Space.hx",4757,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(4758)
		{
			HX_STACK_LINE(4759)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(4760)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter arbs = this->c_arbiters_true;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(4761)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(4762)
			bool fst = (this->c_arbiters_false != null());		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(4764)
			if (((bool(fst) && bool((arbite == null()))))){
				HX_STACK_LINE(4765)
				fst = false;
				HX_STACK_LINE(4766)
				arbite = this->c_arbiters_false->head;
				HX_STACK_LINE(4767)
				arbs = this->c_arbiters_false;
				HX_STACK_LINE(4768)
				pre = null();
			}
			HX_STACK_LINE(4771)
			while((true)){
				HX_STACK_LINE(4771)
				if ((!(((arbite != null()))))){
					HX_STACK_LINE(4771)
					break;
				}
				HX_STACK_LINE(4772)
				::zpp_nape::dynamics::ZPP_ColArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4781)
				if (((bool(arb->b1->component->sleeping) && bool(arb->b2->component->sleeping)))){
					HX_STACK_LINE(4782)
					arb->sleep_stamp = this->stamp;
					HX_STACK_LINE(4783)
					arb->sleeping = true;
					HX_STACK_LINE(4784)
					::zpp_nape::util::ZNPNode_ZPP_ColArbiter _g;		HX_STACK_VAR(_g,"_g");
					HX_STACK_LINE(4784)
					{
						HX_STACK_LINE(4784)
						::zpp_nape::util::ZNPNode_ZPP_ColArbiter old;		HX_STACK_VAR(old,"old");
						HX_STACK_LINE(4784)
						::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4784)
						if (((pre == null()))){
							HX_STACK_LINE(4784)
							old = arbs->head;
							HX_STACK_LINE(4784)
							ret = old->next;
							HX_STACK_LINE(4784)
							arbs->head = ret;
							HX_STACK_LINE(4784)
							if (((arbs->head == null()))){
								HX_STACK_LINE(4784)
								arbs->pushmod = true;
							}
						}
						else{
							HX_STACK_LINE(4784)
							old = pre->next;
							HX_STACK_LINE(4784)
							ret = old->next;
							HX_STACK_LINE(4784)
							pre->next = ret;
							HX_STACK_LINE(4784)
							if (((ret == null()))){
								HX_STACK_LINE(4784)
								arbs->pushmod = true;
							}
						}
						HX_STACK_LINE(4784)
						{
							HX_STACK_LINE(4784)
							::zpp_nape::util::ZNPNode_ZPP_ColArbiter o = old;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(4784)
							o->elt = null();
							HX_STACK_LINE(4784)
							o->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
							HX_STACK_LINE(4784)
							::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
						}
						HX_STACK_LINE(4784)
						arbs->modified = true;
						HX_STACK_LINE(4784)
						(arbs->length)--;
						HX_STACK_LINE(4784)
						arbs->pushmod = true;
						HX_STACK_LINE(4784)
						_g = ret;
					}
					HX_STACK_LINE(4784)
					arbite = _g;
					HX_STACK_LINE(4786)
					if (((bool(fst) && bool((arbite == null()))))){
						HX_STACK_LINE(4787)
						fst = false;
						HX_STACK_LINE(4788)
						arbite = this->c_arbiters_false->head;
						HX_STACK_LINE(4789)
						arbs = this->c_arbiters_false;
						HX_STACK_LINE(4790)
						pre = null();
					}
					HX_STACK_LINE(4793)
					continue;
				}
				HX_STACK_LINE(4795)
				pre = arbite;
				HX_STACK_LINE(4796)
				arbite = arbite->next;
				HX_STACK_LINE(4798)
				if (((bool(fst) && bool((arbite == null()))))){
					HX_STACK_LINE(4799)
					fst = false;
					HX_STACK_LINE(4800)
					arbite = this->c_arbiters_false->head;
					HX_STACK_LINE(4801)
					arbs = this->c_arbiters_false;
					HX_STACK_LINE(4802)
					pre = null();
				}
			}
		}
		HX_STACK_LINE(4807)
		{
			HX_STACK_LINE(4808)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(4809)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter arbs = this->f_arbiters;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(4810)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(4811)
			bool fst = false;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(4813)
			if (((bool(fst) && bool((arbite == null()))))){
				HX_STACK_LINE(4814)
				fst = false;
				HX_STACK_LINE(4815)
				::zpp_nape::util::ZNPNode_ZPP_FluidArbiter _g1 = Dynamic()();		HX_STACK_VAR(_g1,"_g1");
				HX_STACK_LINE(4815)
				arbite = _g1;
				HX_STACK_LINE(4816)
				arbs = null();
				HX_STACK_LINE(4817)
				pre = null();
			}
			HX_STACK_LINE(4820)
			while((true)){
				HX_STACK_LINE(4820)
				if ((!(((arbite != null()))))){
					HX_STACK_LINE(4820)
					break;
				}
				HX_STACK_LINE(4821)
				::zpp_nape::dynamics::ZPP_FluidArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4830)
				if (((bool(arb->b1->component->sleeping) && bool(arb->b2->component->sleeping)))){
					HX_STACK_LINE(4831)
					arb->sleep_stamp = this->stamp;
					HX_STACK_LINE(4832)
					arb->sleeping = true;
					HX_STACK_LINE(4833)
					::zpp_nape::util::ZNPNode_ZPP_FluidArbiter _g2;		HX_STACK_VAR(_g2,"_g2");
					HX_STACK_LINE(4833)
					{
						HX_STACK_LINE(4833)
						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old;		HX_STACK_VAR(old,"old");
						HX_STACK_LINE(4833)
						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4833)
						if (((pre == null()))){
							HX_STACK_LINE(4833)
							old = arbs->head;
							HX_STACK_LINE(4833)
							ret = old->next;
							HX_STACK_LINE(4833)
							arbs->head = ret;
							HX_STACK_LINE(4833)
							if (((arbs->head == null()))){
								HX_STACK_LINE(4833)
								arbs->pushmod = true;
							}
						}
						else{
							HX_STACK_LINE(4833)
							old = pre->next;
							HX_STACK_LINE(4833)
							ret = old->next;
							HX_STACK_LINE(4833)
							pre->next = ret;
							HX_STACK_LINE(4833)
							if (((ret == null()))){
								HX_STACK_LINE(4833)
								arbs->pushmod = true;
							}
						}
						HX_STACK_LINE(4833)
						{
							HX_STACK_LINE(4833)
							::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = old;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(4833)
							o->elt = null();
							HX_STACK_LINE(4833)
							o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
							HX_STACK_LINE(4833)
							::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
						}
						HX_STACK_LINE(4833)
						arbs->modified = true;
						HX_STACK_LINE(4833)
						(arbs->length)--;
						HX_STACK_LINE(4833)
						arbs->pushmod = true;
						HX_STACK_LINE(4833)
						_g2 = ret;
					}
					HX_STACK_LINE(4833)
					arbite = _g2;
					HX_STACK_LINE(4835)
					if (((bool(fst) && bool((arbite == null()))))){
						HX_STACK_LINE(4836)
						fst = false;
						HX_STACK_LINE(4837)
						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter _g3 = Dynamic()();		HX_STACK_VAR(_g3,"_g3");
						HX_STACK_LINE(4837)
						arbite = _g3;
						HX_STACK_LINE(4838)
						arbs = null();
						HX_STACK_LINE(4839)
						pre = null();
					}
					HX_STACK_LINE(4842)
					continue;
				}
				HX_STACK_LINE(4844)
				pre = arbite;
				HX_STACK_LINE(4845)
				arbite = arbite->next;
				HX_STACK_LINE(4847)
				if (((bool(fst) && bool((arbite == null()))))){
					HX_STACK_LINE(4848)
					fst = false;
					HX_STACK_LINE(4849)
					::zpp_nape::util::ZNPNode_ZPP_FluidArbiter _g4 = Dynamic()();		HX_STACK_VAR(_g4,"_g4");
					HX_STACK_LINE(4849)
					arbite = _g4;
					HX_STACK_LINE(4850)
					arbs = null();
					HX_STACK_LINE(4851)
					pre = null();
				}
			}
		}
		HX_STACK_LINE(4856)
		{
			HX_STACK_LINE(4857)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(4858)
			::zpp_nape::util::ZNPList_ZPP_SensorArbiter arbs = this->s_arbiters;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(4859)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(4860)
			bool fst = false;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(4862)
			if (((bool(fst) && bool((arbite == null()))))){
				HX_STACK_LINE(4863)
				fst = false;
				HX_STACK_LINE(4864)
				::zpp_nape::util::ZNPNode_ZPP_SensorArbiter _g5 = Dynamic()();		HX_STACK_VAR(_g5,"_g5");
				HX_STACK_LINE(4864)
				arbite = _g5;
				HX_STACK_LINE(4865)
				arbs = null();
				HX_STACK_LINE(4866)
				pre = null();
			}
			HX_STACK_LINE(4869)
			while((true)){
				HX_STACK_LINE(4869)
				if ((!(((arbite != null()))))){
					HX_STACK_LINE(4869)
					break;
				}
				HX_STACK_LINE(4870)
				::zpp_nape::dynamics::ZPP_SensorArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(4879)
				if (((bool(arb->b1->component->sleeping) && bool(arb->b2->component->sleeping)))){
					HX_STACK_LINE(4880)
					arb->sleep_stamp = this->stamp;
					HX_STACK_LINE(4881)
					arb->sleeping = true;
					HX_STACK_LINE(4882)
					::zpp_nape::util::ZNPNode_ZPP_SensorArbiter _g6;		HX_STACK_VAR(_g6,"_g6");
					HX_STACK_LINE(4882)
					{
						HX_STACK_LINE(4882)
						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter old;		HX_STACK_VAR(old,"old");
						HX_STACK_LINE(4882)
						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(4882)
						if (((pre == null()))){
							HX_STACK_LINE(4882)
							old = arbs->head;
							HX_STACK_LINE(4882)
							ret = old->next;
							HX_STACK_LINE(4882)
							arbs->head = ret;
							HX_STACK_LINE(4882)
							if (((arbs->head == null()))){
								HX_STACK_LINE(4882)
								arbs->pushmod = true;
							}
						}
						else{
							HX_STACK_LINE(4882)
							old = pre->next;
							HX_STACK_LINE(4882)
							ret = old->next;
							HX_STACK_LINE(4882)
							pre->next = ret;
							HX_STACK_LINE(4882)
							if (((ret == null()))){
								HX_STACK_LINE(4882)
								arbs->pushmod = true;
							}
						}
						HX_STACK_LINE(4882)
						{
							HX_STACK_LINE(4882)
							::zpp_nape::util::ZNPNode_ZPP_SensorArbiter o = old;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(4882)
							o->elt = null();
							HX_STACK_LINE(4882)
							o->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
							HX_STACK_LINE(4882)
							::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o;
						}
						HX_STACK_LINE(4882)
						arbs->modified = true;
						HX_STACK_LINE(4882)
						(arbs->length)--;
						HX_STACK_LINE(4882)
						arbs->pushmod = true;
						HX_STACK_LINE(4882)
						_g6 = ret;
					}
					HX_STACK_LINE(4882)
					arbite = _g6;
					HX_STACK_LINE(4884)
					if (((bool(fst) && bool((arbite == null()))))){
						HX_STACK_LINE(4885)
						fst = false;
						HX_STACK_LINE(4886)
						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter _g7 = Dynamic()();		HX_STACK_VAR(_g7,"_g7");
						HX_STACK_LINE(4886)
						arbite = _g7;
						HX_STACK_LINE(4887)
						arbs = null();
						HX_STACK_LINE(4888)
						pre = null();
					}
					HX_STACK_LINE(4891)
					continue;
				}
				HX_STACK_LINE(4893)
				pre = arbite;
				HX_STACK_LINE(4894)
				arbite = arbite->next;
				HX_STACK_LINE(4896)
				if (((bool(fst) && bool((arbite == null()))))){
					HX_STACK_LINE(4897)
					fst = false;
					HX_STACK_LINE(4898)
					::zpp_nape::util::ZNPNode_ZPP_SensorArbiter _g8 = Dynamic()();		HX_STACK_VAR(_g8,"_g8");
					HX_STACK_LINE(4898)
					arbite = _g8;
					HX_STACK_LINE(4899)
					arbs = null();
					HX_STACK_LINE(4900)
					pre = null();
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,sleepArbiters,(void))

Void ZPP_Space_obj::static_validation( ::zpp_nape::phys::ZPP_Body body){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","static_validation",0xfc081734,"zpp_nape.space.ZPP_Space.static_validation","zpp_nape/space/Space.hx",4906,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(body,"body")
		HX_STACK_LINE(4907)
		if ((!(((body->shapes->head == null()))))){
			HX_STACK_LINE(4908)
			if ((body->zip_aabb)){
				HX_STACK_LINE(4908)
				body->zip_aabb = false;
				HX_STACK_LINE(4908)
				{
					HX_STACK_LINE(4908)
					body->aabb->minx = ::Math_obj::POSITIVE_INFINITY;
					HX_STACK_LINE(4908)
					body->aabb->miny = ::Math_obj::POSITIVE_INFINITY;
					HX_STACK_LINE(4908)
					{
					}
				}
				HX_STACK_LINE(4908)
				{
					HX_STACK_LINE(4908)
					body->aabb->maxx = ::Math_obj::NEGATIVE_INFINITY;
					HX_STACK_LINE(4908)
					body->aabb->maxy = ::Math_obj::NEGATIVE_INFINITY;
					HX_STACK_LINE(4908)
					{
					}
				}
				HX_STACK_LINE(4908)
				{
					HX_STACK_LINE(4908)
					::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = body->shapes->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(4908)
					while((true)){
						HX_STACK_LINE(4908)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(4908)
							break;
						}
						HX_STACK_LINE(4908)
						::zpp_nape::shape::ZPP_Shape s = cx_ite->elt;		HX_STACK_VAR(s,"s");
						HX_STACK_LINE(4908)
						{
							HX_STACK_LINE(4908)
							if ((s->zip_aabb)){
								HX_STACK_LINE(4908)
								if (((s->body != null()))){
									HX_STACK_LINE(4908)
									s->zip_aabb = false;
									HX_STACK_LINE(4908)
									if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
										HX_STACK_LINE(4908)
										::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4908)
										if ((_this->zip_worldCOM)){
											HX_STACK_LINE(4908)
											if (((_this->body != null()))){
												HX_STACK_LINE(4908)
												_this->zip_worldCOM = false;
												HX_STACK_LINE(4908)
												if ((_this->zip_localCOM)){
													HX_STACK_LINE(4908)
													_this->zip_localCOM = false;
													HX_STACK_LINE(4908)
													if (((_this->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
														HX_STACK_LINE(4908)
														::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
														HX_STACK_LINE(4908)
														if (((_this1->lverts->next->next == null()))){
															HX_STACK_LINE(4908)
															_this1->localCOMx = _this1->lverts->next->x;
															HX_STACK_LINE(4908)
															_this1->localCOMy = _this1->lverts->next->y;
															HX_STACK_LINE(4908)
															Dynamic();
														}
														else{
															HX_STACK_LINE(4908)
															if (((_this1->lverts->next->next->next == null()))){
																HX_STACK_LINE(4908)
																{
																	HX_STACK_LINE(4908)
																	_this1->localCOMx = _this1->lverts->next->x;
																	HX_STACK_LINE(4908)
																	_this1->localCOMy = _this1->lverts->next->y;
																	HX_STACK_LINE(4908)
																	{
																	}
																}
																HX_STACK_LINE(4908)
																{
																	HX_STACK_LINE(4908)
																	Float t = 1.0;		HX_STACK_VAR(t,"t");
																	HX_STACK_LINE(4908)
																	hx::AddEq(_this1->localCOMx,(_this1->lverts->next->next->x * t));
																	HX_STACK_LINE(4908)
																	hx::AddEq(_this1->localCOMy,(_this1->lverts->next->next->y * t));
																}
																HX_STACK_LINE(4908)
																{
																	HX_STACK_LINE(4908)
																	Float t = 0.5;		HX_STACK_VAR(t,"t");
																	HX_STACK_LINE(4908)
																	hx::MultEq(_this1->localCOMx,t);
																	HX_STACK_LINE(4908)
																	hx::MultEq(_this1->localCOMy,t);
																}
															}
															else{
																HX_STACK_LINE(4908)
																{
																	HX_STACK_LINE(4908)
																	_this1->localCOMx = (int)0;
																	HX_STACK_LINE(4908)
																	_this1->localCOMy = (int)0;
																	HX_STACK_LINE(4908)
																	{
																	}
																}
																HX_STACK_LINE(4908)
																Float area = 0.0;		HX_STACK_VAR(area,"area");
																HX_STACK_LINE(4908)
																{
																	HX_STACK_LINE(4908)
																	::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this1->lverts->next;		HX_STACK_VAR(cx_ite1,"cx_ite1");
																	HX_STACK_LINE(4908)
																	::zpp_nape::geom::ZPP_Vec2 u = cx_ite1;		HX_STACK_VAR(u,"u");
																	HX_STACK_LINE(4908)
																	cx_ite1 = cx_ite1->next;
																	HX_STACK_LINE(4908)
																	::zpp_nape::geom::ZPP_Vec2 v = cx_ite1;		HX_STACK_VAR(v,"v");
																	HX_STACK_LINE(4908)
																	cx_ite1 = cx_ite1->next;
																	HX_STACK_LINE(4908)
																	while((true)){
																		HX_STACK_LINE(4908)
																		if ((!(((cx_ite1 != null()))))){
																			HX_STACK_LINE(4908)
																			break;
																		}
																		HX_STACK_LINE(4908)
																		::zpp_nape::geom::ZPP_Vec2 w = cx_ite1;		HX_STACK_VAR(w,"w");
																		HX_STACK_LINE(4908)
																		{
																			HX_STACK_LINE(4908)
																			hx::AddEq(area,(v->x * ((w->y - u->y))));
																			HX_STACK_LINE(4908)
																			Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
																			HX_STACK_LINE(4908)
																			hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
																			HX_STACK_LINE(4908)
																			hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
																		}
																		HX_STACK_LINE(4908)
																		u = v;
																		HX_STACK_LINE(4908)
																		v = w;
																		HX_STACK_LINE(4908)
																		cx_ite1 = cx_ite1->next;
																	}
																	HX_STACK_LINE(4908)
																	cx_ite1 = _this1->lverts->next;
																	HX_STACK_LINE(4908)
																	::zpp_nape::geom::ZPP_Vec2 w = cx_ite1;		HX_STACK_VAR(w,"w");
																	HX_STACK_LINE(4908)
																	{
																		HX_STACK_LINE(4908)
																		hx::AddEq(area,(v->x * ((w->y - u->y))));
																		HX_STACK_LINE(4908)
																		Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
																		HX_STACK_LINE(4908)
																		hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
																		HX_STACK_LINE(4908)
																		hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
																	}
																	HX_STACK_LINE(4908)
																	u = v;
																	HX_STACK_LINE(4908)
																	v = w;
																	HX_STACK_LINE(4908)
																	cx_ite1 = cx_ite1->next;
																	HX_STACK_LINE(4908)
																	::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite1;		HX_STACK_VAR(w1,"w1");
																	HX_STACK_LINE(4908)
																	{
																		HX_STACK_LINE(4908)
																		hx::AddEq(area,(v->x * ((w1->y - u->y))));
																		HX_STACK_LINE(4908)
																		Float cf = ((w1->y * v->x) - (w1->x * v->y));		HX_STACK_VAR(cf,"cf");
																		HX_STACK_LINE(4908)
																		hx::AddEq(_this1->localCOMx,(((v->x + w1->x)) * cf));
																		HX_STACK_LINE(4908)
																		hx::AddEq(_this1->localCOMy,(((v->y + w1->y)) * cf));
																	}
																}
																HX_STACK_LINE(4908)
																area = (Float((int)1) / Float((((int)3 * area))));
																HX_STACK_LINE(4908)
																{
																	HX_STACK_LINE(4908)
																	Float t = area;		HX_STACK_VAR(t,"t");
																	HX_STACK_LINE(4908)
																	hx::MultEq(_this1->localCOMx,t);
																	HX_STACK_LINE(4908)
																	hx::MultEq(_this1->localCOMy,t);
																}
															}
														}
													}
													HX_STACK_LINE(4908)
													if (((_this->wrap_localCOM != null()))){
														HX_STACK_LINE(4908)
														_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
														HX_STACK_LINE(4908)
														_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
														HX_STACK_LINE(4908)
														{
														}
													}
												}
												HX_STACK_LINE(4908)
												{
													HX_STACK_LINE(4908)
													::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(4908)
													if ((_this1->zip_axis)){
														HX_STACK_LINE(4908)
														_this1->zip_axis = false;
														HX_STACK_LINE(4908)
														{
															HX_STACK_LINE(4908)
															Float _g = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g,"_g");
															HX_STACK_LINE(4908)
															_this1->axisx = _g;
															HX_STACK_LINE(4908)
															Float _g1 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g1,"_g1");
															HX_STACK_LINE(4908)
															_this1->axisy = _g1;
															HX_STACK_LINE(4908)
															Dynamic();
														}
													}
												}
												HX_STACK_LINE(4908)
												{
													HX_STACK_LINE(4908)
													_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
													HX_STACK_LINE(4908)
													_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
												}
											}
										}
										HX_STACK_LINE(4908)
										Float rx = _this->radius;		HX_STACK_VAR(rx,"rx");
										HX_STACK_LINE(4908)
										Float ry = _this->radius;		HX_STACK_VAR(ry,"ry");
										HX_STACK_LINE(4908)
										{
											HX_STACK_LINE(4908)
											_this->aabb->minx = (_this->worldCOMx - rx);
											HX_STACK_LINE(4908)
											_this->aabb->miny = (_this->worldCOMy - ry);
										}
										HX_STACK_LINE(4908)
										{
											HX_STACK_LINE(4908)
											_this->aabb->maxx = (_this->worldCOMx + rx);
											HX_STACK_LINE(4908)
											_this->aabb->maxy = (_this->worldCOMy + ry);
										}
									}
									else{
										HX_STACK_LINE(4908)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4908)
										if ((_this->zip_gverts)){
											HX_STACK_LINE(4908)
											if (((_this->body != null()))){
												HX_STACK_LINE(4908)
												_this->zip_gverts = false;
												HX_STACK_LINE(4908)
												_this->validate_lverts();
												HX_STACK_LINE(4908)
												{
													HX_STACK_LINE(4908)
													::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(4908)
													if ((_this1->zip_axis)){
														HX_STACK_LINE(4908)
														_this1->zip_axis = false;
														HX_STACK_LINE(4908)
														{
															HX_STACK_LINE(4908)
															Float _g2 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g2,"_g2");
															HX_STACK_LINE(4908)
															_this1->axisx = _g2;
															HX_STACK_LINE(4908)
															Float _g3 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g3,"_g3");
															HX_STACK_LINE(4908)
															_this1->axisy = _g3;
															HX_STACK_LINE(4908)
															Dynamic();
														}
													}
												}
												HX_STACK_LINE(4908)
												::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
												HX_STACK_LINE(4908)
												{
													HX_STACK_LINE(4908)
													::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this->gverts->next;		HX_STACK_VAR(cx_ite1,"cx_ite1");
													HX_STACK_LINE(4908)
													while((true)){
														HX_STACK_LINE(4908)
														if ((!(((cx_ite1 != null()))))){
															HX_STACK_LINE(4908)
															break;
														}
														HX_STACK_LINE(4908)
														::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;		HX_STACK_VAR(g,"g");
														HX_STACK_LINE(4908)
														{
															HX_STACK_LINE(4908)
															::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
															HX_STACK_LINE(4908)
															li = li->next;
															HX_STACK_LINE(4908)
															{
																HX_STACK_LINE(4908)
																g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
																HX_STACK_LINE(4908)
																g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
															}
														}
														HX_STACK_LINE(4908)
														cx_ite1 = cx_ite1->next;
													}
												}
											}
										}
										HX_STACK_LINE(4908)
										::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
										HX_STACK_LINE(4908)
										{
											HX_STACK_LINE(4908)
											_this->aabb->minx = p0->x;
											HX_STACK_LINE(4908)
											_this->aabb->miny = p0->y;
											HX_STACK_LINE(4908)
											{
											}
										}
										HX_STACK_LINE(4908)
										{
											HX_STACK_LINE(4908)
											_this->aabb->maxx = p0->x;
											HX_STACK_LINE(4908)
											_this->aabb->maxy = p0->y;
											HX_STACK_LINE(4908)
											{
											}
										}
										HX_STACK_LINE(4908)
										{
											HX_STACK_LINE(4908)
											::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite1,"cx_ite1");
											HX_STACK_LINE(4908)
											while((true)){
												HX_STACK_LINE(4908)
												if ((!(((cx_ite1 != null()))))){
													HX_STACK_LINE(4908)
													break;
												}
												HX_STACK_LINE(4908)
												::zpp_nape::geom::ZPP_Vec2 p = cx_ite1;		HX_STACK_VAR(p,"p");
												HX_STACK_LINE(4908)
												{
													HX_STACK_LINE(4908)
													if (((p->x < _this->aabb->minx))){
														HX_STACK_LINE(4908)
														_this->aabb->minx = p->x;
													}
													HX_STACK_LINE(4908)
													if (((p->x > _this->aabb->maxx))){
														HX_STACK_LINE(4908)
														_this->aabb->maxx = p->x;
													}
													HX_STACK_LINE(4908)
													if (((p->y < _this->aabb->miny))){
														HX_STACK_LINE(4908)
														_this->aabb->miny = p->y;
													}
													HX_STACK_LINE(4908)
													if (((p->y > _this->aabb->maxy))){
														HX_STACK_LINE(4908)
														_this->aabb->maxy = p->y;
													}
												}
												HX_STACK_LINE(4908)
												cx_ite1 = cx_ite1->next;
											}
										}
									}
								}
							}
							HX_STACK_LINE(4908)
							{
								HX_STACK_LINE(4908)
								::zpp_nape::geom::ZPP_AABB _this = body->aabb;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(4908)
								::zpp_nape::geom::ZPP_AABB x = s->aabb;		HX_STACK_VAR(x,"x");
								HX_STACK_LINE(4908)
								if (((x->minx < _this->minx))){
									HX_STACK_LINE(4908)
									_this->minx = x->minx;
								}
								HX_STACK_LINE(4908)
								if (((x->maxx > _this->maxx))){
									HX_STACK_LINE(4908)
									_this->maxx = x->maxx;
								}
								HX_STACK_LINE(4908)
								if (((x->miny < _this->miny))){
									HX_STACK_LINE(4908)
									_this->miny = x->miny;
								}
								HX_STACK_LINE(4908)
								if (((x->maxy > _this->maxy))){
									HX_STACK_LINE(4908)
									_this->maxy = x->maxy;
								}
							}
						}
						HX_STACK_LINE(4908)
						cx_ite = cx_ite->next;
					}
				}
			}
		}
		HX_STACK_LINE(4910)
		body->validate_mass();
		HX_STACK_LINE(4911)
		body->validate_inertia();
		HX_STACK_LINE(4915)
		{
			HX_STACK_LINE(4916)
			::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite = body->shapes->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4917)
			while((true)){
				HX_STACK_LINE(4917)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(4917)
					break;
				}
				HX_STACK_LINE(4918)
				::zpp_nape::shape::ZPP_Shape s = cx_ite->elt;		HX_STACK_VAR(s,"s");
				HX_STACK_LINE(4920)
				if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
					HX_STACK_LINE(4921)
					{
						HX_STACK_LINE(4921)
						::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4921)
						if ((_this->zip_sanitation)){
							HX_STACK_LINE(4921)
							_this->zip_sanitation = false;
							HX_STACK_LINE(4921)
							_this->splice_collinear_real();
						}
					}
					HX_STACK_LINE(4928)
					{
						HX_STACK_LINE(4928)
						::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(4928)
						if ((_this->zip_gaxi)){
							HX_STACK_LINE(4928)
							if (((_this->body != null()))){
								HX_STACK_LINE(4928)
								_this->zip_gaxi = false;
								HX_STACK_LINE(4928)
								_this->validate_laxi();
								HX_STACK_LINE(4928)
								{
									HX_STACK_LINE(4928)
									::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
									HX_STACK_LINE(4928)
									if ((_this1->zip_axis)){
										HX_STACK_LINE(4928)
										_this1->zip_axis = false;
										HX_STACK_LINE(4928)
										{
											HX_STACK_LINE(4928)
											Float _g4 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g4,"_g4");
											HX_STACK_LINE(4928)
											_this1->axisx = _g4;
											HX_STACK_LINE(4928)
											Float _g5 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g5,"_g5");
											HX_STACK_LINE(4928)
											_this1->axisy = _g5;
											HX_STACK_LINE(4928)
											Dynamic();
										}
									}
								}
								HX_STACK_LINE(4928)
								if ((_this->zip_gverts)){
									HX_STACK_LINE(4928)
									if (((_this->body != null()))){
										HX_STACK_LINE(4928)
										_this->zip_gverts = false;
										HX_STACK_LINE(4928)
										_this->validate_lverts();
										HX_STACK_LINE(4928)
										{
											HX_STACK_LINE(4928)
											::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
											HX_STACK_LINE(4928)
											if ((_this1->zip_axis)){
												HX_STACK_LINE(4928)
												_this1->zip_axis = false;
												HX_STACK_LINE(4928)
												{
													HX_STACK_LINE(4928)
													Float _g6 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g6,"_g6");
													HX_STACK_LINE(4928)
													_this1->axisx = _g6;
													HX_STACK_LINE(4928)
													Float _g7 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g7,"_g7");
													HX_STACK_LINE(4928)
													_this1->axisy = _g7;
													HX_STACK_LINE(4928)
													Dynamic();
												}
											}
										}
										HX_STACK_LINE(4928)
										::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
										HX_STACK_LINE(4928)
										{
											HX_STACK_LINE(4928)
											::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this->gverts->next;		HX_STACK_VAR(cx_ite1,"cx_ite1");
											HX_STACK_LINE(4928)
											while((true)){
												HX_STACK_LINE(4928)
												if ((!(((cx_ite1 != null()))))){
													HX_STACK_LINE(4928)
													break;
												}
												HX_STACK_LINE(4928)
												::zpp_nape::geom::ZPP_Vec2 g = cx_ite1;		HX_STACK_VAR(g,"g");
												HX_STACK_LINE(4928)
												{
													HX_STACK_LINE(4928)
													::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
													HX_STACK_LINE(4928)
													li = li->next;
													HX_STACK_LINE(4928)
													{
														HX_STACK_LINE(4928)
														g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
														HX_STACK_LINE(4928)
														g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
													}
												}
												HX_STACK_LINE(4928)
												cx_ite1 = cx_ite1->next;
											}
										}
									}
								}
								HX_STACK_LINE(4928)
								::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;		HX_STACK_VAR(ite,"ite");
								HX_STACK_LINE(4928)
								{
									HX_STACK_LINE(4928)
									::zpp_nape::geom::ZPP_Vec2 cx_ite1 = _this->gverts->next;		HX_STACK_VAR(cx_ite1,"cx_ite1");
									HX_STACK_LINE(4928)
									::zpp_nape::geom::ZPP_Vec2 u = cx_ite1;		HX_STACK_VAR(u,"u");
									HX_STACK_LINE(4928)
									cx_ite1 = cx_ite1->next;
									HX_STACK_LINE(4928)
									while((true)){
										HX_STACK_LINE(4928)
										if ((!(((cx_ite1 != null()))))){
											HX_STACK_LINE(4928)
											break;
										}
										HX_STACK_LINE(4928)
										::zpp_nape::geom::ZPP_Vec2 v = cx_ite1;		HX_STACK_VAR(v,"v");
										HX_STACK_LINE(4928)
										{
											HX_STACK_LINE(4928)
											::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
											HX_STACK_LINE(4928)
											ite = ite->next;
											HX_STACK_LINE(4928)
											e->gp0 = u;
											HX_STACK_LINE(4928)
											e->gp1 = v;
											HX_STACK_LINE(4928)
											{
												HX_STACK_LINE(4928)
												e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
												HX_STACK_LINE(4928)
												e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
											}
											HX_STACK_LINE(4928)
											e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
											HX_STACK_LINE(4928)
											if (((e->wrap_gnorm != null()))){
												HX_STACK_LINE(4928)
												e->wrap_gnorm->zpp_inner->x = e->gnormx;
												HX_STACK_LINE(4928)
												e->wrap_gnorm->zpp_inner->y = e->gnormy;
												HX_STACK_LINE(4928)
												{
												}
											}
											HX_STACK_LINE(4928)
											e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
											HX_STACK_LINE(4928)
											e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
										}
										HX_STACK_LINE(4928)
										u = v;
										HX_STACK_LINE(4928)
										cx_ite1 = cx_ite1->next;
									}
									HX_STACK_LINE(4928)
									::zpp_nape::geom::ZPP_Vec2 v = _this->gverts->next;		HX_STACK_VAR(v,"v");
									HX_STACK_LINE(4928)
									{
										HX_STACK_LINE(4928)
										::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
										HX_STACK_LINE(4928)
										ite = ite->next;
										HX_STACK_LINE(4928)
										e->gp0 = u;
										HX_STACK_LINE(4928)
										e->gp1 = v;
										HX_STACK_LINE(4928)
										{
											HX_STACK_LINE(4928)
											e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
											HX_STACK_LINE(4928)
											e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
										}
										HX_STACK_LINE(4928)
										e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
										HX_STACK_LINE(4928)
										if (((e->wrap_gnorm != null()))){
											HX_STACK_LINE(4928)
											e->wrap_gnorm->zpp_inner->x = e->gnormx;
											HX_STACK_LINE(4928)
											e->wrap_gnorm->zpp_inner->y = e->gnormy;
											HX_STACK_LINE(4928)
											{
											}
										}
										HX_STACK_LINE(4928)
										e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
										HX_STACK_LINE(4928)
										e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
									}
								}
							}
						}
					}
				}
				HX_STACK_LINE(4931)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(4934)
		body->sweepFrozen = true;
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,static_validation,(void))

Void ZPP_Space_obj::validation( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","validation",0x7a29df2f,"zpp_nape.space.ZPP_Space.validation","zpp_nape/space/Space.hx",4936,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(4937)
		{
			HX_STACK_LINE(4937)
			::zpp_nape::space::ZPP_CbSetManager _this = this->cbsets;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(4937)
			if ((!(_this->cbsets->empty()))){
				HX_STACK_LINE(4937)
				::zpp_nape::util::ZPP_Set_ZPP_CbSet set_ite = _this->cbsets->parent;		HX_STACK_VAR(set_ite,"set_ite");
				HX_STACK_LINE(4937)
				while((true)){
					HX_STACK_LINE(4937)
					if ((!(((set_ite->prev != null()))))){
						HX_STACK_LINE(4937)
						break;
					}
					HX_STACK_LINE(4937)
					set_ite = set_ite->prev;
				}
				HX_STACK_LINE(4937)
				while((true)){
					HX_STACK_LINE(4937)
					if ((!(((set_ite != null()))))){
						HX_STACK_LINE(4937)
						break;
					}
					HX_STACK_LINE(4937)
					::zpp_nape::callbacks::ZPP_CbSet cb = set_ite->data;		HX_STACK_VAR(cb,"cb");
					HX_STACK_LINE(4937)
					cb->validate();
					HX_STACK_LINE(4937)
					if (((set_ite->next != null()))){
						HX_STACK_LINE(4937)
						set_ite = set_ite->next;
						HX_STACK_LINE(4937)
						while((true)){
							HX_STACK_LINE(4937)
							if ((!(((set_ite->prev != null()))))){
								HX_STACK_LINE(4937)
								break;
							}
							HX_STACK_LINE(4937)
							set_ite = set_ite->prev;
						}
					}
					else{
						HX_STACK_LINE(4937)
						while((true)){
							HX_STACK_LINE(4937)
							if ((!(((bool((set_ite->parent != null())) && bool((set_ite == set_ite->parent->next))))))){
								HX_STACK_LINE(4937)
								break;
							}
							HX_STACK_LINE(4937)
							set_ite = set_ite->parent;
						}
						HX_STACK_LINE(4937)
						set_ite = set_ite->parent;
					}
				}
			}
		}
		HX_STACK_LINE(4939)
		{
			HX_STACK_LINE(4940)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(4941)
			while((true)){
				HX_STACK_LINE(4941)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(4941)
					break;
				}
				HX_STACK_LINE(4942)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(4943)
				{
					HX_STACK_LINE(4944)
					cur->sweepRadius = (int)0;
					HX_STACK_LINE(4945)
					{
						HX_STACK_LINE(4946)
						::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(4947)
						while((true)){
							HX_STACK_LINE(4947)
							if ((!(((cx_ite1 != null()))))){
								HX_STACK_LINE(4947)
								break;
							}
							HX_STACK_LINE(4948)
							::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
							HX_STACK_LINE(4949)
							{
								HX_STACK_LINE(4950)
								if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
									HX_STACK_LINE(4951)
									{
										HX_STACK_LINE(4951)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4951)
										if ((_this->zip_sanitation)){
											HX_STACK_LINE(4951)
											_this->zip_sanitation = false;
											HX_STACK_LINE(4951)
											_this->splice_collinear_real();
										}
									}
									HX_STACK_LINE(4958)
									{
										HX_STACK_LINE(4958)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(4958)
										if ((_this->zip_gaxi)){
											HX_STACK_LINE(4958)
											if (((_this->body != null()))){
												HX_STACK_LINE(4958)
												_this->zip_gaxi = false;
												HX_STACK_LINE(4958)
												_this->validate_laxi();
												HX_STACK_LINE(4958)
												{
													HX_STACK_LINE(4958)
													::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(4958)
													if ((_this1->zip_axis)){
														HX_STACK_LINE(4958)
														_this1->zip_axis = false;
														HX_STACK_LINE(4958)
														{
															HX_STACK_LINE(4958)
															Float _g = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g,"_g");
															HX_STACK_LINE(4958)
															_this1->axisx = _g;
															HX_STACK_LINE(4958)
															Float _g1 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g1,"_g1");
															HX_STACK_LINE(4958)
															_this1->axisy = _g1;
															HX_STACK_LINE(4958)
															Dynamic();
														}
													}
												}
												HX_STACK_LINE(4958)
												if ((_this->zip_gverts)){
													HX_STACK_LINE(4958)
													if (((_this->body != null()))){
														HX_STACK_LINE(4958)
														_this->zip_gverts = false;
														HX_STACK_LINE(4958)
														_this->validate_lverts();
														HX_STACK_LINE(4958)
														{
															HX_STACK_LINE(4958)
															::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
															HX_STACK_LINE(4958)
															if ((_this1->zip_axis)){
																HX_STACK_LINE(4958)
																_this1->zip_axis = false;
																HX_STACK_LINE(4958)
																{
																	HX_STACK_LINE(4958)
																	Float _g2 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g2,"_g2");
																	HX_STACK_LINE(4958)
																	_this1->axisx = _g2;
																	HX_STACK_LINE(4958)
																	Float _g3 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g3,"_g3");
																	HX_STACK_LINE(4958)
																	_this1->axisy = _g3;
																	HX_STACK_LINE(4958)
																	Dynamic();
																}
															}
														}
														HX_STACK_LINE(4958)
														::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
														HX_STACK_LINE(4958)
														{
															HX_STACK_LINE(4958)
															::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(4958)
															while((true)){
																HX_STACK_LINE(4958)
																if ((!(((cx_ite2 != null()))))){
																	HX_STACK_LINE(4958)
																	break;
																}
																HX_STACK_LINE(4958)
																::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;		HX_STACK_VAR(g,"g");
																HX_STACK_LINE(4958)
																{
																	HX_STACK_LINE(4958)
																	::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																	HX_STACK_LINE(4958)
																	li = li->next;
																	HX_STACK_LINE(4958)
																	{
																		HX_STACK_LINE(4958)
																		g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
																		HX_STACK_LINE(4958)
																		g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
																	}
																}
																HX_STACK_LINE(4958)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
												}
												HX_STACK_LINE(4958)
												::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;		HX_STACK_VAR(ite,"ite");
												HX_STACK_LINE(4958)
												{
													HX_STACK_LINE(4958)
													::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(4958)
													::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;		HX_STACK_VAR(u,"u");
													HX_STACK_LINE(4958)
													cx_ite2 = cx_ite2->next;
													HX_STACK_LINE(4958)
													while((true)){
														HX_STACK_LINE(4958)
														if ((!(((cx_ite2 != null()))))){
															HX_STACK_LINE(4958)
															break;
														}
														HX_STACK_LINE(4958)
														::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;		HX_STACK_VAR(v,"v");
														HX_STACK_LINE(4958)
														{
															HX_STACK_LINE(4958)
															::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
															HX_STACK_LINE(4958)
															ite = ite->next;
															HX_STACK_LINE(4958)
															e->gp0 = u;
															HX_STACK_LINE(4958)
															e->gp1 = v;
															HX_STACK_LINE(4958)
															{
																HX_STACK_LINE(4958)
																e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
																HX_STACK_LINE(4958)
																e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
															}
															HX_STACK_LINE(4958)
															e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
															HX_STACK_LINE(4958)
															if (((e->wrap_gnorm != null()))){
																HX_STACK_LINE(4958)
																e->wrap_gnorm->zpp_inner->x = e->gnormx;
																HX_STACK_LINE(4958)
																e->wrap_gnorm->zpp_inner->y = e->gnormy;
																HX_STACK_LINE(4958)
																{
																}
															}
															HX_STACK_LINE(4958)
															e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
															HX_STACK_LINE(4958)
															e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
														}
														HX_STACK_LINE(4958)
														u = v;
														HX_STACK_LINE(4958)
														cx_ite2 = cx_ite2->next;
													}
													HX_STACK_LINE(4958)
													::zpp_nape::geom::ZPP_Vec2 v = _this->gverts->next;		HX_STACK_VAR(v,"v");
													HX_STACK_LINE(4958)
													{
														HX_STACK_LINE(4958)
														::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
														HX_STACK_LINE(4958)
														ite = ite->next;
														HX_STACK_LINE(4958)
														e->gp0 = u;
														HX_STACK_LINE(4958)
														e->gp1 = v;
														HX_STACK_LINE(4958)
														{
															HX_STACK_LINE(4958)
															e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
															HX_STACK_LINE(4958)
															e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
														}
														HX_STACK_LINE(4958)
														e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
														HX_STACK_LINE(4958)
														if (((e->wrap_gnorm != null()))){
															HX_STACK_LINE(4958)
															e->wrap_gnorm->zpp_inner->x = e->gnormx;
															HX_STACK_LINE(4958)
															e->wrap_gnorm->zpp_inner->y = e->gnormy;
															HX_STACK_LINE(4958)
															{
															}
														}
														HX_STACK_LINE(4958)
														e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
														HX_STACK_LINE(4958)
														e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
													}
												}
											}
										}
									}
								}
								HX_STACK_LINE(4960)
								s->validate_sweepRadius();
								HX_STACK_LINE(4961)
								if (((s->sweepRadius > cur->sweepRadius))){
									HX_STACK_LINE(4961)
									cur->sweepRadius = s->sweepRadius;
								}
							}
							HX_STACK_LINE(4963)
							cx_ite1 = cx_ite1->next;
						}
					}
					HX_STACK_LINE(4966)
					cur->validate_mass();
					HX_STACK_LINE(4967)
					cur->validate_inertia();
					HX_STACK_LINE(4968)
					if ((!(((cur->shapes->head == null()))))){
						HX_STACK_LINE(4969)
						if ((cur->zip_aabb)){
							HX_STACK_LINE(4969)
							cur->zip_aabb = false;
							HX_STACK_LINE(4969)
							{
								HX_STACK_LINE(4969)
								cur->aabb->minx = ::Math_obj::POSITIVE_INFINITY;
								HX_STACK_LINE(4969)
								cur->aabb->miny = ::Math_obj::POSITIVE_INFINITY;
								HX_STACK_LINE(4969)
								{
								}
							}
							HX_STACK_LINE(4969)
							{
								HX_STACK_LINE(4969)
								cur->aabb->maxx = ::Math_obj::NEGATIVE_INFINITY;
								HX_STACK_LINE(4969)
								cur->aabb->maxy = ::Math_obj::NEGATIVE_INFINITY;
								HX_STACK_LINE(4969)
								{
								}
							}
							HX_STACK_LINE(4969)
							{
								HX_STACK_LINE(4969)
								::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(4969)
								while((true)){
									HX_STACK_LINE(4969)
									if ((!(((cx_ite1 != null()))))){
										HX_STACK_LINE(4969)
										break;
									}
									HX_STACK_LINE(4969)
									::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
									HX_STACK_LINE(4969)
									{
										HX_STACK_LINE(4969)
										if ((s->zip_aabb)){
											HX_STACK_LINE(4969)
											if (((s->body != null()))){
												HX_STACK_LINE(4969)
												s->zip_aabb = false;
												HX_STACK_LINE(4969)
												if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
													HX_STACK_LINE(4969)
													::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(4969)
													if ((_this->zip_worldCOM)){
														HX_STACK_LINE(4969)
														if (((_this->body != null()))){
															HX_STACK_LINE(4969)
															_this->zip_worldCOM = false;
															HX_STACK_LINE(4969)
															if ((_this->zip_localCOM)){
																HX_STACK_LINE(4969)
																_this->zip_localCOM = false;
																HX_STACK_LINE(4969)
																if (((_this->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
																	HX_STACK_LINE(4969)
																	::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
																	HX_STACK_LINE(4969)
																	if (((_this1->lverts->next->next == null()))){
																		HX_STACK_LINE(4969)
																		_this1->localCOMx = _this1->lverts->next->x;
																		HX_STACK_LINE(4969)
																		_this1->localCOMy = _this1->lverts->next->y;
																		HX_STACK_LINE(4969)
																		Dynamic();
																	}
																	else{
																		HX_STACK_LINE(4969)
																		if (((_this1->lverts->next->next->next == null()))){
																			HX_STACK_LINE(4969)
																			{
																				HX_STACK_LINE(4969)
																				_this1->localCOMx = _this1->lverts->next->x;
																				HX_STACK_LINE(4969)
																				_this1->localCOMy = _this1->lverts->next->y;
																				HX_STACK_LINE(4969)
																				{
																				}
																			}
																			HX_STACK_LINE(4969)
																			{
																				HX_STACK_LINE(4969)
																				Float t = 1.0;		HX_STACK_VAR(t,"t");
																				HX_STACK_LINE(4969)
																				hx::AddEq(_this1->localCOMx,(_this1->lverts->next->next->x * t));
																				HX_STACK_LINE(4969)
																				hx::AddEq(_this1->localCOMy,(_this1->lverts->next->next->y * t));
																			}
																			HX_STACK_LINE(4969)
																			{
																				HX_STACK_LINE(4969)
																				Float t = 0.5;		HX_STACK_VAR(t,"t");
																				HX_STACK_LINE(4969)
																				hx::MultEq(_this1->localCOMx,t);
																				HX_STACK_LINE(4969)
																				hx::MultEq(_this1->localCOMy,t);
																			}
																		}
																		else{
																			HX_STACK_LINE(4969)
																			{
																				HX_STACK_LINE(4969)
																				_this1->localCOMx = (int)0;
																				HX_STACK_LINE(4969)
																				_this1->localCOMy = (int)0;
																				HX_STACK_LINE(4969)
																				{
																				}
																			}
																			HX_STACK_LINE(4969)
																			Float area = 0.0;		HX_STACK_VAR(area,"area");
																			HX_STACK_LINE(4969)
																			{
																				HX_STACK_LINE(4969)
																				::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this1->lverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																				HX_STACK_LINE(4969)
																				::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;		HX_STACK_VAR(u,"u");
																				HX_STACK_LINE(4969)
																				cx_ite2 = cx_ite2->next;
																				HX_STACK_LINE(4969)
																				::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;		HX_STACK_VAR(v,"v");
																				HX_STACK_LINE(4969)
																				cx_ite2 = cx_ite2->next;
																				HX_STACK_LINE(4969)
																				while((true)){
																					HX_STACK_LINE(4969)
																					if ((!(((cx_ite2 != null()))))){
																						HX_STACK_LINE(4969)
																						break;
																					}
																					HX_STACK_LINE(4969)
																					::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;		HX_STACK_VAR(w,"w");
																					HX_STACK_LINE(4969)
																					{
																						HX_STACK_LINE(4969)
																						hx::AddEq(area,(v->x * ((w->y - u->y))));
																						HX_STACK_LINE(4969)
																						Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
																						HX_STACK_LINE(4969)
																						hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
																						HX_STACK_LINE(4969)
																						hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
																					}
																					HX_STACK_LINE(4969)
																					u = v;
																					HX_STACK_LINE(4969)
																					v = w;
																					HX_STACK_LINE(4969)
																					cx_ite2 = cx_ite2->next;
																				}
																				HX_STACK_LINE(4969)
																				cx_ite2 = _this1->lverts->next;
																				HX_STACK_LINE(4969)
																				::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;		HX_STACK_VAR(w,"w");
																				HX_STACK_LINE(4969)
																				{
																					HX_STACK_LINE(4969)
																					hx::AddEq(area,(v->x * ((w->y - u->y))));
																					HX_STACK_LINE(4969)
																					Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
																					HX_STACK_LINE(4969)
																					hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
																					HX_STACK_LINE(4969)
																					hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
																				}
																				HX_STACK_LINE(4969)
																				u = v;
																				HX_STACK_LINE(4969)
																				v = w;
																				HX_STACK_LINE(4969)
																				cx_ite2 = cx_ite2->next;
																				HX_STACK_LINE(4969)
																				::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite2;		HX_STACK_VAR(w1,"w1");
																				HX_STACK_LINE(4969)
																				{
																					HX_STACK_LINE(4969)
																					hx::AddEq(area,(v->x * ((w1->y - u->y))));
																					HX_STACK_LINE(4969)
																					Float cf = ((w1->y * v->x) - (w1->x * v->y));		HX_STACK_VAR(cf,"cf");
																					HX_STACK_LINE(4969)
																					hx::AddEq(_this1->localCOMx,(((v->x + w1->x)) * cf));
																					HX_STACK_LINE(4969)
																					hx::AddEq(_this1->localCOMy,(((v->y + w1->y)) * cf));
																				}
																			}
																			HX_STACK_LINE(4969)
																			area = (Float((int)1) / Float((((int)3 * area))));
																			HX_STACK_LINE(4969)
																			{
																				HX_STACK_LINE(4969)
																				Float t = area;		HX_STACK_VAR(t,"t");
																				HX_STACK_LINE(4969)
																				hx::MultEq(_this1->localCOMx,t);
																				HX_STACK_LINE(4969)
																				hx::MultEq(_this1->localCOMy,t);
																			}
																		}
																	}
																}
																HX_STACK_LINE(4969)
																if (((_this->wrap_localCOM != null()))){
																	HX_STACK_LINE(4969)
																	_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
																	HX_STACK_LINE(4969)
																	_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
																	HX_STACK_LINE(4969)
																	{
																	}
																}
															}
															HX_STACK_LINE(4969)
															{
																HX_STACK_LINE(4969)
																::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																HX_STACK_LINE(4969)
																if ((_this1->zip_axis)){
																	HX_STACK_LINE(4969)
																	_this1->zip_axis = false;
																	HX_STACK_LINE(4969)
																	{
																		HX_STACK_LINE(4969)
																		Float _g4 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g4,"_g4");
																		HX_STACK_LINE(4969)
																		_this1->axisx = _g4;
																		HX_STACK_LINE(4969)
																		Float _g5 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g5,"_g5");
																		HX_STACK_LINE(4969)
																		_this1->axisy = _g5;
																		HX_STACK_LINE(4969)
																		Dynamic();
																	}
																}
															}
															HX_STACK_LINE(4969)
															{
																HX_STACK_LINE(4969)
																_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
																HX_STACK_LINE(4969)
																_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
															}
														}
													}
													HX_STACK_LINE(4969)
													Float rx = _this->radius;		HX_STACK_VAR(rx,"rx");
													HX_STACK_LINE(4969)
													Float ry = _this->radius;		HX_STACK_VAR(ry,"ry");
													HX_STACK_LINE(4969)
													{
														HX_STACK_LINE(4969)
														_this->aabb->minx = (_this->worldCOMx - rx);
														HX_STACK_LINE(4969)
														_this->aabb->miny = (_this->worldCOMy - ry);
													}
													HX_STACK_LINE(4969)
													{
														HX_STACK_LINE(4969)
														_this->aabb->maxx = (_this->worldCOMx + rx);
														HX_STACK_LINE(4969)
														_this->aabb->maxy = (_this->worldCOMy + ry);
													}
												}
												else{
													HX_STACK_LINE(4969)
													::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(4969)
													if ((_this->zip_gverts)){
														HX_STACK_LINE(4969)
														if (((_this->body != null()))){
															HX_STACK_LINE(4969)
															_this->zip_gverts = false;
															HX_STACK_LINE(4969)
															_this->validate_lverts();
															HX_STACK_LINE(4969)
															{
																HX_STACK_LINE(4969)
																::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																HX_STACK_LINE(4969)
																if ((_this1->zip_axis)){
																	HX_STACK_LINE(4969)
																	_this1->zip_axis = false;
																	HX_STACK_LINE(4969)
																	{
																		HX_STACK_LINE(4969)
																		Float _g6 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g6,"_g6");
																		HX_STACK_LINE(4969)
																		_this1->axisx = _g6;
																		HX_STACK_LINE(4969)
																		Float _g7 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g7,"_g7");
																		HX_STACK_LINE(4969)
																		_this1->axisy = _g7;
																		HX_STACK_LINE(4969)
																		Dynamic();
																	}
																}
															}
															HX_STACK_LINE(4969)
															::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
															HX_STACK_LINE(4969)
															{
																HX_STACK_LINE(4969)
																::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(4969)
																while((true)){
																	HX_STACK_LINE(4969)
																	if ((!(((cx_ite2 != null()))))){
																		HX_STACK_LINE(4969)
																		break;
																	}
																	HX_STACK_LINE(4969)
																	::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;		HX_STACK_VAR(g,"g");
																	HX_STACK_LINE(4969)
																	{
																		HX_STACK_LINE(4969)
																		::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																		HX_STACK_LINE(4969)
																		li = li->next;
																		HX_STACK_LINE(4969)
																		{
																			HX_STACK_LINE(4969)
																			g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
																			HX_STACK_LINE(4969)
																			g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
																		}
																	}
																	HX_STACK_LINE(4969)
																	cx_ite2 = cx_ite2->next;
																}
															}
														}
													}
													HX_STACK_LINE(4969)
													::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
													HX_STACK_LINE(4969)
													{
														HX_STACK_LINE(4969)
														_this->aabb->minx = p0->x;
														HX_STACK_LINE(4969)
														_this->aabb->miny = p0->y;
														HX_STACK_LINE(4969)
														{
														}
													}
													HX_STACK_LINE(4969)
													{
														HX_STACK_LINE(4969)
														_this->aabb->maxx = p0->x;
														HX_STACK_LINE(4969)
														_this->aabb->maxy = p0->y;
														HX_STACK_LINE(4969)
														{
														}
													}
													HX_STACK_LINE(4969)
													{
														HX_STACK_LINE(4969)
														::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(4969)
														while((true)){
															HX_STACK_LINE(4969)
															if ((!(((cx_ite2 != null()))))){
																HX_STACK_LINE(4969)
																break;
															}
															HX_STACK_LINE(4969)
															::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
															HX_STACK_LINE(4969)
															{
																HX_STACK_LINE(4969)
																if (((p->x < _this->aabb->minx))){
																	HX_STACK_LINE(4969)
																	_this->aabb->minx = p->x;
																}
																HX_STACK_LINE(4969)
																if (((p->x > _this->aabb->maxx))){
																	HX_STACK_LINE(4969)
																	_this->aabb->maxx = p->x;
																}
																HX_STACK_LINE(4969)
																if (((p->y < _this->aabb->miny))){
																	HX_STACK_LINE(4969)
																	_this->aabb->miny = p->y;
																}
																HX_STACK_LINE(4969)
																if (((p->y > _this->aabb->maxy))){
																	HX_STACK_LINE(4969)
																	_this->aabb->maxy = p->y;
																}
															}
															HX_STACK_LINE(4969)
															cx_ite2 = cx_ite2->next;
														}
													}
												}
											}
										}
										HX_STACK_LINE(4969)
										{
											HX_STACK_LINE(4969)
											::zpp_nape::geom::ZPP_AABB _this = cur->aabb;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(4969)
											::zpp_nape::geom::ZPP_AABB x = s->aabb;		HX_STACK_VAR(x,"x");
											HX_STACK_LINE(4969)
											if (((x->minx < _this->minx))){
												HX_STACK_LINE(4969)
												_this->minx = x->minx;
											}
											HX_STACK_LINE(4969)
											if (((x->maxx > _this->maxx))){
												HX_STACK_LINE(4969)
												_this->maxx = x->maxx;
											}
											HX_STACK_LINE(4969)
											if (((x->miny < _this->miny))){
												HX_STACK_LINE(4969)
												_this->miny = x->miny;
											}
											HX_STACK_LINE(4969)
											if (((x->maxy > _this->maxy))){
												HX_STACK_LINE(4969)
												_this->maxy = x->maxy;
											}
										}
									}
									HX_STACK_LINE(4969)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
						HX_STACK_LINE(4970)
						cur->validate_worldCOM();
					}
					HX_STACK_LINE(4972)
					cur->validate_gravMass();
					HX_STACK_LINE(4973)
					if ((cur->zip_axis)){
						HX_STACK_LINE(4973)
						cur->zip_axis = false;
						HX_STACK_LINE(4973)
						{
							HX_STACK_LINE(4973)
							Float _g8 = ::Math_obj::sin(cur->rot);		HX_STACK_VAR(_g8,"_g8");
							HX_STACK_LINE(4973)
							cur->axisx = _g8;
							HX_STACK_LINE(4973)
							Float _g9 = ::Math_obj::cos(cur->rot);		HX_STACK_VAR(_g9,"_g9");
							HX_STACK_LINE(4973)
							cur->axisy = _g9;
							HX_STACK_LINE(4973)
							Dynamic();
						}
					}
					HX_STACK_LINE(4982)
					{
						HX_STACK_LINE(4983)
						if (((bool(cur->component->woken) && bool((cur->cbSet != null()))))){
							HX_STACK_LINE(4985)
							::zpp_nape::util::ZNPNode_ZPP_BodyListener cx_ite1 = cur->cbSet->bodylisteners->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(4986)
							while((true)){
								HX_STACK_LINE(4986)
								if ((!(((cx_ite1 != null()))))){
									HX_STACK_LINE(4986)
									break;
								}
								HX_STACK_LINE(4987)
								::zpp_nape::callbacks::ZPP_BodyListener i = cx_ite1->elt;		HX_STACK_VAR(i,"i");
								HX_STACK_LINE(4988)
								{
									HX_STACK_LINE(4989)
									if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE))){
										HX_STACK_LINE(4990)
										cx_ite1 = cx_ite1->next;
										HX_STACK_LINE(4991)
										continue;
									}
									HX_STACK_LINE(4993)
									::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
									HX_STACK_LINE(4994)
									cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;
									HX_STACK_LINE(4995)
									cb->body = cur;
								}
								HX_STACK_LINE(4997)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(5001)
						cur->component->woken = false;
					}
					HX_STACK_LINE(5003)
					{
						HX_STACK_LINE(5004)
						::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(5005)
						while((true)){
							HX_STACK_LINE(5005)
							if ((!(((cx_ite1 != null()))))){
								HX_STACK_LINE(5005)
								break;
							}
							HX_STACK_LINE(5006)
							::zpp_nape::shape::ZPP_Shape shape = cx_ite1->elt;		HX_STACK_VAR(shape,"shape");
							HX_STACK_LINE(5007)
							this->bphase->sync(shape);
							HX_STACK_LINE(5008)
							cx_ite1 = cx_ite1->next;
						}
					}
				}
				HX_STACK_LINE(5012)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5017)
		{
			HX_STACK_LINE(5018)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->kinematics->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5019)
			while((true)){
				HX_STACK_LINE(5019)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(5019)
					break;
				}
				HX_STACK_LINE(5020)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5021)
				{
					HX_STACK_LINE(5022)
					cur->sweepRadius = (int)0;
					HX_STACK_LINE(5023)
					{
						HX_STACK_LINE(5024)
						::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(5025)
						while((true)){
							HX_STACK_LINE(5025)
							if ((!(((cx_ite1 != null()))))){
								HX_STACK_LINE(5025)
								break;
							}
							HX_STACK_LINE(5026)
							::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
							HX_STACK_LINE(5027)
							{
								HX_STACK_LINE(5028)
								if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
									HX_STACK_LINE(5029)
									{
										HX_STACK_LINE(5029)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(5029)
										if ((_this->zip_sanitation)){
											HX_STACK_LINE(5029)
											_this->zip_sanitation = false;
											HX_STACK_LINE(5029)
											_this->splice_collinear_real();
										}
									}
									HX_STACK_LINE(5036)
									{
										HX_STACK_LINE(5036)
										::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(5036)
										if ((_this->zip_gaxi)){
											HX_STACK_LINE(5036)
											if (((_this->body != null()))){
												HX_STACK_LINE(5036)
												_this->zip_gaxi = false;
												HX_STACK_LINE(5036)
												_this->validate_laxi();
												HX_STACK_LINE(5036)
												{
													HX_STACK_LINE(5036)
													::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(5036)
													if ((_this1->zip_axis)){
														HX_STACK_LINE(5036)
														_this1->zip_axis = false;
														HX_STACK_LINE(5036)
														{
															HX_STACK_LINE(5036)
															Float _g10 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g10,"_g10");
															HX_STACK_LINE(5036)
															_this1->axisx = _g10;
															HX_STACK_LINE(5036)
															Float _g11 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g11,"_g11");
															HX_STACK_LINE(5036)
															_this1->axisy = _g11;
															HX_STACK_LINE(5036)
															Dynamic();
														}
													}
												}
												HX_STACK_LINE(5036)
												if ((_this->zip_gverts)){
													HX_STACK_LINE(5036)
													if (((_this->body != null()))){
														HX_STACK_LINE(5036)
														_this->zip_gverts = false;
														HX_STACK_LINE(5036)
														_this->validate_lverts();
														HX_STACK_LINE(5036)
														{
															HX_STACK_LINE(5036)
															::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
															HX_STACK_LINE(5036)
															if ((_this1->zip_axis)){
																HX_STACK_LINE(5036)
																_this1->zip_axis = false;
																HX_STACK_LINE(5036)
																{
																	HX_STACK_LINE(5036)
																	Float _g12 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g12,"_g12");
																	HX_STACK_LINE(5036)
																	_this1->axisx = _g12;
																	HX_STACK_LINE(5036)
																	Float _g13 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g13,"_g13");
																	HX_STACK_LINE(5036)
																	_this1->axisy = _g13;
																	HX_STACK_LINE(5036)
																	Dynamic();
																}
															}
														}
														HX_STACK_LINE(5036)
														::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
														HX_STACK_LINE(5036)
														{
															HX_STACK_LINE(5036)
															::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(5036)
															while((true)){
																HX_STACK_LINE(5036)
																if ((!(((cx_ite2 != null()))))){
																	HX_STACK_LINE(5036)
																	break;
																}
																HX_STACK_LINE(5036)
																::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;		HX_STACK_VAR(g,"g");
																HX_STACK_LINE(5036)
																{
																	HX_STACK_LINE(5036)
																	::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																	HX_STACK_LINE(5036)
																	li = li->next;
																	HX_STACK_LINE(5036)
																	{
																		HX_STACK_LINE(5036)
																		g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
																		HX_STACK_LINE(5036)
																		g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
																	}
																}
																HX_STACK_LINE(5036)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
												}
												HX_STACK_LINE(5036)
												::zpp_nape::util::ZNPNode_ZPP_Edge ite = _this->edges->head;		HX_STACK_VAR(ite,"ite");
												HX_STACK_LINE(5036)
												{
													HX_STACK_LINE(5036)
													::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(5036)
													::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;		HX_STACK_VAR(u,"u");
													HX_STACK_LINE(5036)
													cx_ite2 = cx_ite2->next;
													HX_STACK_LINE(5036)
													while((true)){
														HX_STACK_LINE(5036)
														if ((!(((cx_ite2 != null()))))){
															HX_STACK_LINE(5036)
															break;
														}
														HX_STACK_LINE(5036)
														::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;		HX_STACK_VAR(v,"v");
														HX_STACK_LINE(5036)
														{
															HX_STACK_LINE(5036)
															::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
															HX_STACK_LINE(5036)
															ite = ite->next;
															HX_STACK_LINE(5036)
															e->gp0 = u;
															HX_STACK_LINE(5036)
															e->gp1 = v;
															HX_STACK_LINE(5036)
															{
																HX_STACK_LINE(5036)
																e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
																HX_STACK_LINE(5036)
																e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
															}
															HX_STACK_LINE(5036)
															e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
															HX_STACK_LINE(5036)
															if (((e->wrap_gnorm != null()))){
																HX_STACK_LINE(5036)
																e->wrap_gnorm->zpp_inner->x = e->gnormx;
																HX_STACK_LINE(5036)
																e->wrap_gnorm->zpp_inner->y = e->gnormy;
																HX_STACK_LINE(5036)
																{
																}
															}
															HX_STACK_LINE(5036)
															e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
															HX_STACK_LINE(5036)
															e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
														}
														HX_STACK_LINE(5036)
														u = v;
														HX_STACK_LINE(5036)
														cx_ite2 = cx_ite2->next;
													}
													HX_STACK_LINE(5036)
													::zpp_nape::geom::ZPP_Vec2 v = _this->gverts->next;		HX_STACK_VAR(v,"v");
													HX_STACK_LINE(5036)
													{
														HX_STACK_LINE(5036)
														::zpp_nape::shape::ZPP_Edge e = ite->elt;		HX_STACK_VAR(e,"e");
														HX_STACK_LINE(5036)
														ite = ite->next;
														HX_STACK_LINE(5036)
														e->gp0 = u;
														HX_STACK_LINE(5036)
														e->gp1 = v;
														HX_STACK_LINE(5036)
														{
															HX_STACK_LINE(5036)
															e->gnormx = ((_this->body->axisy * e->lnormx) - (_this->body->axisx * e->lnormy));
															HX_STACK_LINE(5036)
															e->gnormy = ((e->lnormx * _this->body->axisx) + (e->lnormy * _this->body->axisy));
														}
														HX_STACK_LINE(5036)
														e->gprojection = (((_this->body->posx * e->gnormx) + (_this->body->posy * e->gnormy)) + e->lprojection);
														HX_STACK_LINE(5036)
														if (((e->wrap_gnorm != null()))){
															HX_STACK_LINE(5036)
															e->wrap_gnorm->zpp_inner->x = e->gnormx;
															HX_STACK_LINE(5036)
															e->wrap_gnorm->zpp_inner->y = e->gnormy;
															HX_STACK_LINE(5036)
															{
															}
														}
														HX_STACK_LINE(5036)
														e->tp0 = ((e->gp0->y * e->gnormx) - (e->gp0->x * e->gnormy));
														HX_STACK_LINE(5036)
														e->tp1 = ((e->gp1->y * e->gnormx) - (e->gp1->x * e->gnormy));
													}
												}
											}
										}
									}
								}
								HX_STACK_LINE(5038)
								s->validate_sweepRadius();
								HX_STACK_LINE(5039)
								if (((s->sweepRadius > cur->sweepRadius))){
									HX_STACK_LINE(5039)
									cur->sweepRadius = s->sweepRadius;
								}
							}
							HX_STACK_LINE(5041)
							cx_ite1 = cx_ite1->next;
						}
					}
					HX_STACK_LINE(5044)
					cur->validate_mass();
					HX_STACK_LINE(5045)
					cur->validate_inertia();
					HX_STACK_LINE(5046)
					if ((!(((cur->shapes->head == null()))))){
						HX_STACK_LINE(5047)
						if ((cur->zip_aabb)){
							HX_STACK_LINE(5047)
							cur->zip_aabb = false;
							HX_STACK_LINE(5047)
							{
								HX_STACK_LINE(5047)
								cur->aabb->minx = ::Math_obj::POSITIVE_INFINITY;
								HX_STACK_LINE(5047)
								cur->aabb->miny = ::Math_obj::POSITIVE_INFINITY;
								HX_STACK_LINE(5047)
								{
								}
							}
							HX_STACK_LINE(5047)
							{
								HX_STACK_LINE(5047)
								cur->aabb->maxx = ::Math_obj::NEGATIVE_INFINITY;
								HX_STACK_LINE(5047)
								cur->aabb->maxy = ::Math_obj::NEGATIVE_INFINITY;
								HX_STACK_LINE(5047)
								{
								}
							}
							HX_STACK_LINE(5047)
							{
								HX_STACK_LINE(5047)
								::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(5047)
								while((true)){
									HX_STACK_LINE(5047)
									if ((!(((cx_ite1 != null()))))){
										HX_STACK_LINE(5047)
										break;
									}
									HX_STACK_LINE(5047)
									::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
									HX_STACK_LINE(5047)
									{
										HX_STACK_LINE(5047)
										if ((s->zip_aabb)){
											HX_STACK_LINE(5047)
											if (((s->body != null()))){
												HX_STACK_LINE(5047)
												s->zip_aabb = false;
												HX_STACK_LINE(5047)
												if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
													HX_STACK_LINE(5047)
													::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5047)
													if ((_this->zip_worldCOM)){
														HX_STACK_LINE(5047)
														if (((_this->body != null()))){
															HX_STACK_LINE(5047)
															_this->zip_worldCOM = false;
															HX_STACK_LINE(5047)
															if ((_this->zip_localCOM)){
																HX_STACK_LINE(5047)
																_this->zip_localCOM = false;
																HX_STACK_LINE(5047)
																if (((_this->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_POLYGON))){
																	HX_STACK_LINE(5047)
																	::zpp_nape::shape::ZPP_Polygon _this1 = _this->polygon;		HX_STACK_VAR(_this1,"_this1");
																	HX_STACK_LINE(5047)
																	if (((_this1->lverts->next->next == null()))){
																		HX_STACK_LINE(5047)
																		_this1->localCOMx = _this1->lverts->next->x;
																		HX_STACK_LINE(5047)
																		_this1->localCOMy = _this1->lverts->next->y;
																		HX_STACK_LINE(5047)
																		Dynamic();
																	}
																	else{
																		HX_STACK_LINE(5047)
																		if (((_this1->lverts->next->next->next == null()))){
																			HX_STACK_LINE(5047)
																			{
																				HX_STACK_LINE(5047)
																				_this1->localCOMx = _this1->lverts->next->x;
																				HX_STACK_LINE(5047)
																				_this1->localCOMy = _this1->lverts->next->y;
																				HX_STACK_LINE(5047)
																				{
																				}
																			}
																			HX_STACK_LINE(5047)
																			{
																				HX_STACK_LINE(5047)
																				Float t = 1.0;		HX_STACK_VAR(t,"t");
																				HX_STACK_LINE(5047)
																				hx::AddEq(_this1->localCOMx,(_this1->lverts->next->next->x * t));
																				HX_STACK_LINE(5047)
																				hx::AddEq(_this1->localCOMy,(_this1->lverts->next->next->y * t));
																			}
																			HX_STACK_LINE(5047)
																			{
																				HX_STACK_LINE(5047)
																				Float t = 0.5;		HX_STACK_VAR(t,"t");
																				HX_STACK_LINE(5047)
																				hx::MultEq(_this1->localCOMx,t);
																				HX_STACK_LINE(5047)
																				hx::MultEq(_this1->localCOMy,t);
																			}
																		}
																		else{
																			HX_STACK_LINE(5047)
																			{
																				HX_STACK_LINE(5047)
																				_this1->localCOMx = (int)0;
																				HX_STACK_LINE(5047)
																				_this1->localCOMy = (int)0;
																				HX_STACK_LINE(5047)
																				{
																				}
																			}
																			HX_STACK_LINE(5047)
																			Float area = 0.0;		HX_STACK_VAR(area,"area");
																			HX_STACK_LINE(5047)
																			{
																				HX_STACK_LINE(5047)
																				::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this1->lverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																				HX_STACK_LINE(5047)
																				::zpp_nape::geom::ZPP_Vec2 u = cx_ite2;		HX_STACK_VAR(u,"u");
																				HX_STACK_LINE(5047)
																				cx_ite2 = cx_ite2->next;
																				HX_STACK_LINE(5047)
																				::zpp_nape::geom::ZPP_Vec2 v = cx_ite2;		HX_STACK_VAR(v,"v");
																				HX_STACK_LINE(5047)
																				cx_ite2 = cx_ite2->next;
																				HX_STACK_LINE(5047)
																				while((true)){
																					HX_STACK_LINE(5047)
																					if ((!(((cx_ite2 != null()))))){
																						HX_STACK_LINE(5047)
																						break;
																					}
																					HX_STACK_LINE(5047)
																					::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;		HX_STACK_VAR(w,"w");
																					HX_STACK_LINE(5047)
																					{
																						HX_STACK_LINE(5047)
																						hx::AddEq(area,(v->x * ((w->y - u->y))));
																						HX_STACK_LINE(5047)
																						Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
																						HX_STACK_LINE(5047)
																						hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
																						HX_STACK_LINE(5047)
																						hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
																					}
																					HX_STACK_LINE(5047)
																					u = v;
																					HX_STACK_LINE(5047)
																					v = w;
																					HX_STACK_LINE(5047)
																					cx_ite2 = cx_ite2->next;
																				}
																				HX_STACK_LINE(5047)
																				cx_ite2 = _this1->lverts->next;
																				HX_STACK_LINE(5047)
																				::zpp_nape::geom::ZPP_Vec2 w = cx_ite2;		HX_STACK_VAR(w,"w");
																				HX_STACK_LINE(5047)
																				{
																					HX_STACK_LINE(5047)
																					hx::AddEq(area,(v->x * ((w->y - u->y))));
																					HX_STACK_LINE(5047)
																					Float cf = ((w->y * v->x) - (w->x * v->y));		HX_STACK_VAR(cf,"cf");
																					HX_STACK_LINE(5047)
																					hx::AddEq(_this1->localCOMx,(((v->x + w->x)) * cf));
																					HX_STACK_LINE(5047)
																					hx::AddEq(_this1->localCOMy,(((v->y + w->y)) * cf));
																				}
																				HX_STACK_LINE(5047)
																				u = v;
																				HX_STACK_LINE(5047)
																				v = w;
																				HX_STACK_LINE(5047)
																				cx_ite2 = cx_ite2->next;
																				HX_STACK_LINE(5047)
																				::zpp_nape::geom::ZPP_Vec2 w1 = cx_ite2;		HX_STACK_VAR(w1,"w1");
																				HX_STACK_LINE(5047)
																				{
																					HX_STACK_LINE(5047)
																					hx::AddEq(area,(v->x * ((w1->y - u->y))));
																					HX_STACK_LINE(5047)
																					Float cf = ((w1->y * v->x) - (w1->x * v->y));		HX_STACK_VAR(cf,"cf");
																					HX_STACK_LINE(5047)
																					hx::AddEq(_this1->localCOMx,(((v->x + w1->x)) * cf));
																					HX_STACK_LINE(5047)
																					hx::AddEq(_this1->localCOMy,(((v->y + w1->y)) * cf));
																				}
																			}
																			HX_STACK_LINE(5047)
																			area = (Float((int)1) / Float((((int)3 * area))));
																			HX_STACK_LINE(5047)
																			{
																				HX_STACK_LINE(5047)
																				Float t = area;		HX_STACK_VAR(t,"t");
																				HX_STACK_LINE(5047)
																				hx::MultEq(_this1->localCOMx,t);
																				HX_STACK_LINE(5047)
																				hx::MultEq(_this1->localCOMy,t);
																			}
																		}
																	}
																}
																HX_STACK_LINE(5047)
																if (((_this->wrap_localCOM != null()))){
																	HX_STACK_LINE(5047)
																	_this->wrap_localCOM->zpp_inner->x = _this->localCOMx;
																	HX_STACK_LINE(5047)
																	_this->wrap_localCOM->zpp_inner->y = _this->localCOMy;
																	HX_STACK_LINE(5047)
																	{
																	}
																}
															}
															HX_STACK_LINE(5047)
															{
																HX_STACK_LINE(5047)
																::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																HX_STACK_LINE(5047)
																if ((_this1->zip_axis)){
																	HX_STACK_LINE(5047)
																	_this1->zip_axis = false;
																	HX_STACK_LINE(5047)
																	{
																		HX_STACK_LINE(5047)
																		Float _g14 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g14,"_g14");
																		HX_STACK_LINE(5047)
																		_this1->axisx = _g14;
																		HX_STACK_LINE(5047)
																		Float _g15 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g15,"_g15");
																		HX_STACK_LINE(5047)
																		_this1->axisy = _g15;
																		HX_STACK_LINE(5047)
																		Dynamic();
																	}
																}
															}
															HX_STACK_LINE(5047)
															{
																HX_STACK_LINE(5047)
																_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
																HX_STACK_LINE(5047)
																_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
															}
														}
													}
													HX_STACK_LINE(5047)
													Float rx = _this->radius;		HX_STACK_VAR(rx,"rx");
													HX_STACK_LINE(5047)
													Float ry = _this->radius;		HX_STACK_VAR(ry,"ry");
													HX_STACK_LINE(5047)
													{
														HX_STACK_LINE(5047)
														_this->aabb->minx = (_this->worldCOMx - rx);
														HX_STACK_LINE(5047)
														_this->aabb->miny = (_this->worldCOMy - ry);
													}
													HX_STACK_LINE(5047)
													{
														HX_STACK_LINE(5047)
														_this->aabb->maxx = (_this->worldCOMx + rx);
														HX_STACK_LINE(5047)
														_this->aabb->maxy = (_this->worldCOMy + ry);
													}
												}
												else{
													HX_STACK_LINE(5047)
													::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5047)
													if ((_this->zip_gverts)){
														HX_STACK_LINE(5047)
														if (((_this->body != null()))){
															HX_STACK_LINE(5047)
															_this->zip_gverts = false;
															HX_STACK_LINE(5047)
															_this->validate_lverts();
															HX_STACK_LINE(5047)
															{
																HX_STACK_LINE(5047)
																::zpp_nape::phys::ZPP_Body _this1 = _this->body;		HX_STACK_VAR(_this1,"_this1");
																HX_STACK_LINE(5047)
																if ((_this1->zip_axis)){
																	HX_STACK_LINE(5047)
																	_this1->zip_axis = false;
																	HX_STACK_LINE(5047)
																	{
																		HX_STACK_LINE(5047)
																		Float _g16 = ::Math_obj::sin(_this1->rot);		HX_STACK_VAR(_g16,"_g16");
																		HX_STACK_LINE(5047)
																		_this1->axisx = _g16;
																		HX_STACK_LINE(5047)
																		Float _g17 = ::Math_obj::cos(_this1->rot);		HX_STACK_VAR(_g17,"_g17");
																		HX_STACK_LINE(5047)
																		_this1->axisy = _g17;
																		HX_STACK_LINE(5047)
																		Dynamic();
																	}
																}
															}
															HX_STACK_LINE(5047)
															::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
															HX_STACK_LINE(5047)
															{
																HX_STACK_LINE(5047)
																::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(5047)
																while((true)){
																	HX_STACK_LINE(5047)
																	if ((!(((cx_ite2 != null()))))){
																		HX_STACK_LINE(5047)
																		break;
																	}
																	HX_STACK_LINE(5047)
																	::zpp_nape::geom::ZPP_Vec2 g = cx_ite2;		HX_STACK_VAR(g,"g");
																	HX_STACK_LINE(5047)
																	{
																		HX_STACK_LINE(5047)
																		::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
																		HX_STACK_LINE(5047)
																		li = li->next;
																		HX_STACK_LINE(5047)
																		{
																			HX_STACK_LINE(5047)
																			g->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
																			HX_STACK_LINE(5047)
																			g->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
																		}
																	}
																	HX_STACK_LINE(5047)
																	cx_ite2 = cx_ite2->next;
																}
															}
														}
													}
													HX_STACK_LINE(5047)
													::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
													HX_STACK_LINE(5047)
													{
														HX_STACK_LINE(5047)
														_this->aabb->minx = p0->x;
														HX_STACK_LINE(5047)
														_this->aabb->miny = p0->y;
														HX_STACK_LINE(5047)
														{
														}
													}
													HX_STACK_LINE(5047)
													{
														HX_STACK_LINE(5047)
														_this->aabb->maxx = p0->x;
														HX_STACK_LINE(5047)
														_this->aabb->maxy = p0->y;
														HX_STACK_LINE(5047)
														{
														}
													}
													HX_STACK_LINE(5047)
													{
														HX_STACK_LINE(5047)
														::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(5047)
														while((true)){
															HX_STACK_LINE(5047)
															if ((!(((cx_ite2 != null()))))){
																HX_STACK_LINE(5047)
																break;
															}
															HX_STACK_LINE(5047)
															::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
															HX_STACK_LINE(5047)
															{
																HX_STACK_LINE(5047)
																if (((p->x < _this->aabb->minx))){
																	HX_STACK_LINE(5047)
																	_this->aabb->minx = p->x;
																}
																HX_STACK_LINE(5047)
																if (((p->x > _this->aabb->maxx))){
																	HX_STACK_LINE(5047)
																	_this->aabb->maxx = p->x;
																}
																HX_STACK_LINE(5047)
																if (((p->y < _this->aabb->miny))){
																	HX_STACK_LINE(5047)
																	_this->aabb->miny = p->y;
																}
																HX_STACK_LINE(5047)
																if (((p->y > _this->aabb->maxy))){
																	HX_STACK_LINE(5047)
																	_this->aabb->maxy = p->y;
																}
															}
															HX_STACK_LINE(5047)
															cx_ite2 = cx_ite2->next;
														}
													}
												}
											}
										}
										HX_STACK_LINE(5047)
										{
											HX_STACK_LINE(5047)
											::zpp_nape::geom::ZPP_AABB _this = cur->aabb;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5047)
											::zpp_nape::geom::ZPP_AABB x = s->aabb;		HX_STACK_VAR(x,"x");
											HX_STACK_LINE(5047)
											if (((x->minx < _this->minx))){
												HX_STACK_LINE(5047)
												_this->minx = x->minx;
											}
											HX_STACK_LINE(5047)
											if (((x->maxx > _this->maxx))){
												HX_STACK_LINE(5047)
												_this->maxx = x->maxx;
											}
											HX_STACK_LINE(5047)
											if (((x->miny < _this->miny))){
												HX_STACK_LINE(5047)
												_this->miny = x->miny;
											}
											HX_STACK_LINE(5047)
											if (((x->maxy > _this->maxy))){
												HX_STACK_LINE(5047)
												_this->maxy = x->maxy;
											}
										}
									}
									HX_STACK_LINE(5047)
									cx_ite1 = cx_ite1->next;
								}
							}
						}
						HX_STACK_LINE(5048)
						cur->validate_worldCOM();
					}
					HX_STACK_LINE(5050)
					cur->validate_gravMass();
					HX_STACK_LINE(5051)
					if ((cur->zip_axis)){
						HX_STACK_LINE(5051)
						cur->zip_axis = false;
						HX_STACK_LINE(5051)
						{
							HX_STACK_LINE(5051)
							Float _g18 = ::Math_obj::sin(cur->rot);		HX_STACK_VAR(_g18,"_g18");
							HX_STACK_LINE(5051)
							cur->axisx = _g18;
							HX_STACK_LINE(5051)
							Float _g19 = ::Math_obj::cos(cur->rot);		HX_STACK_VAR(_g19,"_g19");
							HX_STACK_LINE(5051)
							cur->axisy = _g19;
							HX_STACK_LINE(5051)
							Dynamic();
						}
					}
					HX_STACK_LINE(5081)
					{
						HX_STACK_LINE(5082)
						::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(5083)
						while((true)){
							HX_STACK_LINE(5083)
							if ((!(((cx_ite1 != null()))))){
								HX_STACK_LINE(5083)
								break;
							}
							HX_STACK_LINE(5084)
							::zpp_nape::shape::ZPP_Shape shape = cx_ite1->elt;		HX_STACK_VAR(shape,"shape");
							HX_STACK_LINE(5085)
							this->bphase->sync(shape);
							HX_STACK_LINE(5086)
							cx_ite1 = cx_ite1->next;
						}
					}
				}
				HX_STACK_LINE(5090)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5094)
		{
			HX_STACK_LINE(5095)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5096)
			while((true)){
				HX_STACK_LINE(5096)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(5096)
					break;
				}
				HX_STACK_LINE(5097)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(5099)
				if ((con->active)){
					HX_STACK_LINE(5103)
					if (((bool(con->component->woken) && bool((con->cbSet != null()))))){
						HX_STACK_LINE(5105)
						::zpp_nape::util::ZNPNode_ZPP_ConstraintListener cx_ite1 = con->cbSet->conlisteners->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
						HX_STACK_LINE(5106)
						while((true)){
							HX_STACK_LINE(5106)
							if ((!(((cx_ite1 != null()))))){
								HX_STACK_LINE(5106)
								break;
							}
							HX_STACK_LINE(5107)
							::zpp_nape::callbacks::ZPP_ConstraintListener i = cx_ite1->elt;		HX_STACK_VAR(i,"i");
							HX_STACK_LINE(5108)
							{
								HX_STACK_LINE(5109)
								if (((i->event != ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE))){
									HX_STACK_LINE(5110)
									cx_ite1 = cx_ite1->next;
									HX_STACK_LINE(5111)
									continue;
								}
								HX_STACK_LINE(5113)
								::zpp_nape::callbacks::ZPP_Callback cb = this->push_callback(i);		HX_STACK_VAR(cb,"cb");
								HX_STACK_LINE(5114)
								cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_WAKE;
								HX_STACK_LINE(5115)
								cb->constraint = con;
							}
							HX_STACK_LINE(5117)
							cx_ite1 = cx_ite1->next;
						}
					}
					HX_STACK_LINE(5121)
					con->component->woken = false;
				}
				HX_STACK_LINE(5124)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,validation,(void))

Void ZPP_Space_obj::updateVel( Float dt){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","updateVel",0x08bffd9e,"zpp_nape.space.ZPP_Space.updateVel","zpp_nape/space/Space.hx",5128,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(dt,"dt")
		HX_STACK_LINE(5129)
		::zpp_nape::util::ZNPNode_ZPP_Body pre = null();		HX_STACK_VAR(pre,"pre");
		HX_STACK_LINE(5130)
		Float linDrag = ((int)1 - (dt * this->global_lin_drag));		HX_STACK_VAR(linDrag,"linDrag");
		HX_STACK_LINE(5131)
		Float angDrag = ((int)1 - (dt * this->global_ang_drag));		HX_STACK_VAR(angDrag,"angDrag");
		HX_STACK_LINE(5132)
		{
			HX_STACK_LINE(5133)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5134)
			while((true)){
				HX_STACK_LINE(5134)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(5134)
					break;
				}
				HX_STACK_LINE(5135)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5136)
				{
					HX_STACK_LINE(5137)
					if (((cur->smass != 0.0))){
						HX_STACK_LINE(5138)
						Float time = (dt * cur->imass);		HX_STACK_VAR(time,"time");
						HX_STACK_LINE(5139)
						cur->velx = ((linDrag * cur->velx) + (((cur->forcex + (this->gravityx * cur->gravMass))) * time));
						HX_STACK_LINE(5140)
						cur->vely = ((linDrag * cur->vely) + (((cur->forcey + (this->gravityy * cur->gravMass))) * time));
					}
					HX_STACK_LINE(5142)
					if (((cur->sinertia != 0.0))){
						HX_STACK_LINE(5143)
						Float dpx = 0.0;		HX_STACK_VAR(dpx,"dpx");
						HX_STACK_LINE(5144)
						Float dpy = 0.0;		HX_STACK_VAR(dpy,"dpy");
						HX_STACK_LINE(5145)
						{
							HX_STACK_LINE(5146)
							dpx = (cur->worldCOMx - cur->posx);
							HX_STACK_LINE(5147)
							dpy = (cur->worldCOMy - cur->posy);
						}
						HX_STACK_LINE(5149)
						Float torque = (cur->torque + ((((this->gravityy * dpx) - (this->gravityx * dpy))) * cur->gravMass));		HX_STACK_VAR(torque,"torque");
						HX_STACK_LINE(5150)
						cur->angvel = ((angDrag * cur->angvel) + ((torque * dt) * cur->iinertia));
					}
					HX_STACK_LINE(5152)
					pre = cx_ite;
				}
				HX_STACK_LINE(5154)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,updateVel,(void))

Void ZPP_Space_obj::updatePos( Float dt){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","updatePos",0x08bb78d5,"zpp_nape.space.ZPP_Space.updatePos","zpp_nape/space/Space.hx",5158,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(dt,"dt")
		HX_STACK_LINE(5159)
		Float MAX_VEL = (Float(((int)2 * ::Math_obj::PI)) / Float(dt));		HX_STACK_VAR(MAX_VEL,"MAX_VEL");
		HX_STACK_LINE(5161)
		{
			HX_STACK_LINE(5162)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->live->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5163)
			while((true)){
				HX_STACK_LINE(5163)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(5163)
					break;
				}
				HX_STACK_LINE(5164)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5165)
				{
					HX_STACK_LINE(5166)
					{
						HX_STACK_LINE(5167)
						cur->pre_posx = cur->posx;
						HX_STACK_LINE(5168)
						cur->pre_posy = cur->posy;
						HX_STACK_LINE(5177)
						{
						}
					}
					HX_STACK_LINE(5186)
					cur->pre_rot = cur->rot;
					HX_STACK_LINE(5187)
					cur->sweepTime = (int)0;
					HX_STACK_LINE(5188)
					cur->sweep_angvel = hx::Mod(cur->angvel,MAX_VEL);
					HX_STACK_LINE(5189)
					{
						HX_STACK_LINE(5189)
						Float delta = (dt - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(5189)
						if (((delta != (int)0))){
							HX_STACK_LINE(5189)
							cur->sweepTime = dt;
							HX_STACK_LINE(5189)
							{
								HX_STACK_LINE(5189)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5189)
								hx::AddEq(cur->posx,(cur->velx * t));
								HX_STACK_LINE(5189)
								hx::AddEq(cur->posy,(cur->vely * t));
							}
							HX_STACK_LINE(5189)
							if (((cur->angvel != (int)0))){
								HX_STACK_LINE(5189)
								Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(5189)
								hx::AddEq(cur->rot,dr);
								HX_STACK_LINE(5189)
								if ((((dr * dr) > 0.0001))){
									HX_STACK_LINE(5189)
									Float _g = ::Math_obj::sin(cur->rot);		HX_STACK_VAR(_g,"_g");
									HX_STACK_LINE(5189)
									cur->axisx = _g;
									HX_STACK_LINE(5189)
									Float _g1 = ::Math_obj::cos(cur->rot);		HX_STACK_VAR(_g1,"_g1");
									HX_STACK_LINE(5189)
									cur->axisy = _g1;
									HX_STACK_LINE(5189)
									Dynamic();
								}
								else{
									HX_STACK_LINE(5189)
									Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(5189)
									Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(5189)
									Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(5189)
									Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(5189)
									cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
									HX_STACK_LINE(5189)
									cur->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(5190)
					if ((!(cur->disableCCD))){
						HX_STACK_LINE(5191)
						Float linThreshold = (::nape::Config_obj::staticCCDLinearThreshold * cur->sweepRadius);		HX_STACK_VAR(linThreshold,"linThreshold");
						HX_STACK_LINE(5192)
						Float angThreshold = ::nape::Config_obj::staticCCDAngularThreshold;		HX_STACK_VAR(angThreshold,"angThreshold");
						HX_STACK_LINE(5193)
						if (((bool((bool(((((((cur->velx * cur->velx) + (cur->vely * cur->vely))) * dt) * dt) > (linThreshold * linThreshold))) || bool(((((cur->angvel * cur->angvel) * dt) * dt) > (angThreshold * angThreshold))))) || bool((cur->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))))){
							HX_STACK_LINE(5194)
							Float angvel = cur->sweep_angvel;		HX_STACK_VAR(angvel,"angvel");
							HX_STACK_LINE(5195)
							if (((angvel < (int)0))){
								HX_STACK_LINE(5195)
								angvel = -(angvel);
							}
							HX_STACK_LINE(5196)
							Float iangvel = (Float((int)1) / Float(angvel));		HX_STACK_VAR(iangvel,"iangvel");
							HX_STACK_LINE(5197)
							{
								HX_STACK_LINE(5198)
								::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(5199)
								while((true)){
									HX_STACK_LINE(5199)
									if ((!(((cx_ite1 != null()))))){
										HX_STACK_LINE(5199)
										break;
									}
									HX_STACK_LINE(5200)
									::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
									HX_STACK_LINE(5201)
									{
										HX_STACK_LINE(5202)
										::zpp_nape::geom::ZPP_AABB aabb = s->aabb;		HX_STACK_VAR(aabb,"aabb");
										HX_STACK_LINE(5203)
										Float minx = aabb->minx;		HX_STACK_VAR(minx,"minx");
										HX_STACK_LINE(5204)
										Float miny = aabb->miny;		HX_STACK_VAR(miny,"miny");
										HX_STACK_LINE(5205)
										Float maxx = aabb->maxx;		HX_STACK_VAR(maxx,"maxx");
										HX_STACK_LINE(5206)
										Float maxy = aabb->maxy;		HX_STACK_VAR(maxy,"maxy");
										HX_STACK_LINE(5207)
										int count = ::Std_obj::_int((((angvel * dt) * s->sweepCoef) * 0.0083333333333333332));		HX_STACK_VAR(count,"count");
										HX_STACK_LINE(5208)
										if (((count > (int)8))){
											HX_STACK_LINE(5208)
											count = (int)8;
										}
										HX_STACK_LINE(5209)
										Float anginc = (Float((angvel * dt)) / Float(count));		HX_STACK_VAR(anginc,"anginc");
										HX_STACK_LINE(5210)
										{
											HX_STACK_LINE(5210)
											Float delta = (dt - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
											HX_STACK_LINE(5210)
											if (((delta != (int)0))){
												HX_STACK_LINE(5210)
												cur->sweepTime = dt;
												HX_STACK_LINE(5210)
												{
													HX_STACK_LINE(5210)
													Float t = delta;		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5210)
													hx::AddEq(cur->posx,(cur->velx * t));
													HX_STACK_LINE(5210)
													hx::AddEq(cur->posy,(cur->vely * t));
												}
												HX_STACK_LINE(5210)
												if (((cur->angvel != (int)0))){
													HX_STACK_LINE(5210)
													Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
													HX_STACK_LINE(5210)
													hx::AddEq(cur->rot,dr);
													HX_STACK_LINE(5210)
													if ((((dr * dr) > 0.0001))){
														HX_STACK_LINE(5210)
														Float _g2 = ::Math_obj::sin(cur->rot);		HX_STACK_VAR(_g2,"_g2");
														HX_STACK_LINE(5210)
														cur->axisx = _g2;
														HX_STACK_LINE(5210)
														Float _g3 = ::Math_obj::cos(cur->rot);		HX_STACK_VAR(_g3,"_g3");
														HX_STACK_LINE(5210)
														cur->axisy = _g3;
														HX_STACK_LINE(5210)
														Dynamic();
													}
													else{
														HX_STACK_LINE(5210)
														Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
														HX_STACK_LINE(5210)
														Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5210)
														Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
														HX_STACK_LINE(5210)
														Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
														HX_STACK_LINE(5210)
														cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
														HX_STACK_LINE(5210)
														cur->axisx = nx;
													}
												}
											}
										}
										HX_STACK_LINE(5211)
										if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
											HX_STACK_LINE(5211)
											::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5211)
											{
												HX_STACK_LINE(5211)
												_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
												HX_STACK_LINE(5211)
												_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
											}
											HX_STACK_LINE(5211)
											_this->aabb->minx = (_this->worldCOMx - _this->radius);
											HX_STACK_LINE(5211)
											_this->aabb->miny = (_this->worldCOMy - _this->radius);
											HX_STACK_LINE(5211)
											_this->aabb->maxx = (_this->worldCOMx + _this->radius);
											HX_STACK_LINE(5211)
											_this->aabb->maxy = (_this->worldCOMy + _this->radius);
										}
										else{
											HX_STACK_LINE(5211)
											::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5211)
											::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
											HX_STACK_LINE(5211)
											::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
											HX_STACK_LINE(5211)
											::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
											HX_STACK_LINE(5211)
											li = li->next;
											HX_STACK_LINE(5211)
											{
												HX_STACK_LINE(5211)
												p0->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
												HX_STACK_LINE(5211)
												p0->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
											}
											HX_STACK_LINE(5211)
											{
												HX_STACK_LINE(5211)
												_this->aabb->minx = p0->x;
												HX_STACK_LINE(5211)
												_this->aabb->miny = p0->y;
												HX_STACK_LINE(5211)
												{
												}
											}
											HX_STACK_LINE(5211)
											{
												HX_STACK_LINE(5211)
												_this->aabb->maxx = p0->x;
												HX_STACK_LINE(5211)
												_this->aabb->maxy = p0->y;
												HX_STACK_LINE(5211)
												{
												}
											}
											HX_STACK_LINE(5211)
											{
												HX_STACK_LINE(5211)
												::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
												HX_STACK_LINE(5211)
												while((true)){
													HX_STACK_LINE(5211)
													if ((!(((cx_ite2 != null()))))){
														HX_STACK_LINE(5211)
														break;
													}
													HX_STACK_LINE(5211)
													::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5211)
													{
														HX_STACK_LINE(5211)
														::zpp_nape::geom::ZPP_Vec2 l1 = li;		HX_STACK_VAR(l1,"l1");
														HX_STACK_LINE(5211)
														li = li->next;
														HX_STACK_LINE(5211)
														{
															HX_STACK_LINE(5211)
															p->x = (_this->body->posx + (((_this->body->axisy * l1->x) - (_this->body->axisx * l1->y))));
															HX_STACK_LINE(5211)
															p->y = (_this->body->posy + (((l1->x * _this->body->axisx) + (l1->y * _this->body->axisy))));
														}
														HX_STACK_LINE(5211)
														if (((p->x < _this->aabb->minx))){
															HX_STACK_LINE(5211)
															_this->aabb->minx = p->x;
														}
														HX_STACK_LINE(5211)
														if (((p->x > _this->aabb->maxx))){
															HX_STACK_LINE(5211)
															_this->aabb->maxx = p->x;
														}
														HX_STACK_LINE(5211)
														if (((p->y < _this->aabb->miny))){
															HX_STACK_LINE(5211)
															_this->aabb->miny = p->y;
														}
														HX_STACK_LINE(5211)
														if (((p->y > _this->aabb->maxy))){
															HX_STACK_LINE(5211)
															_this->aabb->maxy = p->y;
														}
													}
													HX_STACK_LINE(5211)
													cx_ite2 = cx_ite2->next;
												}
											}
										}
										HX_STACK_LINE(5212)
										if (((minx < aabb->minx))){
											HX_STACK_LINE(5212)
											aabb->minx = minx;
										}
										else{
											HX_STACK_LINE(5212)
											minx = aabb->minx;
										}
										HX_STACK_LINE(5213)
										if (((miny < aabb->miny))){
											HX_STACK_LINE(5213)
											aabb->miny = miny;
										}
										else{
											HX_STACK_LINE(5213)
											miny = aabb->miny;
										}
										HX_STACK_LINE(5214)
										if (((maxx > aabb->maxx))){
											HX_STACK_LINE(5214)
											aabb->maxx = maxx;
										}
										else{
											HX_STACK_LINE(5214)
											maxx = aabb->maxx;
										}
										HX_STACK_LINE(5215)
										if (((maxy > aabb->maxy))){
											HX_STACK_LINE(5215)
											aabb->maxy = maxy;
										}
										else{
											HX_STACK_LINE(5215)
											maxy = aabb->maxy;
										}
										HX_STACK_LINE(5216)
										{
											HX_STACK_LINE(5216)
											int _g = (int)1;		HX_STACK_VAR(_g,"_g");
											HX_STACK_LINE(5216)
											while((true)){
												HX_STACK_LINE(5216)
												if ((!(((_g < count))))){
													HX_STACK_LINE(5216)
													break;
												}
												HX_STACK_LINE(5216)
												int i = (_g)++;		HX_STACK_VAR(i,"i");
												HX_STACK_LINE(5217)
												{
													HX_STACK_LINE(5217)
													Float dt1 = ((anginc * i) * iangvel);		HX_STACK_VAR(dt1,"dt1");
													HX_STACK_LINE(5217)
													Float delta = (dt1 - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
													HX_STACK_LINE(5217)
													if (((delta != (int)0))){
														HX_STACK_LINE(5217)
														cur->sweepTime = dt1;
														HX_STACK_LINE(5217)
														{
															HX_STACK_LINE(5217)
															Float t = delta;		HX_STACK_VAR(t,"t");
															HX_STACK_LINE(5217)
															hx::AddEq(cur->posx,(cur->velx * t));
															HX_STACK_LINE(5217)
															hx::AddEq(cur->posy,(cur->vely * t));
														}
														HX_STACK_LINE(5217)
														if (((cur->angvel != (int)0))){
															HX_STACK_LINE(5217)
															Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
															HX_STACK_LINE(5217)
															hx::AddEq(cur->rot,dr);
															HX_STACK_LINE(5217)
															if ((((dr * dr) > 0.0001))){
																HX_STACK_LINE(5217)
																Float _g4 = ::Math_obj::sin(cur->rot);		HX_STACK_VAR(_g4,"_g4");
																HX_STACK_LINE(5217)
																cur->axisx = _g4;
																HX_STACK_LINE(5217)
																Float _g5 = ::Math_obj::cos(cur->rot);		HX_STACK_VAR(_g5,"_g5");
																HX_STACK_LINE(5217)
																cur->axisy = _g5;
																HX_STACK_LINE(5217)
																Dynamic();
															}
															else{
																HX_STACK_LINE(5217)
																Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
																HX_STACK_LINE(5217)
																Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
																HX_STACK_LINE(5217)
																Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
																HX_STACK_LINE(5217)
																Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
																HX_STACK_LINE(5217)
																cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
																HX_STACK_LINE(5217)
																cur->axisx = nx;
															}
														}
													}
												}
												HX_STACK_LINE(5218)
												if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
													HX_STACK_LINE(5218)
													::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5218)
													{
														HX_STACK_LINE(5218)
														_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
														HX_STACK_LINE(5218)
														_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
													}
													HX_STACK_LINE(5218)
													_this->aabb->minx = (_this->worldCOMx - _this->radius);
													HX_STACK_LINE(5218)
													_this->aabb->miny = (_this->worldCOMy - _this->radius);
													HX_STACK_LINE(5218)
													_this->aabb->maxx = (_this->worldCOMx + _this->radius);
													HX_STACK_LINE(5218)
													_this->aabb->maxy = (_this->worldCOMy + _this->radius);
												}
												else{
													HX_STACK_LINE(5218)
													::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5218)
													::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
													HX_STACK_LINE(5218)
													::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
													HX_STACK_LINE(5218)
													::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
													HX_STACK_LINE(5218)
													li = li->next;
													HX_STACK_LINE(5218)
													{
														HX_STACK_LINE(5218)
														p0->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
														HX_STACK_LINE(5218)
														p0->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
													}
													HX_STACK_LINE(5218)
													{
														HX_STACK_LINE(5218)
														_this->aabb->minx = p0->x;
														HX_STACK_LINE(5218)
														_this->aabb->miny = p0->y;
														HX_STACK_LINE(5218)
														{
														}
													}
													HX_STACK_LINE(5218)
													{
														HX_STACK_LINE(5218)
														_this->aabb->maxx = p0->x;
														HX_STACK_LINE(5218)
														_this->aabb->maxy = p0->y;
														HX_STACK_LINE(5218)
														{
														}
													}
													HX_STACK_LINE(5218)
													{
														HX_STACK_LINE(5218)
														::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(5218)
														while((true)){
															HX_STACK_LINE(5218)
															if ((!(((cx_ite2 != null()))))){
																HX_STACK_LINE(5218)
																break;
															}
															HX_STACK_LINE(5218)
															::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
															HX_STACK_LINE(5218)
															{
																HX_STACK_LINE(5218)
																::zpp_nape::geom::ZPP_Vec2 l1 = li;		HX_STACK_VAR(l1,"l1");
																HX_STACK_LINE(5218)
																li = li->next;
																HX_STACK_LINE(5218)
																{
																	HX_STACK_LINE(5218)
																	p->x = (_this->body->posx + (((_this->body->axisy * l1->x) - (_this->body->axisx * l1->y))));
																	HX_STACK_LINE(5218)
																	p->y = (_this->body->posy + (((l1->x * _this->body->axisx) + (l1->y * _this->body->axisy))));
																}
																HX_STACK_LINE(5218)
																if (((p->x < _this->aabb->minx))){
																	HX_STACK_LINE(5218)
																	_this->aabb->minx = p->x;
																}
																HX_STACK_LINE(5218)
																if (((p->x > _this->aabb->maxx))){
																	HX_STACK_LINE(5218)
																	_this->aabb->maxx = p->x;
																}
																HX_STACK_LINE(5218)
																if (((p->y < _this->aabb->miny))){
																	HX_STACK_LINE(5218)
																	_this->aabb->miny = p->y;
																}
																HX_STACK_LINE(5218)
																if (((p->y > _this->aabb->maxy))){
																	HX_STACK_LINE(5218)
																	_this->aabb->maxy = p->y;
																}
															}
															HX_STACK_LINE(5218)
															cx_ite2 = cx_ite2->next;
														}
													}
												}
												HX_STACK_LINE(5219)
												if (((minx < aabb->minx))){
													HX_STACK_LINE(5219)
													aabb->minx = minx;
												}
												else{
													HX_STACK_LINE(5219)
													minx = aabb->minx;
												}
												HX_STACK_LINE(5220)
												if (((miny < aabb->miny))){
													HX_STACK_LINE(5220)
													aabb->miny = miny;
												}
												else{
													HX_STACK_LINE(5220)
													miny = aabb->miny;
												}
												HX_STACK_LINE(5221)
												if (((maxx > aabb->maxx))){
													HX_STACK_LINE(5221)
													aabb->maxx = maxx;
												}
												else{
													HX_STACK_LINE(5221)
													maxx = aabb->maxx;
												}
												HX_STACK_LINE(5222)
												if (((maxy > aabb->maxy))){
													HX_STACK_LINE(5222)
													aabb->maxy = maxy;
												}
												else{
													HX_STACK_LINE(5222)
													maxy = aabb->maxy;
												}
											}
										}
										HX_STACK_LINE(5224)
										this->bphase->sync(s);
									}
									HX_STACK_LINE(5226)
									cx_ite1 = cx_ite1->next;
								}
							}
							HX_STACK_LINE(5229)
							cur->sweepFrozen = false;
							HX_STACK_LINE(5230)
							if (((bool((cur->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(cur->bulletEnabled)))){
								HX_STACK_LINE(5231)
								Float linThreshold2 = (::nape::Config_obj::bulletCCDLinearThreshold * cur->sweepRadius);		HX_STACK_VAR(linThreshold2,"linThreshold2");
								HX_STACK_LINE(5232)
								Float angThreshold2 = ::nape::Config_obj::bulletCCDAngularThreshold;		HX_STACK_VAR(angThreshold2,"angThreshold2");
								HX_STACK_LINE(5233)
								if (((bool(((((((cur->velx * cur->velx) + (cur->vely * cur->vely))) * dt) * dt) > (linThreshold2 * linThreshold2))) || bool(((((cur->angvel * cur->angvel) * dt) * dt) > (angThreshold2 * angThreshold2)))))){
									HX_STACK_LINE(5234)
									cur->bullet = true;
								}
							}
						}
						else{
							HX_STACK_LINE(5239)
							cur->sweepFrozen = true;
							HX_STACK_LINE(5240)
							cur->bullet = false;
						}
					}
					else{
						HX_STACK_LINE(5244)
						cur->sweepFrozen = true;
						HX_STACK_LINE(5245)
						cur->bullet = false;
					}
				}
				HX_STACK_LINE(5248)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5253)
		{
			HX_STACK_LINE(5254)
			::zpp_nape::util::ZNPNode_ZPP_Body cx_ite = this->kinematics->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5255)
			while((true)){
				HX_STACK_LINE(5255)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(5255)
					break;
				}
				HX_STACK_LINE(5256)
				::zpp_nape::phys::ZPP_Body cur = cx_ite->elt;		HX_STACK_VAR(cur,"cur");
				HX_STACK_LINE(5257)
				{
					HX_STACK_LINE(5258)
					{
						HX_STACK_LINE(5259)
						cur->pre_posx = cur->posx;
						HX_STACK_LINE(5260)
						cur->pre_posy = cur->posy;
						HX_STACK_LINE(5269)
						{
						}
					}
					HX_STACK_LINE(5278)
					cur->pre_rot = cur->rot;
					HX_STACK_LINE(5279)
					cur->sweepTime = (int)0;
					HX_STACK_LINE(5280)
					cur->sweep_angvel = hx::Mod(cur->angvel,MAX_VEL);
					HX_STACK_LINE(5281)
					{
						HX_STACK_LINE(5281)
						Float delta = (dt - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
						HX_STACK_LINE(5281)
						if (((delta != (int)0))){
							HX_STACK_LINE(5281)
							cur->sweepTime = dt;
							HX_STACK_LINE(5281)
							{
								HX_STACK_LINE(5281)
								Float t = delta;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5281)
								hx::AddEq(cur->posx,(cur->velx * t));
								HX_STACK_LINE(5281)
								hx::AddEq(cur->posy,(cur->vely * t));
							}
							HX_STACK_LINE(5281)
							if (((cur->angvel != (int)0))){
								HX_STACK_LINE(5281)
								Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
								HX_STACK_LINE(5281)
								hx::AddEq(cur->rot,dr);
								HX_STACK_LINE(5281)
								if ((((dr * dr) > 0.0001))){
									HX_STACK_LINE(5281)
									Float _g6 = ::Math_obj::sin(cur->rot);		HX_STACK_VAR(_g6,"_g6");
									HX_STACK_LINE(5281)
									cur->axisx = _g6;
									HX_STACK_LINE(5281)
									Float _g7 = ::Math_obj::cos(cur->rot);		HX_STACK_VAR(_g7,"_g7");
									HX_STACK_LINE(5281)
									cur->axisy = _g7;
									HX_STACK_LINE(5281)
									Dynamic();
								}
								else{
									HX_STACK_LINE(5281)
									Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(5281)
									Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
									HX_STACK_LINE(5281)
									Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
									HX_STACK_LINE(5281)
									Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
									HX_STACK_LINE(5281)
									cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
									HX_STACK_LINE(5281)
									cur->axisx = nx;
								}
							}
						}
					}
					HX_STACK_LINE(5282)
					if ((!(cur->disableCCD))){
						HX_STACK_LINE(5283)
						Float linThreshold = (::nape::Config_obj::staticCCDLinearThreshold * cur->sweepRadius);		HX_STACK_VAR(linThreshold,"linThreshold");
						HX_STACK_LINE(5284)
						Float angThreshold = ::nape::Config_obj::staticCCDAngularThreshold;		HX_STACK_VAR(angThreshold,"angThreshold");
						HX_STACK_LINE(5285)
						if (((bool((bool(((((((cur->velx * cur->velx) + (cur->vely * cur->vely))) * dt) * dt) > (linThreshold * linThreshold))) || bool(((((cur->angvel * cur->angvel) * dt) * dt) > (angThreshold * angThreshold))))) || bool((cur->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))))){
							HX_STACK_LINE(5286)
							Float angvel = cur->sweep_angvel;		HX_STACK_VAR(angvel,"angvel");
							HX_STACK_LINE(5287)
							if (((angvel < (int)0))){
								HX_STACK_LINE(5287)
								angvel = -(angvel);
							}
							HX_STACK_LINE(5288)
							Float iangvel = (Float((int)1) / Float(angvel));		HX_STACK_VAR(iangvel,"iangvel");
							HX_STACK_LINE(5289)
							{
								HX_STACK_LINE(5290)
								::zpp_nape::util::ZNPNode_ZPP_Shape cx_ite1 = cur->shapes->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
								HX_STACK_LINE(5291)
								while((true)){
									HX_STACK_LINE(5291)
									if ((!(((cx_ite1 != null()))))){
										HX_STACK_LINE(5291)
										break;
									}
									HX_STACK_LINE(5292)
									::zpp_nape::shape::ZPP_Shape s = cx_ite1->elt;		HX_STACK_VAR(s,"s");
									HX_STACK_LINE(5293)
									{
										HX_STACK_LINE(5294)
										::zpp_nape::geom::ZPP_AABB aabb = s->aabb;		HX_STACK_VAR(aabb,"aabb");
										HX_STACK_LINE(5295)
										Float minx = aabb->minx;		HX_STACK_VAR(minx,"minx");
										HX_STACK_LINE(5296)
										Float miny = aabb->miny;		HX_STACK_VAR(miny,"miny");
										HX_STACK_LINE(5297)
										Float maxx = aabb->maxx;		HX_STACK_VAR(maxx,"maxx");
										HX_STACK_LINE(5298)
										Float maxy = aabb->maxy;		HX_STACK_VAR(maxy,"maxy");
										HX_STACK_LINE(5299)
										int count = ::Std_obj::_int((((angvel * dt) * s->sweepCoef) * 0.0083333333333333332));		HX_STACK_VAR(count,"count");
										HX_STACK_LINE(5300)
										if (((count > (int)8))){
											HX_STACK_LINE(5300)
											count = (int)8;
										}
										HX_STACK_LINE(5301)
										Float anginc = (Float((angvel * dt)) / Float(count));		HX_STACK_VAR(anginc,"anginc");
										HX_STACK_LINE(5302)
										{
											HX_STACK_LINE(5302)
											Float delta = (dt - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
											HX_STACK_LINE(5302)
											if (((delta != (int)0))){
												HX_STACK_LINE(5302)
												cur->sweepTime = dt;
												HX_STACK_LINE(5302)
												{
													HX_STACK_LINE(5302)
													Float t = delta;		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5302)
													hx::AddEq(cur->posx,(cur->velx * t));
													HX_STACK_LINE(5302)
													hx::AddEq(cur->posy,(cur->vely * t));
												}
												HX_STACK_LINE(5302)
												if (((cur->angvel != (int)0))){
													HX_STACK_LINE(5302)
													Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
													HX_STACK_LINE(5302)
													hx::AddEq(cur->rot,dr);
													HX_STACK_LINE(5302)
													if ((((dr * dr) > 0.0001))){
														HX_STACK_LINE(5302)
														Float _g8 = ::Math_obj::sin(cur->rot);		HX_STACK_VAR(_g8,"_g8");
														HX_STACK_LINE(5302)
														cur->axisx = _g8;
														HX_STACK_LINE(5302)
														Float _g9 = ::Math_obj::cos(cur->rot);		HX_STACK_VAR(_g9,"_g9");
														HX_STACK_LINE(5302)
														cur->axisy = _g9;
														HX_STACK_LINE(5302)
														Dynamic();
													}
													else{
														HX_STACK_LINE(5302)
														Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
														HX_STACK_LINE(5302)
														Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
														HX_STACK_LINE(5302)
														Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
														HX_STACK_LINE(5302)
														Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
														HX_STACK_LINE(5302)
														cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
														HX_STACK_LINE(5302)
														cur->axisx = nx;
													}
												}
											}
										}
										HX_STACK_LINE(5303)
										if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
											HX_STACK_LINE(5303)
											::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5303)
											{
												HX_STACK_LINE(5303)
												_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
												HX_STACK_LINE(5303)
												_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
											}
											HX_STACK_LINE(5303)
											_this->aabb->minx = (_this->worldCOMx - _this->radius);
											HX_STACK_LINE(5303)
											_this->aabb->miny = (_this->worldCOMy - _this->radius);
											HX_STACK_LINE(5303)
											_this->aabb->maxx = (_this->worldCOMx + _this->radius);
											HX_STACK_LINE(5303)
											_this->aabb->maxy = (_this->worldCOMy + _this->radius);
										}
										else{
											HX_STACK_LINE(5303)
											::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5303)
											::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
											HX_STACK_LINE(5303)
											::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
											HX_STACK_LINE(5303)
											::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
											HX_STACK_LINE(5303)
											li = li->next;
											HX_STACK_LINE(5303)
											{
												HX_STACK_LINE(5303)
												p0->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
												HX_STACK_LINE(5303)
												p0->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
											}
											HX_STACK_LINE(5303)
											{
												HX_STACK_LINE(5303)
												_this->aabb->minx = p0->x;
												HX_STACK_LINE(5303)
												_this->aabb->miny = p0->y;
												HX_STACK_LINE(5303)
												{
												}
											}
											HX_STACK_LINE(5303)
											{
												HX_STACK_LINE(5303)
												_this->aabb->maxx = p0->x;
												HX_STACK_LINE(5303)
												_this->aabb->maxy = p0->y;
												HX_STACK_LINE(5303)
												{
												}
											}
											HX_STACK_LINE(5303)
											{
												HX_STACK_LINE(5303)
												::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
												HX_STACK_LINE(5303)
												while((true)){
													HX_STACK_LINE(5303)
													if ((!(((cx_ite2 != null()))))){
														HX_STACK_LINE(5303)
														break;
													}
													HX_STACK_LINE(5303)
													::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5303)
													{
														HX_STACK_LINE(5303)
														::zpp_nape::geom::ZPP_Vec2 l1 = li;		HX_STACK_VAR(l1,"l1");
														HX_STACK_LINE(5303)
														li = li->next;
														HX_STACK_LINE(5303)
														{
															HX_STACK_LINE(5303)
															p->x = (_this->body->posx + (((_this->body->axisy * l1->x) - (_this->body->axisx * l1->y))));
															HX_STACK_LINE(5303)
															p->y = (_this->body->posy + (((l1->x * _this->body->axisx) + (l1->y * _this->body->axisy))));
														}
														HX_STACK_LINE(5303)
														if (((p->x < _this->aabb->minx))){
															HX_STACK_LINE(5303)
															_this->aabb->minx = p->x;
														}
														HX_STACK_LINE(5303)
														if (((p->x > _this->aabb->maxx))){
															HX_STACK_LINE(5303)
															_this->aabb->maxx = p->x;
														}
														HX_STACK_LINE(5303)
														if (((p->y < _this->aabb->miny))){
															HX_STACK_LINE(5303)
															_this->aabb->miny = p->y;
														}
														HX_STACK_LINE(5303)
														if (((p->y > _this->aabb->maxy))){
															HX_STACK_LINE(5303)
															_this->aabb->maxy = p->y;
														}
													}
													HX_STACK_LINE(5303)
													cx_ite2 = cx_ite2->next;
												}
											}
										}
										HX_STACK_LINE(5304)
										if (((minx < aabb->minx))){
											HX_STACK_LINE(5304)
											aabb->minx = minx;
										}
										else{
											HX_STACK_LINE(5304)
											minx = aabb->minx;
										}
										HX_STACK_LINE(5305)
										if (((miny < aabb->miny))){
											HX_STACK_LINE(5305)
											aabb->miny = miny;
										}
										else{
											HX_STACK_LINE(5305)
											miny = aabb->miny;
										}
										HX_STACK_LINE(5306)
										if (((maxx > aabb->maxx))){
											HX_STACK_LINE(5306)
											aabb->maxx = maxx;
										}
										else{
											HX_STACK_LINE(5306)
											maxx = aabb->maxx;
										}
										HX_STACK_LINE(5307)
										if (((maxy > aabb->maxy))){
											HX_STACK_LINE(5307)
											aabb->maxy = maxy;
										}
										else{
											HX_STACK_LINE(5307)
											maxy = aabb->maxy;
										}
										HX_STACK_LINE(5308)
										{
											HX_STACK_LINE(5308)
											int _g = (int)1;		HX_STACK_VAR(_g,"_g");
											HX_STACK_LINE(5308)
											while((true)){
												HX_STACK_LINE(5308)
												if ((!(((_g < count))))){
													HX_STACK_LINE(5308)
													break;
												}
												HX_STACK_LINE(5308)
												int i = (_g)++;		HX_STACK_VAR(i,"i");
												HX_STACK_LINE(5309)
												{
													HX_STACK_LINE(5309)
													Float dt1 = ((anginc * i) * iangvel);		HX_STACK_VAR(dt1,"dt1");
													HX_STACK_LINE(5309)
													Float delta = (dt1 - cur->sweepTime);		HX_STACK_VAR(delta,"delta");
													HX_STACK_LINE(5309)
													if (((delta != (int)0))){
														HX_STACK_LINE(5309)
														cur->sweepTime = dt1;
														HX_STACK_LINE(5309)
														{
															HX_STACK_LINE(5309)
															Float t = delta;		HX_STACK_VAR(t,"t");
															HX_STACK_LINE(5309)
															hx::AddEq(cur->posx,(cur->velx * t));
															HX_STACK_LINE(5309)
															hx::AddEq(cur->posy,(cur->vely * t));
														}
														HX_STACK_LINE(5309)
														if (((cur->angvel != (int)0))){
															HX_STACK_LINE(5309)
															Float dr = (cur->sweep_angvel * delta);		HX_STACK_VAR(dr,"dr");
															HX_STACK_LINE(5309)
															hx::AddEq(cur->rot,dr);
															HX_STACK_LINE(5309)
															if ((((dr * dr) > 0.0001))){
																HX_STACK_LINE(5309)
																Float _g10 = ::Math_obj::sin(cur->rot);		HX_STACK_VAR(_g10,"_g10");
																HX_STACK_LINE(5309)
																cur->axisx = _g10;
																HX_STACK_LINE(5309)
																Float _g11 = ::Math_obj::cos(cur->rot);		HX_STACK_VAR(_g11,"_g11");
																HX_STACK_LINE(5309)
																cur->axisy = _g11;
																HX_STACK_LINE(5309)
																Dynamic();
															}
															else{
																HX_STACK_LINE(5309)
																Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
																HX_STACK_LINE(5309)
																Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
																HX_STACK_LINE(5309)
																Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
																HX_STACK_LINE(5309)
																Float nx = ((((p * cur->axisx) + (dr * cur->axisy))) * m);		HX_STACK_VAR(nx,"nx");
																HX_STACK_LINE(5309)
																cur->axisy = ((((p * cur->axisy) - (dr * cur->axisx))) * m);
																HX_STACK_LINE(5309)
																cur->axisx = nx;
															}
														}
													}
												}
												HX_STACK_LINE(5310)
												if (((s->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
													HX_STACK_LINE(5310)
													::zpp_nape::shape::ZPP_Circle _this = s->circle;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5310)
													{
														HX_STACK_LINE(5310)
														_this->worldCOMx = (_this->body->posx + (((_this->body->axisy * _this->localCOMx) - (_this->body->axisx * _this->localCOMy))));
														HX_STACK_LINE(5310)
														_this->worldCOMy = (_this->body->posy + (((_this->localCOMx * _this->body->axisx) + (_this->localCOMy * _this->body->axisy))));
													}
													HX_STACK_LINE(5310)
													_this->aabb->minx = (_this->worldCOMx - _this->radius);
													HX_STACK_LINE(5310)
													_this->aabb->miny = (_this->worldCOMy - _this->radius);
													HX_STACK_LINE(5310)
													_this->aabb->maxx = (_this->worldCOMx + _this->radius);
													HX_STACK_LINE(5310)
													_this->aabb->maxy = (_this->worldCOMy + _this->radius);
												}
												else{
													HX_STACK_LINE(5310)
													::zpp_nape::shape::ZPP_Polygon _this = s->polygon;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(5310)
													::zpp_nape::geom::ZPP_Vec2 li = _this->lverts->next;		HX_STACK_VAR(li,"li");
													HX_STACK_LINE(5310)
													::zpp_nape::geom::ZPP_Vec2 p0 = _this->gverts->next;		HX_STACK_VAR(p0,"p0");
													HX_STACK_LINE(5310)
													::zpp_nape::geom::ZPP_Vec2 l = li;		HX_STACK_VAR(l,"l");
													HX_STACK_LINE(5310)
													li = li->next;
													HX_STACK_LINE(5310)
													{
														HX_STACK_LINE(5310)
														p0->x = (_this->body->posx + (((_this->body->axisy * l->x) - (_this->body->axisx * l->y))));
														HX_STACK_LINE(5310)
														p0->y = (_this->body->posy + (((l->x * _this->body->axisx) + (l->y * _this->body->axisy))));
													}
													HX_STACK_LINE(5310)
													{
														HX_STACK_LINE(5310)
														_this->aabb->minx = p0->x;
														HX_STACK_LINE(5310)
														_this->aabb->miny = p0->y;
														HX_STACK_LINE(5310)
														{
														}
													}
													HX_STACK_LINE(5310)
													{
														HX_STACK_LINE(5310)
														_this->aabb->maxx = p0->x;
														HX_STACK_LINE(5310)
														_this->aabb->maxy = p0->y;
														HX_STACK_LINE(5310)
														{
														}
													}
													HX_STACK_LINE(5310)
													{
														HX_STACK_LINE(5310)
														::zpp_nape::geom::ZPP_Vec2 cx_ite2 = _this->gverts->next->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(5310)
														while((true)){
															HX_STACK_LINE(5310)
															if ((!(((cx_ite2 != null()))))){
																HX_STACK_LINE(5310)
																break;
															}
															HX_STACK_LINE(5310)
															::zpp_nape::geom::ZPP_Vec2 p = cx_ite2;		HX_STACK_VAR(p,"p");
															HX_STACK_LINE(5310)
															{
																HX_STACK_LINE(5310)
																::zpp_nape::geom::ZPP_Vec2 l1 = li;		HX_STACK_VAR(l1,"l1");
																HX_STACK_LINE(5310)
																li = li->next;
																HX_STACK_LINE(5310)
																{
																	HX_STACK_LINE(5310)
																	p->x = (_this->body->posx + (((_this->body->axisy * l1->x) - (_this->body->axisx * l1->y))));
																	HX_STACK_LINE(5310)
																	p->y = (_this->body->posy + (((l1->x * _this->body->axisx) + (l1->y * _this->body->axisy))));
																}
																HX_STACK_LINE(5310)
																if (((p->x < _this->aabb->minx))){
																	HX_STACK_LINE(5310)
																	_this->aabb->minx = p->x;
																}
																HX_STACK_LINE(5310)
																if (((p->x > _this->aabb->maxx))){
																	HX_STACK_LINE(5310)
																	_this->aabb->maxx = p->x;
																}
																HX_STACK_LINE(5310)
																if (((p->y < _this->aabb->miny))){
																	HX_STACK_LINE(5310)
																	_this->aabb->miny = p->y;
																}
																HX_STACK_LINE(5310)
																if (((p->y > _this->aabb->maxy))){
																	HX_STACK_LINE(5310)
																	_this->aabb->maxy = p->y;
																}
															}
															HX_STACK_LINE(5310)
															cx_ite2 = cx_ite2->next;
														}
													}
												}
												HX_STACK_LINE(5311)
												if (((minx < aabb->minx))){
													HX_STACK_LINE(5311)
													aabb->minx = minx;
												}
												else{
													HX_STACK_LINE(5311)
													minx = aabb->minx;
												}
												HX_STACK_LINE(5312)
												if (((miny < aabb->miny))){
													HX_STACK_LINE(5312)
													aabb->miny = miny;
												}
												else{
													HX_STACK_LINE(5312)
													miny = aabb->miny;
												}
												HX_STACK_LINE(5313)
												if (((maxx > aabb->maxx))){
													HX_STACK_LINE(5313)
													aabb->maxx = maxx;
												}
												else{
													HX_STACK_LINE(5313)
													maxx = aabb->maxx;
												}
												HX_STACK_LINE(5314)
												if (((maxy > aabb->maxy))){
													HX_STACK_LINE(5314)
													aabb->maxy = maxy;
												}
												else{
													HX_STACK_LINE(5314)
													maxy = aabb->maxy;
												}
											}
										}
										HX_STACK_LINE(5316)
										this->bphase->sync(s);
									}
									HX_STACK_LINE(5318)
									cx_ite1 = cx_ite1->next;
								}
							}
							HX_STACK_LINE(5321)
							cur->sweepFrozen = false;
							HX_STACK_LINE(5322)
							if (((bool((cur->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(cur->bulletEnabled)))){
								HX_STACK_LINE(5323)
								Float linThreshold2 = (::nape::Config_obj::bulletCCDLinearThreshold * cur->sweepRadius);		HX_STACK_VAR(linThreshold2,"linThreshold2");
								HX_STACK_LINE(5324)
								Float angThreshold2 = ::nape::Config_obj::bulletCCDAngularThreshold;		HX_STACK_VAR(angThreshold2,"angThreshold2");
								HX_STACK_LINE(5325)
								if (((bool(((((((cur->velx * cur->velx) + (cur->vely * cur->vely))) * dt) * dt) > (linThreshold2 * linThreshold2))) || bool(((((cur->angvel * cur->angvel) * dt) * dt) > (angThreshold2 * angThreshold2)))))){
									HX_STACK_LINE(5326)
									cur->bullet = true;
								}
							}
						}
						else{
							HX_STACK_LINE(5331)
							cur->sweepFrozen = true;
							HX_STACK_LINE(5332)
							cur->bullet = false;
						}
					}
					else{
						HX_STACK_LINE(5336)
						cur->sweepFrozen = true;
						HX_STACK_LINE(5337)
						cur->bullet = false;
					}
				}
				HX_STACK_LINE(5340)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,updatePos,(void))

bool ZPP_Space_obj::presteparb( ::zpp_nape::dynamics::ZPP_Arbiter arb,Float dt,Dynamic __o_cont){
Dynamic cont = __o_cont.Default(false);
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","presteparb",0xba8dbbb8,"zpp_nape.space.ZPP_Space.presteparb","zpp_nape/space/Space.hx",5346,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(arb,"arb")
	HX_STACK_ARG(dt,"dt")
	HX_STACK_ARG(cont,"cont")
{
		HX_STACK_LINE(5346)
		::zpp_nape::space::ZPP_Space _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(5347)
		if (((bool(!(arb->cleared)) && bool(((bool(arb->b1->component->sleeping) && bool(arb->b2->component->sleeping))))))){
			HX_STACK_LINE(5356)
			arb->sleep_stamp = this->stamp;
			HX_STACK_LINE(5357)
			arb->sleeping = true;
			HX_STACK_LINE(5358)
			return true;
		}
		HX_STACK_LINE(5362)
		if (((bool((bool(!(arb->cleared)) || bool((arb->present != (int)0)))) || bool(arb->intchange)))){
			HX_STACK_LINE(5363)
			bool endcb = (bool((bool((bool(!(cont)) && bool((arb->up_stamp == (this->stamp - (int)1))))) && bool(!(arb->cleared)))) && bool(!(arb->intchange)));		HX_STACK_VAR(endcb,"endcb");
			HX_STACK_LINE(5364)
			bool begcb = (bool((bool(arb->fresh) && bool(!(arb->cleared)))) && bool(!(arb->intchange)));		HX_STACK_VAR(begcb,"begcb");
			HX_STACK_LINE(5373)
			if ((endcb)){
				HX_STACK_LINE(5374)
				arb->endGenerated = this->stamp;
			}
			HX_STACK_LINE(5376)
			if (((bool((bool((bool(begcb) || bool(endcb))) || bool(arb->cleared))) || bool(arb->intchange)))){
				HX_STACK_LINE(5377)
				{
					HX_STACK_LINE(5377)
					::zpp_nape::shape::ZPP_Shape s1 = arb->ws1;		HX_STACK_VAR(s1,"s1");
					HX_STACK_LINE(5377)
					::zpp_nape::shape::ZPP_Shape s2 = arb->ws2;		HX_STACK_VAR(s2,"s2");
					HX_STACK_LINE(5377)
					{
						HX_STACK_LINE(5377)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5377)
						{
							HX_STACK_LINE(5377)
							while((true)){
								HX_STACK_LINE(5377)
								if ((!((!(((_this->head == null()))))))){
									HX_STACK_LINE(5377)
									break;
								}
								HX_STACK_LINE(5377)
								::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5377)
								_this->head = ret->next;
								HX_STACK_LINE(5377)
								{
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5377)
									o->elt = null();
									HX_STACK_LINE(5377)
									o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
								}
								HX_STACK_LINE(5377)
								if (((_this->head == null()))){
									HX_STACK_LINE(5377)
									_this->pushmod = true;
								}
								HX_STACK_LINE(5377)
								_this->modified = true;
								HX_STACK_LINE(5377)
								(_this->length)--;
							}
							HX_STACK_LINE(5377)
							_this->pushmod = true;
						}
					}
					HX_STACK_LINE(5377)
					{
						HX_STACK_LINE(5377)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5377)
						{
							HX_STACK_LINE(5377)
							while((true)){
								HX_STACK_LINE(5377)
								if ((!((!(((_this->head == null()))))))){
									HX_STACK_LINE(5377)
									break;
								}
								HX_STACK_LINE(5377)
								::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5377)
								_this->head = ret->next;
								HX_STACK_LINE(5377)
								{
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5377)
									o->elt = null();
									HX_STACK_LINE(5377)
									o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
								}
								HX_STACK_LINE(5377)
								if (((_this->head == null()))){
									HX_STACK_LINE(5377)
									_this->pushmod = true;
								}
								HX_STACK_LINE(5377)
								_this->modified = true;
								HX_STACK_LINE(5377)
								(_this->length)--;
							}
							HX_STACK_LINE(5377)
							_this->pushmod = true;
						}
					}
					HX_STACK_LINE(5377)
					if (((s1->cbSet != null()))){
						HX_STACK_LINE(5377)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5377)
						::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(5377)
						{
							HX_STACK_LINE(5377)
							::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(5377)
							{
								HX_STACK_LINE(5377)
								if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor _g1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g1,"_g1");
									HX_STACK_LINE(5377)
									ret = _g1;
								}
								else{
									HX_STACK_LINE(5377)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
									HX_STACK_LINE(5377)
									ret->next = null();
								}
								HX_STACK_LINE(5377)
								Dynamic();
							}
							HX_STACK_LINE(5377)
							ret->elt = s1;
							HX_STACK_LINE(5377)
							temp = ret;
						}
						HX_STACK_LINE(5377)
						temp->next = _this->head;
						HX_STACK_LINE(5377)
						_this->head = temp;
						HX_STACK_LINE(5377)
						_this->modified = true;
						HX_STACK_LINE(5377)
						(_this->length)++;
						HX_STACK_LINE(5377)
						s1;
					}
					HX_STACK_LINE(5377)
					if (((s1->body->cbSet != null()))){
						HX_STACK_LINE(5377)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5377)
						::zpp_nape::phys::ZPP_Interactor o = s1->body;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(5377)
						::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(5377)
						{
							HX_STACK_LINE(5377)
							::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(5377)
							{
								HX_STACK_LINE(5377)
								if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor _g1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g1,"_g1");
									HX_STACK_LINE(5377)
									ret = _g1;
								}
								else{
									HX_STACK_LINE(5377)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
									HX_STACK_LINE(5377)
									ret->next = null();
								}
								HX_STACK_LINE(5377)
								Dynamic();
							}
							HX_STACK_LINE(5377)
							ret->elt = o;
							HX_STACK_LINE(5377)
							temp = ret;
						}
						HX_STACK_LINE(5377)
						temp->next = _this->head;
						HX_STACK_LINE(5377)
						_this->head = temp;
						HX_STACK_LINE(5377)
						_this->modified = true;
						HX_STACK_LINE(5377)
						(_this->length)++;
						HX_STACK_LINE(5377)
						o;
					}
					HX_STACK_LINE(5377)
					if (((s2->cbSet != null()))){
						HX_STACK_LINE(5377)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5377)
						::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(5377)
						{
							HX_STACK_LINE(5377)
							::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(5377)
							{
								HX_STACK_LINE(5377)
								if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor _g2 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g2,"_g2");
									HX_STACK_LINE(5377)
									ret = _g2;
								}
								else{
									HX_STACK_LINE(5377)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
									HX_STACK_LINE(5377)
									ret->next = null();
								}
								HX_STACK_LINE(5377)
								Dynamic();
							}
							HX_STACK_LINE(5377)
							ret->elt = s2;
							HX_STACK_LINE(5377)
							temp = ret;
						}
						HX_STACK_LINE(5377)
						temp->next = _this->head;
						HX_STACK_LINE(5377)
						_this->head = temp;
						HX_STACK_LINE(5377)
						_this->modified = true;
						HX_STACK_LINE(5377)
						(_this->length)++;
						HX_STACK_LINE(5377)
						s2;
					}
					HX_STACK_LINE(5377)
					if (((s2->body->cbSet != null()))){
						HX_STACK_LINE(5377)
						::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5377)
						::zpp_nape::phys::ZPP_Interactor o = s2->body;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(5377)
						::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
						HX_STACK_LINE(5377)
						{
							HX_STACK_LINE(5377)
							::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(5377)
							{
								HX_STACK_LINE(5377)
								if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor _g3 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g3,"_g3");
									HX_STACK_LINE(5377)
									ret = _g3;
								}
								else{
									HX_STACK_LINE(5377)
									ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
									HX_STACK_LINE(5377)
									ret->next = null();
								}
								HX_STACK_LINE(5377)
								Dynamic();
							}
							HX_STACK_LINE(5377)
							ret->elt = o;
							HX_STACK_LINE(5377)
							temp = ret;
						}
						HX_STACK_LINE(5377)
						temp->next = _this->head;
						HX_STACK_LINE(5377)
						_this->head = temp;
						HX_STACK_LINE(5377)
						_this->modified = true;
						HX_STACK_LINE(5377)
						(_this->length)++;
						HX_STACK_LINE(5377)
						o;
					}
					HX_STACK_LINE(5377)
					::zpp_nape::phys::ZPP_Compound c1 = s1->body->compound;		HX_STACK_VAR(c1,"c1");
					HX_STACK_LINE(5377)
					::zpp_nape::phys::ZPP_Compound c2 = s2->body->compound;		HX_STACK_VAR(c2,"c2");
					HX_STACK_LINE(5377)
					while((true)){
						HX_STACK_LINE(5377)
						if ((!(((c1 != c2))))){
							HX_STACK_LINE(5377)
							break;
						}
						HX_STACK_LINE(5377)
						int d1;		HX_STACK_VAR(d1,"d1");
						HX_STACK_LINE(5377)
						if (((c1 == null()))){
							HX_STACK_LINE(5377)
							d1 = (int)0;
						}
						else{
							HX_STACK_LINE(5377)
							d1 = c1->depth;
						}
						HX_STACK_LINE(5377)
						int d2;		HX_STACK_VAR(d2,"d2");
						HX_STACK_LINE(5377)
						if (((c2 == null()))){
							HX_STACK_LINE(5377)
							d2 = (int)0;
						}
						else{
							HX_STACK_LINE(5377)
							d2 = c2->depth;
						}
						HX_STACK_LINE(5377)
						if (((d1 < d2))){
							HX_STACK_LINE(5377)
							if (((c2->cbSet != null()))){
								HX_STACK_LINE(5377)
								::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(5377)
								::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
								HX_STACK_LINE(5377)
								{
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5377)
									{
										HX_STACK_LINE(5377)
										if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
											HX_STACK_LINE(5377)
											::zpp_nape::util::ZNPNode_ZPP_Interactor _g4 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g4,"_g4");
											HX_STACK_LINE(5377)
											ret = _g4;
										}
										else{
											HX_STACK_LINE(5377)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
											HX_STACK_LINE(5377)
											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
											HX_STACK_LINE(5377)
											ret->next = null();
										}
										HX_STACK_LINE(5377)
										Dynamic();
									}
									HX_STACK_LINE(5377)
									ret->elt = c2;
									HX_STACK_LINE(5377)
									temp = ret;
								}
								HX_STACK_LINE(5377)
								temp->next = _this->head;
								HX_STACK_LINE(5377)
								_this->head = temp;
								HX_STACK_LINE(5377)
								_this->modified = true;
								HX_STACK_LINE(5377)
								(_this->length)++;
								HX_STACK_LINE(5377)
								c2;
							}
							HX_STACK_LINE(5377)
							c2 = c2->compound;
						}
						else{
							HX_STACK_LINE(5377)
							if (((c1->cbSet != null()))){
								HX_STACK_LINE(5377)
								::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(5377)
								::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
								HX_STACK_LINE(5377)
								{
									HX_STACK_LINE(5377)
									::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5377)
									{
										HX_STACK_LINE(5377)
										if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
											HX_STACK_LINE(5377)
											::zpp_nape::util::ZNPNode_ZPP_Interactor _g5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g5,"_g5");
											HX_STACK_LINE(5377)
											ret = _g5;
										}
										else{
											HX_STACK_LINE(5377)
											ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
											HX_STACK_LINE(5377)
											::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
											HX_STACK_LINE(5377)
											ret->next = null();
										}
										HX_STACK_LINE(5377)
										Dynamic();
									}
									HX_STACK_LINE(5377)
									ret->elt = c1;
									HX_STACK_LINE(5377)
									temp = ret;
								}
								HX_STACK_LINE(5377)
								temp->next = _this->head;
								HX_STACK_LINE(5377)
								_this->head = temp;
								HX_STACK_LINE(5377)
								_this->modified = true;
								HX_STACK_LINE(5377)
								(_this->length)++;
								HX_STACK_LINE(5377)
								c1;
							}
							HX_STACK_LINE(5377)
							c1 = c1->compound;
						}
					}
				}
				HX_STACK_LINE(5378)
				{
					HX_STACK_LINE(5379)
					::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = this->mrca1->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(5380)
					while((true)){
						HX_STACK_LINE(5380)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(5380)
							break;
						}
						HX_STACK_LINE(5381)
						::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;		HX_STACK_VAR(i1,"i1");
						HX_STACK_LINE(5383)
						{
							HX_STACK_LINE(5384)
							::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca2->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
							HX_STACK_LINE(5385)
							while((true)){
								HX_STACK_LINE(5385)
								if ((!(((cx_ite1 != null()))))){
									HX_STACK_LINE(5385)
									break;
								}
								HX_STACK_LINE(5386)
								::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;		HX_STACK_VAR(i2,"i2");
								HX_STACK_LINE(5387)
								{
									HX_STACK_LINE(5388)
									::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
									HX_STACK_LINE(5389)
									::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
									struct _Function_8_1{
										inline static bool Block( ::zpp_nape::callbacks::ZPP_CbSet &cb2,::zpp_nape::callbacks::ZPP_CbSet &cb1){
											HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5398,0x2b65ed03)
											{
												HX_STACK_LINE(5398)
												::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5398)
												{
													HX_STACK_LINE(5398)
													::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(5398)
													::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
													HX_STACK_LINE(5398)
													if (((cb1->cbpairs->length < cb2->cbpairs->length))){
														HX_STACK_LINE(5398)
														pairs = cb1->cbpairs;
													}
													else{
														HX_STACK_LINE(5398)
														pairs = cb2->cbpairs;
													}
													HX_STACK_LINE(5398)
													{
														HX_STACK_LINE(5398)
														::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(5398)
														while((true)){
															HX_STACK_LINE(5398)
															if ((!(((cx_ite2 != null()))))){
																HX_STACK_LINE(5398)
																break;
															}
															HX_STACK_LINE(5398)
															::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
															HX_STACK_LINE(5398)
															if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																HX_STACK_LINE(5398)
																ret = p;
																HX_STACK_LINE(5398)
																break;
															}
															HX_STACK_LINE(5398)
															cx_ite2 = cx_ite2->next;
														}
													}
													HX_STACK_LINE(5398)
													if (((ret == null()))){
														HX_STACK_LINE(5398)
														::zpp_nape::callbacks::ZPP_CbSetPair _g7;		HX_STACK_VAR(_g7,"_g7");
														HX_STACK_LINE(5398)
														{
															HX_STACK_LINE(5398)
															::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(5398)
															{
																HX_STACK_LINE(5398)
																if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																	HX_STACK_LINE(5398)
																	::zpp_nape::callbacks::ZPP_CbSetPair _g6 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g6,"_g6");
																	HX_STACK_LINE(5398)
																	ret1 = _g6;
																}
																else{
																	HX_STACK_LINE(5398)
																	ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																	HX_STACK_LINE(5398)
																	::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																	HX_STACK_LINE(5398)
																	ret1->next = null();
																}
																HX_STACK_LINE(5398)
																ret1->zip_listeners = true;
															}
															HX_STACK_LINE(5398)
															if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																HX_STACK_LINE(5398)
																ret1->a = cb1;
																HX_STACK_LINE(5398)
																ret1->b = cb2;
															}
															else{
																HX_STACK_LINE(5398)
																ret1->a = cb2;
																HX_STACK_LINE(5398)
																ret1->b = cb1;
															}
															HX_STACK_LINE(5398)
															_g7 = ret1;
														}
														HX_STACK_LINE(5398)
														ret = _g7;
														HX_STACK_LINE(5398)
														cb1->cbpairs->add(ret);
														HX_STACK_LINE(5398)
														if (((cb2 != cb1))){
															HX_STACK_LINE(5398)
															cb2->cbpairs->add(ret);
														}
													}
													HX_STACK_LINE(5398)
													if ((ret->zip_listeners)){
														HX_STACK_LINE(5398)
														ret->zip_listeners = false;
														HX_STACK_LINE(5398)
														ret->__validate();
													}
													HX_STACK_LINE(5398)
													_this = ret;
												}
												HX_STACK_LINE(5398)
												return (_this->listeners->head == null());
											}
											return null();
										}
									};
									HX_STACK_LINE(5398)
									if ((_Function_8_1::Block(cb2,cb1))){
										HX_STACK_LINE(5399)
										cx_ite1 = cx_ite1->next;
										HX_STACK_LINE(5400)
										continue;
									}
									HX_STACK_LINE(5402)
									::zpp_nape::space::ZPP_CallbackSet callbackset = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(callbackset,"callbackset");
									HX_STACK_LINE(5403)
									if (((bool(begcb) || bool(arb->intchange)))){
										HX_STACK_LINE(5404)
										if (((callbackset == null()))){
											HX_STACK_LINE(5405)
											::zpp_nape::space::ZPP_CallbackSet _g8 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);		HX_STACK_VAR(_g8,"_g8");
											HX_STACK_LINE(5405)
											callbackset = _g8;
											HX_STACK_LINE(5406)
											this->add_callbackset(callbackset);
										}
										HX_STACK_LINE(5408)
										{
											HX_STACK_LINE(5408)
											int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_BEGIN;		HX_STACK_VAR(event,"event");
											HX_STACK_LINE(5408)
											{
												HX_STACK_LINE(5408)
												::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5408)
												{
													HX_STACK_LINE(5408)
													::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(5408)
													::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
													HX_STACK_LINE(5408)
													if (((cb1->cbpairs->length < cb2->cbpairs->length))){
														HX_STACK_LINE(5408)
														pairs = cb1->cbpairs;
													}
													else{
														HX_STACK_LINE(5408)
														pairs = cb2->cbpairs;
													}
													HX_STACK_LINE(5408)
													{
														HX_STACK_LINE(5408)
														::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(5408)
														while((true)){
															HX_STACK_LINE(5408)
															if ((!(((cx_ite2 != null()))))){
																HX_STACK_LINE(5408)
																break;
															}
															HX_STACK_LINE(5408)
															::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
															HX_STACK_LINE(5408)
															if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																HX_STACK_LINE(5408)
																ret = p;
																HX_STACK_LINE(5408)
																break;
															}
															HX_STACK_LINE(5408)
															cx_ite2 = cx_ite2->next;
														}
													}
													HX_STACK_LINE(5408)
													if (((ret == null()))){
														HX_STACK_LINE(5408)
														::zpp_nape::callbacks::ZPP_CbSetPair _g10;		HX_STACK_VAR(_g10,"_g10");
														HX_STACK_LINE(5408)
														{
															HX_STACK_LINE(5408)
															::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(5408)
															{
																HX_STACK_LINE(5408)
																if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																	HX_STACK_LINE(5408)
																	::zpp_nape::callbacks::ZPP_CbSetPair _g9 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g9,"_g9");
																	HX_STACK_LINE(5408)
																	ret1 = _g9;
																}
																else{
																	HX_STACK_LINE(5408)
																	ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																	HX_STACK_LINE(5408)
																	::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																	HX_STACK_LINE(5408)
																	ret1->next = null();
																}
																HX_STACK_LINE(5408)
																ret1->zip_listeners = true;
															}
															HX_STACK_LINE(5408)
															if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																HX_STACK_LINE(5408)
																ret1->a = cb1;
																HX_STACK_LINE(5408)
																ret1->b = cb2;
															}
															else{
																HX_STACK_LINE(5408)
																ret1->a = cb2;
																HX_STACK_LINE(5408)
																ret1->b = cb1;
															}
															HX_STACK_LINE(5408)
															_g10 = ret1;
														}
														HX_STACK_LINE(5408)
														ret = _g10;
														HX_STACK_LINE(5408)
														cb1->cbpairs->add(ret);
														HX_STACK_LINE(5408)
														if (((cb2 != cb1))){
															HX_STACK_LINE(5408)
															cb2->cbpairs->add(ret);
														}
													}
													HX_STACK_LINE(5408)
													if ((ret->zip_listeners)){
														HX_STACK_LINE(5408)
														ret->zip_listeners = false;
														HX_STACK_LINE(5408)
														ret->__validate();
													}
													HX_STACK_LINE(5408)
													_this = ret;
												}
												HX_STACK_LINE(5408)
												{
													HX_STACK_LINE(5408)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = _this->listeners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(5408)
													while((true)){
														HX_STACK_LINE(5408)
														if ((!(((cx_ite2 != null()))))){
															HX_STACK_LINE(5408)
															break;
														}
														HX_STACK_LINE(5408)
														::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
														HX_STACK_LINE(5408)
														if (((x->event == event))){
															HX_STACK_LINE(5409)
															if (((  (((((int(x->itype) & int(arb->type))) != (int)0))) ? bool(callbackset->empty_arb(x->itype)) : bool(false) ))){
																HX_STACK_LINE(5410)
																::zpp_nape::callbacks::ZPP_Callback cb = _g->push_callback(x);		HX_STACK_VAR(cb,"cb");
																HX_STACK_LINE(5411)
																cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_BEGIN;
																HX_STACK_LINE(5412)
																{
																	HX_STACK_LINE(5412)
																	::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																	HX_STACK_LINE(5412)
																	::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																	struct _Function_16_1{
																		inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o1){
																			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5412,0x2b65ed03)
																			{
																				HX_STACK_LINE(5412)
																				::zpp_nape::callbacks::ZPP_OptionType _this1 = x->options1;		HX_STACK_VAR(_this1,"_this1");
																				HX_STACK_LINE(5412)
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(5412)
																				return (  ((_this1->nonemptyintersection(xs,_this1->includes))) ? bool(!(_this1->nonemptyintersection(xs,_this1->excludes))) : bool(false) );
																			}
																			return null();
																		}
																	};
																	struct _Function_16_2{
																		inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o2){
																			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5412,0x2b65ed03)
																			{
																				HX_STACK_LINE(5412)
																				::zpp_nape::callbacks::ZPP_OptionType _this1 = x->options2;		HX_STACK_VAR(_this1,"_this1");
																				HX_STACK_LINE(5412)
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(5412)
																				return (  ((_this1->nonemptyintersection(xs,_this1->includes))) ? bool(!(_this1->nonemptyintersection(xs,_this1->excludes))) : bool(false) );
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(5412)
																	if (((  ((_Function_16_1::Block(x,o1))) ? bool(_Function_16_2::Block(x,o2)) : bool(false) ))){
																		HX_STACK_LINE(5412)
																		cb->int1 = o1;
																		HX_STACK_LINE(5412)
																		cb->int2 = o2;
																	}
																	else{
																		HX_STACK_LINE(5412)
																		cb->int1 = o2;
																		HX_STACK_LINE(5412)
																		cb->int2 = o1;
																	}
																}
																HX_STACK_LINE(5413)
																cb->set = callbackset;
															}
														}
														HX_STACK_LINE(5408)
														cx_ite2 = cx_ite2->next;
													}
												}
											}
										}
										struct _Function_9_1{
											inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &callbackset,::zpp_nape::dynamics::ZPP_Arbiter &arb){
												HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5416,0x2b65ed03)
												{
													HX_STACK_LINE(5416)
													bool ret;		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(5416)
													{
														HX_STACK_LINE(5416)
														ret = false;
														HX_STACK_LINE(5416)
														{
															HX_STACK_LINE(5416)
															::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite2 = callbackset->arbiters->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(5416)
															while((true)){
																HX_STACK_LINE(5416)
																if ((!(((cx_ite2 != null()))))){
																	HX_STACK_LINE(5416)
																	break;
																}
																HX_STACK_LINE(5416)
																::zpp_nape::dynamics::ZPP_Arbiter npite = cx_ite2->elt;		HX_STACK_VAR(npite,"npite");
																HX_STACK_LINE(5416)
																if (((npite == arb))){
																	HX_STACK_LINE(5416)
																	ret = true;
																	HX_STACK_LINE(5416)
																	break;
																}
																HX_STACK_LINE(5416)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
													HX_STACK_LINE(5416)
													return ret;
												}
												return null();
											}
										};
										struct _Function_9_2{
											inline static bool Block( ::zpp_nape::space::ZPP_CallbackSet &callbackset,::zpp_nape::dynamics::ZPP_Arbiter &arb){
												HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5416,0x2b65ed03)
												{
													HX_STACK_LINE(5416)
													{
														HX_STACK_LINE(5416)
														::zpp_nape::util::ZNPList_ZPP_Arbiter _this = callbackset->arbiters;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(5416)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter temp;		HX_STACK_VAR(temp,"temp");
														HX_STACK_LINE(5416)
														{
															HX_STACK_LINE(5416)
															::zpp_nape::util::ZNPNode_ZPP_Arbiter ret;		HX_STACK_VAR(ret,"ret");
															HX_STACK_LINE(5416)
															{
																HX_STACK_LINE(5416)
																if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
																	HX_STACK_LINE(5416)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter _g11 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(_g11,"_g11");
																	HX_STACK_LINE(5416)
																	ret = _g11;
																}
																else{
																	HX_STACK_LINE(5416)
																	ret = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
																	HX_STACK_LINE(5416)
																	::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret->next;
																	HX_STACK_LINE(5416)
																	ret->next = null();
																}
																HX_STACK_LINE(5416)
																Dynamic();
															}
															HX_STACK_LINE(5416)
															ret->elt = arb;
															HX_STACK_LINE(5416)
															temp = ret;
														}
														HX_STACK_LINE(5416)
														temp->next = _this->head;
														HX_STACK_LINE(5416)
														_this->head = temp;
														HX_STACK_LINE(5416)
														_this->modified = true;
														HX_STACK_LINE(5416)
														(_this->length)++;
														HX_STACK_LINE(5416)
														arb;
													}
													HX_STACK_LINE(5416)
													return true;
												}
												return null();
											}
										};
										HX_STACK_LINE(5416)
										if (((  ((!(_Function_9_1::Block(callbackset,arb)))) ? bool(_Function_9_2::Block(callbackset,arb)) : bool(false) ))){
											HX_STACK_LINE(5416)
											(arb->present)++;
										}
									}
									else{
										HX_STACK_LINE(5419)
										(arb->present)--;
										HX_STACK_LINE(5436)
										callbackset->remove_arb(arb);
										HX_STACK_LINE(5437)
										{
											HX_STACK_LINE(5437)
											int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_END;		HX_STACK_VAR(event,"event");
											HX_STACK_LINE(5437)
											{
												HX_STACK_LINE(5437)
												::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5437)
												{
													HX_STACK_LINE(5437)
													::zpp_nape::callbacks::ZPP_CbSetPair ret = null();		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(5437)
													::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
													HX_STACK_LINE(5437)
													if (((cb1->cbpairs->length < cb2->cbpairs->length))){
														HX_STACK_LINE(5437)
														pairs = cb1->cbpairs;
													}
													else{
														HX_STACK_LINE(5437)
														pairs = cb2->cbpairs;
													}
													HX_STACK_LINE(5437)
													{
														HX_STACK_LINE(5437)
														::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(5437)
														while((true)){
															HX_STACK_LINE(5437)
															if ((!(((cx_ite2 != null()))))){
																HX_STACK_LINE(5437)
																break;
															}
															HX_STACK_LINE(5437)
															::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
															HX_STACK_LINE(5437)
															if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																HX_STACK_LINE(5437)
																ret = p;
																HX_STACK_LINE(5437)
																break;
															}
															HX_STACK_LINE(5437)
															cx_ite2 = cx_ite2->next;
														}
													}
													HX_STACK_LINE(5437)
													if (((ret == null()))){
														HX_STACK_LINE(5437)
														::zpp_nape::callbacks::ZPP_CbSetPair _g13;		HX_STACK_VAR(_g13,"_g13");
														HX_STACK_LINE(5437)
														{
															HX_STACK_LINE(5437)
															::zpp_nape::callbacks::ZPP_CbSetPair ret1;		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(5437)
															{
																HX_STACK_LINE(5437)
																if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																	HX_STACK_LINE(5437)
																	::zpp_nape::callbacks::ZPP_CbSetPair _g12 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g12,"_g12");
																	HX_STACK_LINE(5437)
																	ret1 = _g12;
																}
																else{
																	HX_STACK_LINE(5437)
																	ret1 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																	HX_STACK_LINE(5437)
																	::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret1->next;
																	HX_STACK_LINE(5437)
																	ret1->next = null();
																}
																HX_STACK_LINE(5437)
																ret1->zip_listeners = true;
															}
															HX_STACK_LINE(5437)
															if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																HX_STACK_LINE(5437)
																ret1->a = cb1;
																HX_STACK_LINE(5437)
																ret1->b = cb2;
															}
															else{
																HX_STACK_LINE(5437)
																ret1->a = cb2;
																HX_STACK_LINE(5437)
																ret1->b = cb1;
															}
															HX_STACK_LINE(5437)
															_g13 = ret1;
														}
														HX_STACK_LINE(5437)
														ret = _g13;
														HX_STACK_LINE(5437)
														cb1->cbpairs->add(ret);
														HX_STACK_LINE(5437)
														if (((cb2 != cb1))){
															HX_STACK_LINE(5437)
															cb2->cbpairs->add(ret);
														}
													}
													HX_STACK_LINE(5437)
													if ((ret->zip_listeners)){
														HX_STACK_LINE(5437)
														ret->zip_listeners = false;
														HX_STACK_LINE(5437)
														ret->__validate();
													}
													HX_STACK_LINE(5437)
													_this = ret;
												}
												HX_STACK_LINE(5437)
												{
													HX_STACK_LINE(5437)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = _this->listeners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
													HX_STACK_LINE(5437)
													while((true)){
														HX_STACK_LINE(5437)
														if ((!(((cx_ite2 != null()))))){
															HX_STACK_LINE(5437)
															break;
														}
														HX_STACK_LINE(5437)
														::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
														HX_STACK_LINE(5437)
														if (((x->event == event))){
															HX_STACK_LINE(5438)
															if (((  (((((int(x->itype) & int(arb->type))) != (int)0))) ? bool(callbackset->empty_arb(x->itype)) : bool(false) ))){
																HX_STACK_LINE(5439)
																::zpp_nape::callbacks::ZPP_Callback cb = _g->push_callback(x);		HX_STACK_VAR(cb,"cb");
																HX_STACK_LINE(5440)
																cb->event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_END;
																HX_STACK_LINE(5441)
																{
																	HX_STACK_LINE(5441)
																	::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																	HX_STACK_LINE(5441)
																	::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																	struct _Function_16_1{
																		inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o1){
																			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5441,0x2b65ed03)
																			{
																				HX_STACK_LINE(5441)
																				::zpp_nape::callbacks::ZPP_OptionType _this1 = x->options1;		HX_STACK_VAR(_this1,"_this1");
																				HX_STACK_LINE(5441)
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(5441)
																				return (  ((_this1->nonemptyintersection(xs,_this1->includes))) ? bool(!(_this1->nonemptyintersection(xs,_this1->excludes))) : bool(false) );
																			}
																			return null();
																		}
																	};
																	struct _Function_16_2{
																		inline static bool Block( ::zpp_nape::callbacks::ZPP_InteractionListener &x,::zpp_nape::phys::ZPP_Interactor &o2){
																			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5441,0x2b65ed03)
																			{
																				HX_STACK_LINE(5441)
																				::zpp_nape::callbacks::ZPP_OptionType _this1 = x->options2;		HX_STACK_VAR(_this1,"_this1");
																				HX_STACK_LINE(5441)
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(5441)
																				return (  ((_this1->nonemptyintersection(xs,_this1->includes))) ? bool(!(_this1->nonemptyintersection(xs,_this1->excludes))) : bool(false) );
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(5441)
																	if (((  ((_Function_16_1::Block(x,o1))) ? bool(_Function_16_2::Block(x,o2)) : bool(false) ))){
																		HX_STACK_LINE(5441)
																		cb->int1 = o1;
																		HX_STACK_LINE(5441)
																		cb->int2 = o2;
																	}
																	else{
																		HX_STACK_LINE(5441)
																		cb->int1 = o2;
																		HX_STACK_LINE(5441)
																		cb->int2 = o1;
																	}
																}
																HX_STACK_LINE(5442)
																cb->set = callbackset;
															}
														}
														HX_STACK_LINE(5437)
														cx_ite2 = cx_ite2->next;
													}
												}
											}
										}
										HX_STACK_LINE(5445)
										if (((callbackset->arbiters->head == null()))){
											HX_STACK_LINE(5446)
											this->remove_callbackset(callbackset);
										}
									}
								}
								HX_STACK_LINE(5450)
								cx_ite1 = cx_ite1->next;
							}
						}
						HX_STACK_LINE(5454)
						cx_ite = cx_ite->next;
					}
				}
			}
			HX_STACK_LINE(5458)
			arb->fresh = false;
			HX_STACK_LINE(5459)
			arb->intchange = false;
		}
		HX_STACK_LINE(5461)
		if (((bool(arb->cleared) || bool(((arb->up_stamp + ((  (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::COL))) ? int(::nape::Config_obj::arbiterExpirationDelay) : int((int)0) ))) < this->stamp))))){
			HX_STACK_LINE(5462)
			if (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR))){
				HX_STACK_LINE(5462)
				::zpp_nape::dynamics::ZPP_SensorArbiter _this = arb->sensorarb;		HX_STACK_VAR(_this,"_this");
				HX_STACK_LINE(5462)
				{
					HX_STACK_LINE(5462)
					if ((!(_this->cleared))){
						HX_STACK_LINE(5462)
						{
							HX_STACK_LINE(5462)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = _this->b1->arbiters;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(5462)
							{
								HX_STACK_LINE(5462)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5462)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5462)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5462)
								while((true)){
									HX_STACK_LINE(5462)
									if ((!(((cur != null()))))){
										HX_STACK_LINE(5462)
										break;
									}
									HX_STACK_LINE(5462)
									if (((cur->elt == _this))){
										HX_STACK_LINE(5462)
										{
											HX_STACK_LINE(5462)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5462)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5462)
											if (((pre == null()))){
												HX_STACK_LINE(5462)
												old = _this1->head;
												HX_STACK_LINE(5462)
												ret1 = old->next;
												HX_STACK_LINE(5462)
												_this1->head = ret1;
												HX_STACK_LINE(5462)
												if (((_this1->head == null()))){
													HX_STACK_LINE(5462)
													_this1->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5462)
												old = pre->next;
												HX_STACK_LINE(5462)
												ret1 = old->next;
												HX_STACK_LINE(5462)
												pre->next = ret1;
												HX_STACK_LINE(5462)
												if (((ret1 == null()))){
													HX_STACK_LINE(5462)
													_this1->pushmod = true;
												}
											}
											HX_STACK_LINE(5462)
											{
												HX_STACK_LINE(5462)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5462)
												o->elt = null();
												HX_STACK_LINE(5462)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(5462)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5462)
											_this1->modified = true;
											HX_STACK_LINE(5462)
											(_this1->length)--;
											HX_STACK_LINE(5462)
											_this1->pushmod = true;
											HX_STACK_LINE(5462)
											ret1;
										}
										HX_STACK_LINE(5462)
										ret = true;
										HX_STACK_LINE(5462)
										break;
									}
									HX_STACK_LINE(5462)
									pre = cur;
									HX_STACK_LINE(5462)
									cur = cur->next;
								}
								HX_STACK_LINE(5462)
								ret;
							}
						}
						HX_STACK_LINE(5462)
						{
							HX_STACK_LINE(5462)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = _this->b2->arbiters;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(5462)
							{
								HX_STACK_LINE(5462)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5462)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5462)
								bool ret = false;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5462)
								while((true)){
									HX_STACK_LINE(5462)
									if ((!(((cur != null()))))){
										HX_STACK_LINE(5462)
										break;
									}
									HX_STACK_LINE(5462)
									if (((cur->elt == _this))){
										HX_STACK_LINE(5462)
										{
											HX_STACK_LINE(5462)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5462)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5462)
											if (((pre == null()))){
												HX_STACK_LINE(5462)
												old = _this1->head;
												HX_STACK_LINE(5462)
												ret1 = old->next;
												HX_STACK_LINE(5462)
												_this1->head = ret1;
												HX_STACK_LINE(5462)
												if (((_this1->head == null()))){
													HX_STACK_LINE(5462)
													_this1->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5462)
												old = pre->next;
												HX_STACK_LINE(5462)
												ret1 = old->next;
												HX_STACK_LINE(5462)
												pre->next = ret1;
												HX_STACK_LINE(5462)
												if (((ret1 == null()))){
													HX_STACK_LINE(5462)
													_this1->pushmod = true;
												}
											}
											HX_STACK_LINE(5462)
											{
												HX_STACK_LINE(5462)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5462)
												o->elt = null();
												HX_STACK_LINE(5462)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(5462)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5462)
											_this1->modified = true;
											HX_STACK_LINE(5462)
											(_this1->length)--;
											HX_STACK_LINE(5462)
											_this1->pushmod = true;
											HX_STACK_LINE(5462)
											ret1;
										}
										HX_STACK_LINE(5462)
										ret = true;
										HX_STACK_LINE(5462)
										break;
									}
									HX_STACK_LINE(5462)
									pre = cur;
									HX_STACK_LINE(5462)
									cur = cur->next;
								}
								HX_STACK_LINE(5462)
								ret;
							}
						}
						HX_STACK_LINE(5462)
						if (((_this->pair != null()))){
							HX_STACK_LINE(5462)
							_this->pair->arb = null();
							HX_STACK_LINE(5462)
							_this->pair = null();
						}
					}
					HX_STACK_LINE(5462)
					::zpp_nape::phys::ZPP_Body _g14 = _this->b2 = null();		HX_STACK_VAR(_g14,"_g14");
					HX_STACK_LINE(5462)
					_this->b1 = _g14;
					HX_STACK_LINE(5462)
					_this->active = false;
					HX_STACK_LINE(5462)
					_this->intchange = false;
				}
				HX_STACK_LINE(5462)
				{
					HX_STACK_LINE(5462)
					::zpp_nape::dynamics::ZPP_SensorArbiter o = _this;		HX_STACK_VAR(o,"o");
					HX_STACK_LINE(5462)
					o->next = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
					HX_STACK_LINE(5462)
					::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o;
				}
			}
			else{
				HX_STACK_LINE(5463)
				if (((arb->type == ::zpp_nape::dynamics::ZPP_Arbiter_obj::FLUID))){
					HX_STACK_LINE(5463)
					::zpp_nape::dynamics::ZPP_FluidArbiter _this = arb->fluidarb;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5463)
					{
						HX_STACK_LINE(5463)
						if ((!(_this->cleared))){
							HX_STACK_LINE(5463)
							{
								HX_STACK_LINE(5463)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = _this->b1->arbiters;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5463)
								{
									HX_STACK_LINE(5463)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(5463)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5463)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5463)
									while((true)){
										HX_STACK_LINE(5463)
										if ((!(((cur != null()))))){
											HX_STACK_LINE(5463)
											break;
										}
										HX_STACK_LINE(5463)
										if (((cur->elt == _this))){
											HX_STACK_LINE(5463)
											{
												HX_STACK_LINE(5463)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5463)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5463)
												if (((pre == null()))){
													HX_STACK_LINE(5463)
													old = _this1->head;
													HX_STACK_LINE(5463)
													ret1 = old->next;
													HX_STACK_LINE(5463)
													_this1->head = ret1;
													HX_STACK_LINE(5463)
													if (((_this1->head == null()))){
														HX_STACK_LINE(5463)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5463)
													old = pre->next;
													HX_STACK_LINE(5463)
													ret1 = old->next;
													HX_STACK_LINE(5463)
													pre->next = ret1;
													HX_STACK_LINE(5463)
													if (((ret1 == null()))){
														HX_STACK_LINE(5463)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5463)
												{
													HX_STACK_LINE(5463)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5463)
													o->elt = null();
													HX_STACK_LINE(5463)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(5463)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5463)
												_this1->modified = true;
												HX_STACK_LINE(5463)
												(_this1->length)--;
												HX_STACK_LINE(5463)
												_this1->pushmod = true;
												HX_STACK_LINE(5463)
												ret1;
											}
											HX_STACK_LINE(5463)
											ret = true;
											HX_STACK_LINE(5463)
											break;
										}
										HX_STACK_LINE(5463)
										pre = cur;
										HX_STACK_LINE(5463)
										cur = cur->next;
									}
									HX_STACK_LINE(5463)
									ret;
								}
							}
							HX_STACK_LINE(5463)
							{
								HX_STACK_LINE(5463)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = _this->b2->arbiters;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5463)
								{
									HX_STACK_LINE(5463)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(5463)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5463)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5463)
									while((true)){
										HX_STACK_LINE(5463)
										if ((!(((cur != null()))))){
											HX_STACK_LINE(5463)
											break;
										}
										HX_STACK_LINE(5463)
										if (((cur->elt == _this))){
											HX_STACK_LINE(5463)
											{
												HX_STACK_LINE(5463)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5463)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5463)
												if (((pre == null()))){
													HX_STACK_LINE(5463)
													old = _this1->head;
													HX_STACK_LINE(5463)
													ret1 = old->next;
													HX_STACK_LINE(5463)
													_this1->head = ret1;
													HX_STACK_LINE(5463)
													if (((_this1->head == null()))){
														HX_STACK_LINE(5463)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5463)
													old = pre->next;
													HX_STACK_LINE(5463)
													ret1 = old->next;
													HX_STACK_LINE(5463)
													pre->next = ret1;
													HX_STACK_LINE(5463)
													if (((ret1 == null()))){
														HX_STACK_LINE(5463)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5463)
												{
													HX_STACK_LINE(5463)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5463)
													o->elt = null();
													HX_STACK_LINE(5463)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(5463)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5463)
												_this1->modified = true;
												HX_STACK_LINE(5463)
												(_this1->length)--;
												HX_STACK_LINE(5463)
												_this1->pushmod = true;
												HX_STACK_LINE(5463)
												ret1;
											}
											HX_STACK_LINE(5463)
											ret = true;
											HX_STACK_LINE(5463)
											break;
										}
										HX_STACK_LINE(5463)
										pre = cur;
										HX_STACK_LINE(5463)
										cur = cur->next;
									}
									HX_STACK_LINE(5463)
									ret;
								}
							}
							HX_STACK_LINE(5463)
							if (((_this->pair != null()))){
								HX_STACK_LINE(5463)
								_this->pair->arb = null();
								HX_STACK_LINE(5463)
								_this->pair = null();
							}
						}
						HX_STACK_LINE(5463)
						::zpp_nape::phys::ZPP_Body _g15 = _this->b2 = null();		HX_STACK_VAR(_g15,"_g15");
						HX_STACK_LINE(5463)
						_this->b1 = _g15;
						HX_STACK_LINE(5463)
						_this->active = false;
						HX_STACK_LINE(5463)
						_this->intchange = false;
					}
					HX_STACK_LINE(5463)
					{
						HX_STACK_LINE(5463)
						::zpp_nape::dynamics::ZPP_FluidArbiter o = _this;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(5463)
						o->next = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
						HX_STACK_LINE(5463)
						::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o;
					}
					HX_STACK_LINE(5463)
					_this->pre_dt = -1.0;
				}
				else{
					HX_STACK_LINE(5464)
					::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5464)
					{
						HX_STACK_LINE(5464)
						if ((!(_this->cleared))){
							HX_STACK_LINE(5464)
							{
								HX_STACK_LINE(5464)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = _this->b1->arbiters;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5464)
								{
									HX_STACK_LINE(5464)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(5464)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5464)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5464)
									while((true)){
										HX_STACK_LINE(5464)
										if ((!(((cur != null()))))){
											HX_STACK_LINE(5464)
											break;
										}
										HX_STACK_LINE(5464)
										if (((cur->elt == _this))){
											HX_STACK_LINE(5464)
											{
												HX_STACK_LINE(5464)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5464)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5464)
												if (((pre == null()))){
													HX_STACK_LINE(5464)
													old = _this1->head;
													HX_STACK_LINE(5464)
													ret1 = old->next;
													HX_STACK_LINE(5464)
													_this1->head = ret1;
													HX_STACK_LINE(5464)
													if (((_this1->head == null()))){
														HX_STACK_LINE(5464)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5464)
													old = pre->next;
													HX_STACK_LINE(5464)
													ret1 = old->next;
													HX_STACK_LINE(5464)
													pre->next = ret1;
													HX_STACK_LINE(5464)
													if (((ret1 == null()))){
														HX_STACK_LINE(5464)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5464)
												{
													HX_STACK_LINE(5464)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5464)
													o->elt = null();
													HX_STACK_LINE(5464)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(5464)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5464)
												_this1->modified = true;
												HX_STACK_LINE(5464)
												(_this1->length)--;
												HX_STACK_LINE(5464)
												_this1->pushmod = true;
												HX_STACK_LINE(5464)
												ret1;
											}
											HX_STACK_LINE(5464)
											ret = true;
											HX_STACK_LINE(5464)
											break;
										}
										HX_STACK_LINE(5464)
										pre = cur;
										HX_STACK_LINE(5464)
										cur = cur->next;
									}
									HX_STACK_LINE(5464)
									ret;
								}
							}
							HX_STACK_LINE(5464)
							{
								HX_STACK_LINE(5464)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this1 = _this->b2->arbiters;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5464)
								{
									HX_STACK_LINE(5464)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(5464)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this1->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5464)
									bool ret = false;		HX_STACK_VAR(ret,"ret");
									HX_STACK_LINE(5464)
									while((true)){
										HX_STACK_LINE(5464)
										if ((!(((cur != null()))))){
											HX_STACK_LINE(5464)
											break;
										}
										HX_STACK_LINE(5464)
										if (((cur->elt == _this))){
											HX_STACK_LINE(5464)
											{
												HX_STACK_LINE(5464)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5464)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5464)
												if (((pre == null()))){
													HX_STACK_LINE(5464)
													old = _this1->head;
													HX_STACK_LINE(5464)
													ret1 = old->next;
													HX_STACK_LINE(5464)
													_this1->head = ret1;
													HX_STACK_LINE(5464)
													if (((_this1->head == null()))){
														HX_STACK_LINE(5464)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5464)
													old = pre->next;
													HX_STACK_LINE(5464)
													ret1 = old->next;
													HX_STACK_LINE(5464)
													pre->next = ret1;
													HX_STACK_LINE(5464)
													if (((ret1 == null()))){
														HX_STACK_LINE(5464)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5464)
												{
													HX_STACK_LINE(5464)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5464)
													o->elt = null();
													HX_STACK_LINE(5464)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(5464)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5464)
												_this1->modified = true;
												HX_STACK_LINE(5464)
												(_this1->length)--;
												HX_STACK_LINE(5464)
												_this1->pushmod = true;
												HX_STACK_LINE(5464)
												ret1;
											}
											HX_STACK_LINE(5464)
											ret = true;
											HX_STACK_LINE(5464)
											break;
										}
										HX_STACK_LINE(5464)
										pre = cur;
										HX_STACK_LINE(5464)
										cur = cur->next;
									}
									HX_STACK_LINE(5464)
									ret;
								}
							}
							HX_STACK_LINE(5464)
							if (((_this->pair != null()))){
								HX_STACK_LINE(5464)
								_this->pair->arb = null();
								HX_STACK_LINE(5464)
								_this->pair = null();
							}
						}
						HX_STACK_LINE(5464)
						::zpp_nape::phys::ZPP_Body _g16 = _this->b2 = null();		HX_STACK_VAR(_g16,"_g16");
						HX_STACK_LINE(5464)
						_this->b1 = _g16;
						HX_STACK_LINE(5464)
						_this->active = false;
						HX_STACK_LINE(5464)
						_this->intchange = false;
					}
					HX_STACK_LINE(5464)
					while((true)){
						HX_STACK_LINE(5464)
						if ((!((!(((_this->contacts->next == null()))))))){
							HX_STACK_LINE(5464)
							break;
						}
						HX_STACK_LINE(5464)
						{
							HX_STACK_LINE(5464)
							::zpp_nape::dynamics::ZPP_Contact o;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(5464)
							{
								HX_STACK_LINE(5464)
								::zpp_nape::dynamics::ZPP_Contact _this1 = _this->contacts;		HX_STACK_VAR(_this1,"_this1");
								HX_STACK_LINE(5464)
								::zpp_nape::dynamics::ZPP_Contact ret = _this1->next;		HX_STACK_VAR(ret,"ret");
								HX_STACK_LINE(5464)
								_this1->pop();
								HX_STACK_LINE(5464)
								o = ret;
							}
							HX_STACK_LINE(5464)
							o->arbiter = null();
							HX_STACK_LINE(5464)
							o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
							HX_STACK_LINE(5464)
							::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
						}
						HX_STACK_LINE(5464)
						{
							HX_STACK_LINE(5464)
							::zpp_nape::dynamics::ZPP_IContact _this1 = _this->innards;		HX_STACK_VAR(_this1,"_this1");
							HX_STACK_LINE(5464)
							::zpp_nape::dynamics::ZPP_IContact ret = _this1->next;		HX_STACK_VAR(ret,"ret");
							HX_STACK_LINE(5464)
							_this1->next = ret->next;
							HX_STACK_LINE(5464)
							ret->_inuse = false;
							HX_STACK_LINE(5464)
							if (((_this1->next == null()))){
								HX_STACK_LINE(5464)
								_this1->pushmod = true;
							}
							HX_STACK_LINE(5464)
							_this1->modified = true;
							HX_STACK_LINE(5464)
							(_this1->length)--;
						}
					}
					HX_STACK_LINE(5464)
					{
						HX_STACK_LINE(5464)
						::zpp_nape::dynamics::ZPP_ColArbiter o = _this;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(5464)
						{
							HX_STACK_LINE(5464)
							o->userdef_dyn_fric = false;
							HX_STACK_LINE(5464)
							o->userdef_stat_fric = false;
							HX_STACK_LINE(5464)
							o->userdef_restitution = false;
							HX_STACK_LINE(5464)
							o->userdef_rfric = false;
							HX_STACK_LINE(5464)
							::zpp_nape::shape::ZPP_Edge _g17 = o->__ref_edge2 = null();		HX_STACK_VAR(_g17,"_g17");
							HX_STACK_LINE(5464)
							o->__ref_edge1 = _g17;
						}
						HX_STACK_LINE(5464)
						o->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
						HX_STACK_LINE(5464)
						::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o;
					}
					HX_STACK_LINE(5464)
					_this->pre_dt = -1.0;
				}
			}
			HX_STACK_LINE(5465)
			return true;
		}
		HX_STACK_LINE(5467)
		bool pact = arb->active;		HX_STACK_VAR(pact,"pact");
		HX_STACK_LINE(5468)
		bool _g18 = arb->presentable = (arb->up_stamp == this->stamp);		HX_STACK_VAR(_g18,"_g18");
		HX_STACK_LINE(5468)
		arb->active = _g18;
		HX_STACK_LINE(5469)
		if (((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))){
			HX_STACK_LINE(5470)
			if (((bool(arb->active) && bool((arb->type != ::zpp_nape::dynamics::ZPP_Arbiter_obj::SENSOR))))){
				HX_STACK_LINE(5471)
				if (((arb->colarb != null()))){
					struct _Function_4_1{
						inline static bool Block( ::zpp_nape::dynamics::ZPP_Arbiter &arb,Float &dt){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5472,0x2b65ed03)
							{
								HX_STACK_LINE(5472)
								::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(5472)
								if ((_this->invalidated)){
									HX_STACK_LINE(5472)
									_this->invalidated = false;
									HX_STACK_LINE(5472)
									{
										HX_STACK_LINE(5472)
										if ((!(_this->userdef_restitution))){
											HX_STACK_LINE(5472)
											if (((bool((_this->s1->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY)) || bool((_this->s2->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY))))){
												HX_STACK_LINE(5472)
												_this->restitution = (int)0;
											}
											else{
												HX_STACK_LINE(5472)
												if (((bool((_this->s1->material->elasticity >= ::Math_obj::POSITIVE_INFINITY)) || bool((_this->s2->material->elasticity >= ::Math_obj::POSITIVE_INFINITY))))){
													HX_STACK_LINE(5472)
													_this->restitution = (int)1;
												}
												else{
													HX_STACK_LINE(5472)
													_this->restitution = (Float(((_this->s1->material->elasticity + _this->s2->material->elasticity))) / Float((int)2));
												}
											}
											HX_STACK_LINE(5472)
											if (((_this->restitution < (int)0))){
												HX_STACK_LINE(5472)
												_this->restitution = (int)0;
											}
											HX_STACK_LINE(5472)
											if (((_this->restitution > (int)1))){
												HX_STACK_LINE(5472)
												_this->restitution = (int)1;
											}
										}
										HX_STACK_LINE(5472)
										if ((!(_this->userdef_dyn_fric))){
											HX_STACK_LINE(5472)
											Float _g19 = ::Math_obj::sqrt((_this->s1->material->dynamicFriction * _this->s2->material->dynamicFriction));		HX_STACK_VAR(_g19,"_g19");
											HX_STACK_LINE(5472)
											_this->dyn_fric = _g19;
										}
										HX_STACK_LINE(5472)
										if ((!(_this->userdef_stat_fric))){
											HX_STACK_LINE(5472)
											Float _g20 = ::Math_obj::sqrt((_this->s1->material->staticFriction * _this->s2->material->staticFriction));		HX_STACK_VAR(_g20,"_g20");
											HX_STACK_LINE(5472)
											_this->stat_fric = _g20;
										}
										HX_STACK_LINE(5472)
										if ((!(_this->userdef_rfric))){
											HX_STACK_LINE(5472)
											Float _g21 = ::Math_obj::sqrt((_this->s1->material->rollingFriction * _this->s2->material->rollingFriction));		HX_STACK_VAR(_g21,"_g21");
											HX_STACK_LINE(5472)
											_this->rfric = _g21;
										}
									}
								}
								HX_STACK_LINE(5472)
								if (((_this->pre_dt == -1.0))){
									HX_STACK_LINE(5472)
									_this->pre_dt = dt;
								}
								HX_STACK_LINE(5472)
								Float dtratio = (Float(dt) / Float(_this->pre_dt));		HX_STACK_VAR(dtratio,"dtratio");
								HX_STACK_LINE(5472)
								_this->pre_dt = dt;
								HX_STACK_LINE(5472)
								Float mass_sum = (_this->b1->smass + _this->b2->smass);		HX_STACK_VAR(mass_sum,"mass_sum");
								HX_STACK_LINE(5472)
								_this->hc2 = false;
								HX_STACK_LINE(5472)
								bool fst = true;		HX_STACK_VAR(fst,"fst");
								HX_STACK_LINE(5472)
								bool statType = (bool(!(((_this->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)))) || bool(!(((_this->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)))));		HX_STACK_VAR(statType,"statType");
								HX_STACK_LINE(5472)
								Float bias;		HX_STACK_VAR(bias,"bias");
								HX_STACK_LINE(5472)
								if ((statType)){
									HX_STACK_LINE(5472)
									if ((_this->continuous)){
										HX_STACK_LINE(5472)
										bias = ::nape::Config_obj::contactContinuousStaticBiasCoef;
									}
									else{
										HX_STACK_LINE(5472)
										bias = ::nape::Config_obj::contactStaticBiasCoef;
									}
								}
								else{
									HX_STACK_LINE(5472)
									if ((_this->continuous)){
										HX_STACK_LINE(5472)
										bias = ::nape::Config_obj::contactContinuousBiasCoef;
									}
									else{
										HX_STACK_LINE(5472)
										bias = ::nape::Config_obj::contactBiasCoef;
									}
								}
								HX_STACK_LINE(5472)
								_this->biasCoef = bias;
								HX_STACK_LINE(5472)
								_this->continuous = false;
								HX_STACK_LINE(5472)
								::zpp_nape::dynamics::ZPP_Contact pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5472)
								::zpp_nape::dynamics::ZPP_IContact prei = null();		HX_STACK_VAR(prei,"prei");
								HX_STACK_LINE(5472)
								::zpp_nape::dynamics::ZPP_IContact cx_itei = _this->innards->next;		HX_STACK_VAR(cx_itei,"cx_itei");
								HX_STACK_LINE(5472)
								{
									HX_STACK_LINE(5472)
									::zpp_nape::dynamics::ZPP_Contact cx_ite = _this->contacts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(5472)
									while((true)){
										HX_STACK_LINE(5472)
										if ((!(((cx_ite != null()))))){
											HX_STACK_LINE(5472)
											break;
										}
										HX_STACK_LINE(5472)
										::zpp_nape::dynamics::ZPP_Contact c = cx_ite;		HX_STACK_VAR(c,"c");
										HX_STACK_LINE(5472)
										{
											HX_STACK_LINE(5472)
											if ((((c->stamp + ::nape::Config_obj::arbiterExpirationDelay) < _this->stamp))){
												HX_STACK_LINE(5472)
												::zpp_nape::dynamics::ZPP_Contact _g22;		HX_STACK_VAR(_g22,"_g22");
												HX_STACK_LINE(5472)
												{
													HX_STACK_LINE(5472)
													::zpp_nape::dynamics::ZPP_Contact _this1 = _this->contacts;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(5472)
													::zpp_nape::dynamics::ZPP_Contact old;		HX_STACK_VAR(old,"old");
													HX_STACK_LINE(5472)
													::zpp_nape::dynamics::ZPP_Contact ret;		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(5472)
													if (((pre == null()))){
														HX_STACK_LINE(5472)
														old = _this1->next;
														HX_STACK_LINE(5472)
														ret = old->next;
														HX_STACK_LINE(5472)
														_this1->next = ret;
														HX_STACK_LINE(5472)
														if (((_this1->next == null()))){
															HX_STACK_LINE(5472)
															_this1->pushmod = true;
														}
													}
													else{
														HX_STACK_LINE(5472)
														old = pre->next;
														HX_STACK_LINE(5472)
														ret = old->next;
														HX_STACK_LINE(5472)
														pre->next = ret;
														HX_STACK_LINE(5472)
														if (((ret == null()))){
															HX_STACK_LINE(5472)
															_this1->pushmod = true;
														}
													}
													HX_STACK_LINE(5472)
													old->_inuse = false;
													HX_STACK_LINE(5472)
													_this1->modified = true;
													HX_STACK_LINE(5472)
													(_this1->length)--;
													HX_STACK_LINE(5472)
													_this1->pushmod = true;
													HX_STACK_LINE(5472)
													_g22 = ret;
												}
												HX_STACK_LINE(5472)
												cx_ite = _g22;
												HX_STACK_LINE(5472)
												::zpp_nape::dynamics::ZPP_IContact _g23;		HX_STACK_VAR(_g23,"_g23");
												HX_STACK_LINE(5472)
												{
													HX_STACK_LINE(5472)
													::zpp_nape::dynamics::ZPP_IContact _this1 = _this->innards;		HX_STACK_VAR(_this1,"_this1");
													HX_STACK_LINE(5472)
													::zpp_nape::dynamics::ZPP_IContact old;		HX_STACK_VAR(old,"old");
													HX_STACK_LINE(5472)
													::zpp_nape::dynamics::ZPP_IContact ret;		HX_STACK_VAR(ret,"ret");
													HX_STACK_LINE(5472)
													if (((prei == null()))){
														HX_STACK_LINE(5472)
														old = _this1->next;
														HX_STACK_LINE(5472)
														ret = old->next;
														HX_STACK_LINE(5472)
														_this1->next = ret;
														HX_STACK_LINE(5472)
														if (((_this1->next == null()))){
															HX_STACK_LINE(5472)
															_this1->pushmod = true;
														}
													}
													else{
														HX_STACK_LINE(5472)
														old = prei->next;
														HX_STACK_LINE(5472)
														ret = old->next;
														HX_STACK_LINE(5472)
														prei->next = ret;
														HX_STACK_LINE(5472)
														if (((ret == null()))){
															HX_STACK_LINE(5472)
															_this1->pushmod = true;
														}
													}
													HX_STACK_LINE(5472)
													old->_inuse = false;
													HX_STACK_LINE(5472)
													_this1->modified = true;
													HX_STACK_LINE(5472)
													(_this1->length)--;
													HX_STACK_LINE(5472)
													_this1->pushmod = true;
													HX_STACK_LINE(5472)
													_g23 = ret;
												}
												HX_STACK_LINE(5472)
												cx_itei = _g23;
												HX_STACK_LINE(5472)
												{
													HX_STACK_LINE(5472)
													::zpp_nape::dynamics::ZPP_Contact o = c;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(5472)
													o->arbiter = null();
													HX_STACK_LINE(5472)
													o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
													HX_STACK_LINE(5472)
													::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
												}
												HX_STACK_LINE(5472)
												continue;
											}
											HX_STACK_LINE(5472)
											::zpp_nape::dynamics::ZPP_IContact ci = c->inner;		HX_STACK_VAR(ci,"ci");
											HX_STACK_LINE(5472)
											bool pact1 = c->active;		HX_STACK_VAR(pact1,"pact1");
											HX_STACK_LINE(5472)
											c->active = (c->stamp == _this->stamp);
											HX_STACK_LINE(5472)
											if ((c->active)){
												HX_STACK_LINE(5472)
												if ((fst)){
													HX_STACK_LINE(5472)
													fst = false;
													HX_STACK_LINE(5472)
													_this->c1 = ci;
													HX_STACK_LINE(5472)
													_this->oc1 = c;
												}
												else{
													HX_STACK_LINE(5472)
													_this->hc2 = true;
													HX_STACK_LINE(5472)
													_this->c2 = ci;
													HX_STACK_LINE(5472)
													_this->oc2 = c;
												}
												HX_STACK_LINE(5472)
												{
													HX_STACK_LINE(5472)
													ci->r2x = (c->px - _this->b2->posx);
													HX_STACK_LINE(5472)
													ci->r2y = (c->py - _this->b2->posy);
												}
												HX_STACK_LINE(5472)
												{
													HX_STACK_LINE(5472)
													ci->r1x = (c->px - _this->b1->posx);
													HX_STACK_LINE(5472)
													ci->r1y = (c->py - _this->b1->posy);
												}
												HX_STACK_LINE(5472)
												Float kt;		HX_STACK_VAR(kt,"kt");
												struct _Function_9_1{
													inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter _this,::zpp_nape::dynamics::ZPP_IContact &ci){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5472,0x2b65ed03)
														{
															HX_STACK_LINE(5472)
															Float x = ((ci->r2x * _this->nx) + (ci->r2y * _this->ny));		HX_STACK_VAR(x,"x");
															HX_STACK_LINE(5472)
															return (x * x);
														}
														return null();
													}
												};
												HX_STACK_LINE(5472)
												kt = (mass_sum + (_this->b2->sinertia * _Function_9_1::Block(_this,ci)));
												struct _Function_9_2{
													inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter _this,::zpp_nape::dynamics::ZPP_IContact &ci){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5472,0x2b65ed03)
														{
															HX_STACK_LINE(5472)
															Float x = ((ci->r1x * _this->nx) + (ci->r1y * _this->ny));		HX_STACK_VAR(x,"x");
															HX_STACK_LINE(5472)
															return (x * x);
														}
														return null();
													}
												};
												HX_STACK_LINE(5472)
												hx::AddEq(kt,(_this->b1->sinertia * _Function_9_2::Block(_this,ci)));
												HX_STACK_LINE(5472)
												if (((kt < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon)))){
													HX_STACK_LINE(5472)
													ci->tMass = (int)0;
												}
												else{
													HX_STACK_LINE(5472)
													ci->tMass = (Float(1.0) / Float(kt));
												}
												HX_STACK_LINE(5472)
												Float nt;		HX_STACK_VAR(nt,"nt");
												struct _Function_9_3{
													inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter _this,::zpp_nape::dynamics::ZPP_IContact &ci){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5472,0x2b65ed03)
														{
															HX_STACK_LINE(5472)
															Float x = ((_this->ny * ci->r2x) - (_this->nx * ci->r2y));		HX_STACK_VAR(x,"x");
															HX_STACK_LINE(5472)
															return (x * x);
														}
														return null();
													}
												};
												HX_STACK_LINE(5472)
												nt = (mass_sum + (_this->b2->sinertia * _Function_9_3::Block(_this,ci)));
												struct _Function_9_4{
													inline static Float Block( ::zpp_nape::dynamics::ZPP_ColArbiter _this,::zpp_nape::dynamics::ZPP_IContact &ci){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5472,0x2b65ed03)
														{
															HX_STACK_LINE(5472)
															Float x = ((_this->ny * ci->r1x) - (_this->nx * ci->r1y));		HX_STACK_VAR(x,"x");
															HX_STACK_LINE(5472)
															return (x * x);
														}
														return null();
													}
												};
												HX_STACK_LINE(5472)
												hx::AddEq(nt,(_this->b1->sinertia * _Function_9_4::Block(_this,ci)));
												HX_STACK_LINE(5472)
												if (((nt < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon)))){
													HX_STACK_LINE(5472)
													ci->nMass = (int)0;
												}
												else{
													HX_STACK_LINE(5472)
													ci->nMass = (Float(1.0) / Float(nt));
												}
												HX_STACK_LINE(5472)
												Float vrx = 0.0;		HX_STACK_VAR(vrx,"vrx");
												HX_STACK_LINE(5472)
												Float vry = 0.0;		HX_STACK_VAR(vry,"vry");
												HX_STACK_LINE(5472)
												{
													HX_STACK_LINE(5472)
													Float ang = (_this->b2->angvel + _this->b2->kinangvel);		HX_STACK_VAR(ang,"ang");
													HX_STACK_LINE(5472)
													vrx = ((_this->b2->velx + _this->b2->kinvelx) - (ci->r2y * ang));
													HX_STACK_LINE(5472)
													vry = ((_this->b2->vely + _this->b2->kinvely) + (ci->r2x * ang));
													HX_STACK_LINE(5472)
													ang = (_this->b1->angvel + _this->b1->kinangvel);
													HX_STACK_LINE(5472)
													hx::SubEq(vrx,((_this->b1->velx + _this->b1->kinvelx) - (ci->r1y * ang)));
													HX_STACK_LINE(5472)
													hx::SubEq(vry,((_this->b1->vely + _this->b1->kinvely) + (ci->r1x * ang)));
												}
												HX_STACK_LINE(5472)
												Float vdot = ((_this->nx * vrx) + (_this->ny * vry));		HX_STACK_VAR(vdot,"vdot");
												HX_STACK_LINE(5472)
												c->elasticity = _this->restitution;
												HX_STACK_LINE(5472)
												ci->bounce = (vdot * c->elasticity);
												HX_STACK_LINE(5472)
												if (((ci->bounce > -(::nape::Config_obj::elasticThreshold)))){
													HX_STACK_LINE(5472)
													ci->bounce = (int)0;
												}
												HX_STACK_LINE(5472)
												vdot = ((vry * _this->nx) - (vrx * _this->ny));
												HX_STACK_LINE(5472)
												Float thr = ::nape::Config_obj::staticFrictionThreshold;		HX_STACK_VAR(thr,"thr");
												HX_STACK_LINE(5472)
												if ((((vdot * vdot) > (thr * thr)))){
													HX_STACK_LINE(5472)
													ci->friction = _this->dyn_fric;
												}
												else{
													HX_STACK_LINE(5472)
													ci->friction = _this->stat_fric;
												}
												HX_STACK_LINE(5472)
												hx::MultEq(ci->jnAcc,dtratio);
												HX_STACK_LINE(5472)
												hx::MultEq(ci->jtAcc,dtratio);
											}
											HX_STACK_LINE(5472)
											if (((pact1 != c->active))){
												HX_STACK_LINE(5472)
												_this->contacts->modified = true;
											}
											HX_STACK_LINE(5472)
											pre = cx_ite;
											HX_STACK_LINE(5472)
											prei = cx_itei;
											HX_STACK_LINE(5472)
											cx_itei = cx_itei->next;
										}
										HX_STACK_LINE(5472)
										cx_ite = cx_ite->next;
									}
								}
								HX_STACK_LINE(5472)
								if ((_this->hc2)){
									HX_STACK_LINE(5472)
									_this->hpc2 = true;
									HX_STACK_LINE(5472)
									if ((_this->oc1->posOnly)){
										HX_STACK_LINE(5472)
										::zpp_nape::dynamics::ZPP_IContact tmp = _this->c1;		HX_STACK_VAR(tmp,"tmp");
										HX_STACK_LINE(5472)
										_this->c1 = _this->c2;
										HX_STACK_LINE(5472)
										_this->c2 = tmp;
										HX_STACK_LINE(5472)
										::zpp_nape::dynamics::ZPP_Contact tmp2 = _this->oc1;		HX_STACK_VAR(tmp2,"tmp2");
										HX_STACK_LINE(5472)
										_this->oc1 = _this->oc2;
										HX_STACK_LINE(5472)
										_this->oc2 = tmp2;
										HX_STACK_LINE(5472)
										_this->hc2 = false;
									}
									else{
										HX_STACK_LINE(5472)
										if ((_this->oc2->posOnly)){
											HX_STACK_LINE(5472)
											_this->hc2 = false;
										}
									}
									HX_STACK_LINE(5472)
									if ((_this->oc1->posOnly)){
										HX_STACK_LINE(5472)
										fst = true;
									}
								}
								else{
									HX_STACK_LINE(5472)
									_this->hpc2 = false;
								}
								HX_STACK_LINE(5472)
								hx::MultEq(_this->jrAcc,dtratio);
								HX_STACK_LINE(5472)
								if ((!(fst))){
									HX_STACK_LINE(5472)
									_this->rn1a = ((_this->ny * _this->c1->r1x) - (_this->nx * _this->c1->r1y));
									HX_STACK_LINE(5472)
									_this->rt1a = ((_this->c1->r1x * _this->nx) + (_this->c1->r1y * _this->ny));
									HX_STACK_LINE(5472)
									_this->rn1b = ((_this->ny * _this->c1->r2x) - (_this->nx * _this->c1->r2y));
									HX_STACK_LINE(5472)
									_this->rt1b = ((_this->c1->r2x * _this->nx) + (_this->c1->r2y * _this->ny));
									HX_STACK_LINE(5472)
									_this->k1x = ((_this->b2->kinvelx - (_this->c1->r2y * _this->b2->kinangvel)) - ((_this->b1->kinvelx - (_this->c1->r1y * _this->b1->kinangvel))));
									HX_STACK_LINE(5472)
									_this->k1y = ((_this->b2->kinvely + (_this->c1->r2x * _this->b2->kinangvel)) - ((_this->b1->kinvely + (_this->c1->r1x * _this->b1->kinangvel))));
								}
								HX_STACK_LINE(5472)
								if ((_this->hc2)){
									HX_STACK_LINE(5472)
									_this->rn2a = ((_this->ny * _this->c2->r1x) - (_this->nx * _this->c2->r1y));
									HX_STACK_LINE(5472)
									_this->rt2a = ((_this->c2->r1x * _this->nx) + (_this->c2->r1y * _this->ny));
									HX_STACK_LINE(5472)
									_this->rn2b = ((_this->ny * _this->c2->r2x) - (_this->nx * _this->c2->r2y));
									HX_STACK_LINE(5472)
									_this->rt2b = ((_this->c2->r2x * _this->nx) + (_this->c2->r2y * _this->ny));
									HX_STACK_LINE(5472)
									_this->k2x = ((_this->b2->kinvelx - (_this->c2->r2y * _this->b2->kinangvel)) - ((_this->b1->kinvelx - (_this->c2->r1y * _this->b1->kinangvel))));
									HX_STACK_LINE(5472)
									_this->k2y = ((_this->b2->kinvely + (_this->c2->r2x * _this->b2->kinangvel)) - ((_this->b1->kinvely + (_this->c2->r1x * _this->b1->kinangvel))));
									HX_STACK_LINE(5472)
									{
										HX_STACK_LINE(5472)
										_this->kMassa = ((mass_sum + ((_this->b1->sinertia * _this->rn1a) * _this->rn1a)) + ((_this->b2->sinertia * _this->rn1b) * _this->rn1b));
										HX_STACK_LINE(5472)
										_this->kMassb = ((mass_sum + ((_this->b1->sinertia * _this->rn1a) * _this->rn2a)) + ((_this->b2->sinertia * _this->rn1b) * _this->rn2b));
										HX_STACK_LINE(5472)
										_this->kMassc = ((mass_sum + ((_this->b1->sinertia * _this->rn2a) * _this->rn2a)) + ((_this->b2->sinertia * _this->rn2b) * _this->rn2b));
									}
									HX_STACK_LINE(5472)
									Float norm = (((_this->kMassa * _this->kMassa) + (((int)2 * _this->kMassb) * _this->kMassb)) + (_this->kMassc * _this->kMassc));		HX_STACK_VAR(norm,"norm");
									HX_STACK_LINE(5472)
									if (((norm < (::nape::Config_obj::illConditionedThreshold * (((_this->kMassa * _this->kMassc) - (_this->kMassb * _this->kMassb))))))){
										HX_STACK_LINE(5472)
										{
											HX_STACK_LINE(5472)
											_this->Ka = _this->kMassa;
											HX_STACK_LINE(5472)
											_this->Kb = _this->kMassb;
											HX_STACK_LINE(5472)
											_this->Kc = _this->kMassc;
										}
										HX_STACK_LINE(5472)
										{
											HX_STACK_LINE(5472)
											Float det = ((_this->kMassa * _this->kMassc) - (_this->kMassb * _this->kMassb));		HX_STACK_VAR(det,"det");
											HX_STACK_LINE(5472)
											if (((det != det))){
												HX_STACK_LINE(5472)
												Float _g24 = _this->kMassc = (int)0;		HX_STACK_VAR(_g24,"_g24");
												HX_STACK_LINE(5472)
												Float _g25 = _this->kMassb = _g24;		HX_STACK_VAR(_g25,"_g25");
												HX_STACK_LINE(5472)
												_this->kMassa = _g25;
												HX_STACK_LINE(5472)
												(int)3;
											}
											else{
												HX_STACK_LINE(5472)
												if (((det == (int)0))){
													HX_STACK_LINE(5472)
													int flag = (int)0;		HX_STACK_VAR(flag,"flag");
													HX_STACK_LINE(5472)
													if (((_this->kMassa != (int)0))){
														HX_STACK_LINE(5472)
														_this->kMassa = (Float((int)1) / Float(_this->kMassa));
													}
													else{
														HX_STACK_LINE(5472)
														_this->kMassa = (int)0;
														HX_STACK_LINE(5472)
														hx::OrEq(flag,(int)1);
													}
													HX_STACK_LINE(5472)
													if (((_this->kMassc != (int)0))){
														HX_STACK_LINE(5472)
														_this->kMassc = (Float((int)1) / Float(_this->kMassc));
													}
													else{
														HX_STACK_LINE(5472)
														_this->kMassc = (int)0;
														HX_STACK_LINE(5472)
														hx::OrEq(flag,(int)2);
													}
													HX_STACK_LINE(5472)
													_this->kMassb = (int)0;
													HX_STACK_LINE(5472)
													flag;
												}
												else{
													HX_STACK_LINE(5472)
													det = (Float((int)1) / Float(det));
													HX_STACK_LINE(5472)
													Float t = (_this->kMassc * det);		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5472)
													_this->kMassc = (_this->kMassa * det);
													HX_STACK_LINE(5472)
													_this->kMassa = t;
													HX_STACK_LINE(5472)
													hx::MultEq(_this->kMassb,-(det));
													HX_STACK_LINE(5472)
													(int)0;
												}
											}
										}
									}
									else{
										HX_STACK_LINE(5472)
										_this->hc2 = false;
										HX_STACK_LINE(5472)
										if (((_this->oc2->dist < _this->oc1->dist))){
											HX_STACK_LINE(5472)
											::zpp_nape::dynamics::ZPP_IContact t = _this->c1;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5472)
											_this->c1 = _this->c2;
											HX_STACK_LINE(5472)
											_this->c2 = t;
										}
										HX_STACK_LINE(5472)
										_this->oc2->active = false;
										HX_STACK_LINE(5472)
										_this->contacts->modified = true;
									}
								}
								HX_STACK_LINE(5472)
								{
									HX_STACK_LINE(5472)
									_this->surfacex = _this->b2->svelx;
									HX_STACK_LINE(5472)
									_this->surfacey = _this->b2->svely;
									HX_STACK_LINE(5472)
									{
									}
								}
								HX_STACK_LINE(5472)
								{
									HX_STACK_LINE(5472)
									Float t = 1.0;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5472)
									hx::AddEq(_this->surfacex,(_this->b1->svelx * t));
									HX_STACK_LINE(5472)
									hx::AddEq(_this->surfacey,(_this->b1->svely * t));
								}
								HX_STACK_LINE(5472)
								{
									HX_STACK_LINE(5472)
									_this->surfacex = -(_this->surfacex);
									HX_STACK_LINE(5472)
									_this->surfacey = -(_this->surfacey);
								}
								HX_STACK_LINE(5472)
								_this->rMass = (_this->b1->sinertia + _this->b2->sinertia);
								HX_STACK_LINE(5472)
								if (((_this->rMass != (int)0))){
									HX_STACK_LINE(5472)
									_this->rMass = (Float((int)1) / Float(_this->rMass));
								}
								HX_STACK_LINE(5472)
								return fst;
							}
							return null();
						}
					};
					HX_STACK_LINE(5472)
					if ((_Function_4_1::Block(arb,dt))){
						HX_STACK_LINE(5473)
						arb->active = false;
					}
				}
				else{
					HX_STACK_LINE(5476)
					::zpp_nape::dynamics::ZPP_FluidArbiter _this = arb->fluidarb;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5476)
					if (((_this->pre_dt == -1.0))){
						HX_STACK_LINE(5476)
						_this->pre_dt = dt;
					}
					HX_STACK_LINE(5476)
					Float dtratio = (Float(dt) / Float(_this->pre_dt));		HX_STACK_VAR(dtratio,"dtratio");
					HX_STACK_LINE(5476)
					_this->pre_dt = dt;
					HX_STACK_LINE(5476)
					{
						HX_STACK_LINE(5476)
						_this->r1x = (_this->centroidx - _this->b1->posx);
						HX_STACK_LINE(5476)
						_this->r1y = (_this->centroidy - _this->b1->posy);
					}
					HX_STACK_LINE(5476)
					{
						HX_STACK_LINE(5476)
						_this->r2x = (_this->centroidx - _this->b2->posx);
						HX_STACK_LINE(5476)
						_this->r2y = (_this->centroidy - _this->b2->posy);
					}
					HX_STACK_LINE(5476)
					Float g1x = 0.0;		HX_STACK_VAR(g1x,"g1x");
					HX_STACK_LINE(5476)
					Float g1y = 0.0;		HX_STACK_VAR(g1y,"g1y");
					HX_STACK_LINE(5476)
					if (((bool(_this->ws1->fluidEnabled) && bool((_this->ws1->fluidProperties->wrap_gravity != null()))))){
						HX_STACK_LINE(5476)
						g1x = _this->ws1->fluidProperties->gravityx;
						HX_STACK_LINE(5476)
						g1y = _this->ws1->fluidProperties->gravityy;
						HX_STACK_LINE(5476)
						{
						}
					}
					else{
						HX_STACK_LINE(5476)
						g1x = this->gravityx;
						HX_STACK_LINE(5476)
						g1y = this->gravityy;
						HX_STACK_LINE(5476)
						{
						}
					}
					HX_STACK_LINE(5476)
					Float g2x = 0.0;		HX_STACK_VAR(g2x,"g2x");
					HX_STACK_LINE(5476)
					Float g2y = 0.0;		HX_STACK_VAR(g2y,"g2y");
					HX_STACK_LINE(5476)
					if (((bool(_this->ws2->fluidEnabled) && bool((_this->ws2->fluidProperties->wrap_gravity != null()))))){
						HX_STACK_LINE(5476)
						g2x = _this->ws2->fluidProperties->gravityx;
						HX_STACK_LINE(5476)
						g2y = _this->ws2->fluidProperties->gravityy;
						HX_STACK_LINE(5476)
						{
						}
					}
					else{
						HX_STACK_LINE(5476)
						g2x = this->gravityx;
						HX_STACK_LINE(5476)
						g2y = this->gravityy;
						HX_STACK_LINE(5476)
						{
						}
					}
					HX_STACK_LINE(5476)
					Float buoyx = (int)0;		HX_STACK_VAR(buoyx,"buoyx");
					HX_STACK_LINE(5476)
					Float buoyy = (int)0;		HX_STACK_VAR(buoyy,"buoyy");
					HX_STACK_LINE(5476)
					if (((bool(_this->ws1->fluidEnabled) && bool(_this->ws2->fluidEnabled)))){
						HX_STACK_LINE(5476)
						Float mass1 = (_this->overlap * _this->ws1->fluidProperties->density);		HX_STACK_VAR(mass1,"mass1");
						HX_STACK_LINE(5476)
						Float mass2 = (_this->overlap * _this->ws2->fluidProperties->density);		HX_STACK_VAR(mass2,"mass2");
						HX_STACK_LINE(5476)
						if (((mass1 > mass2))){
							HX_STACK_LINE(5476)
							Float t = (mass1 + mass2);		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5476)
							hx::SubEq(buoyx,(g1x * t));
							HX_STACK_LINE(5476)
							hx::SubEq(buoyy,(g1y * t));
						}
						else{
							HX_STACK_LINE(5476)
							if (((mass1 < mass2))){
								HX_STACK_LINE(5476)
								Float t = (mass1 + mass2);		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5476)
								hx::AddEq(buoyx,(g2x * t));
								HX_STACK_LINE(5476)
								hx::AddEq(buoyy,(g2y * t));
							}
							else{
								HX_STACK_LINE(5476)
								Float gx = 0.0;		HX_STACK_VAR(gx,"gx");
								HX_STACK_LINE(5476)
								Float gy = 0.0;		HX_STACK_VAR(gy,"gy");
								HX_STACK_LINE(5476)
								{
									HX_STACK_LINE(5476)
									gx = (g1x + g2x);
									HX_STACK_LINE(5476)
									gy = (g1y + g2y);
								}
								HX_STACK_LINE(5476)
								{
									HX_STACK_LINE(5476)
									Float t = 0.5;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5476)
									hx::MultEq(gx,t);
									HX_STACK_LINE(5476)
									hx::MultEq(gy,t);
								}
								HX_STACK_LINE(5476)
								if (((((_this->ws1->worldCOMx * gx) + (_this->ws1->worldCOMy * gy)) > ((_this->ws2->worldCOMx * gx) + (_this->ws2->worldCOMy * gy))))){
									HX_STACK_LINE(5476)
									Float t = (mass1 + mass2);		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5476)
									hx::SubEq(buoyx,(gx * t));
									HX_STACK_LINE(5476)
									hx::SubEq(buoyy,(gy * t));
								}
								else{
									HX_STACK_LINE(5476)
									Float t = (mass1 + mass2);		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5476)
									hx::AddEq(buoyx,(gx * t));
									HX_STACK_LINE(5476)
									hx::AddEq(buoyy,(gy * t));
								}
							}
						}
					}
					else{
						HX_STACK_LINE(5476)
						if ((_this->ws1->fluidEnabled)){
							HX_STACK_LINE(5476)
							Float mass = (_this->overlap * _this->ws1->fluidProperties->density);		HX_STACK_VAR(mass,"mass");
							HX_STACK_LINE(5476)
							{
								HX_STACK_LINE(5476)
								Float t = mass;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5476)
								hx::SubEq(buoyx,(g1x * t));
								HX_STACK_LINE(5476)
								hx::SubEq(buoyy,(g1y * t));
							}
						}
						else{
							HX_STACK_LINE(5476)
							if ((_this->ws2->fluidEnabled)){
								HX_STACK_LINE(5476)
								Float mass = (_this->overlap * _this->ws2->fluidProperties->density);		HX_STACK_VAR(mass,"mass");
								HX_STACK_LINE(5476)
								{
									HX_STACK_LINE(5476)
									Float t = mass;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5476)
									hx::AddEq(buoyx,(g2x * t));
									HX_STACK_LINE(5476)
									hx::AddEq(buoyy,(g2y * t));
								}
							}
						}
					}
					HX_STACK_LINE(5476)
					{
						HX_STACK_LINE(5476)
						Float t = dt;		HX_STACK_VAR(t,"t");
						HX_STACK_LINE(5476)
						hx::MultEq(buoyx,t);
						HX_STACK_LINE(5476)
						hx::MultEq(buoyy,t);
					}
					HX_STACK_LINE(5476)
					{
						HX_STACK_LINE(5476)
						_this->buoyx = buoyx;
						HX_STACK_LINE(5476)
						_this->buoyy = buoyy;
						HX_STACK_LINE(5476)
						{
						}
					}
					HX_STACK_LINE(5476)
					if (((_this->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
						HX_STACK_LINE(5476)
						{
							HX_STACK_LINE(5476)
							Float t = _this->b1->imass;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5476)
							hx::SubEq(_this->b1->velx,(buoyx * t));
							HX_STACK_LINE(5476)
							hx::SubEq(_this->b1->vely,(buoyy * t));
						}
						HX_STACK_LINE(5476)
						hx::SubEq(_this->b1->angvel,((((buoyy * _this->r1x) - (buoyx * _this->r1y))) * _this->b1->iinertia));
					}
					HX_STACK_LINE(5476)
					if (((_this->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
						HX_STACK_LINE(5476)
						{
							HX_STACK_LINE(5476)
							Float t = _this->b2->imass;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5476)
							hx::AddEq(_this->b2->velx,(buoyx * t));
							HX_STACK_LINE(5476)
							hx::AddEq(_this->b2->vely,(buoyy * t));
						}
						HX_STACK_LINE(5476)
						hx::AddEq(_this->b2->angvel,((((buoyy * _this->r2x) - (buoyx * _this->r2y))) * _this->b2->iinertia));
					}
					HX_STACK_LINE(5476)
					if (((bool(((bool(!(_this->ws1->fluidEnabled)) || bool((_this->ws1->fluidProperties->viscosity == (int)0))))) && bool(((bool(!(_this->ws2->fluidEnabled)) || bool((_this->ws2->fluidProperties->viscosity == (int)0)))))))){
						HX_STACK_LINE(5476)
						_this->nodrag = true;
						HX_STACK_LINE(5476)
						{
							HX_STACK_LINE(5476)
							_this->dampx = (int)0;
							HX_STACK_LINE(5476)
							_this->dampy = (int)0;
							HX_STACK_LINE(5476)
							{
							}
						}
						HX_STACK_LINE(5476)
						_this->adamp = (int)0;
					}
					else{
						HX_STACK_LINE(5476)
						_this->nodrag = false;
						HX_STACK_LINE(5476)
						Float tViscosity = 0.0;		HX_STACK_VAR(tViscosity,"tViscosity");
						HX_STACK_LINE(5476)
						if ((_this->ws1->fluidEnabled)){
							HX_STACK_LINE(5476)
							_this->ws2->validate_angDrag();
							HX_STACK_LINE(5476)
							hx::AddEq(tViscosity,(Float(((_this->ws1->fluidProperties->viscosity * _this->ws2->angDrag) * _this->overlap)) / Float(_this->ws2->area)));
						}
						HX_STACK_LINE(5476)
						if ((_this->ws2->fluidEnabled)){
							HX_STACK_LINE(5476)
							_this->ws1->validate_angDrag();
							HX_STACK_LINE(5476)
							hx::AddEq(tViscosity,(Float(((_this->ws2->fluidProperties->viscosity * _this->ws1->angDrag) * _this->overlap)) / Float(_this->ws1->area)));
						}
						HX_STACK_LINE(5476)
						if (((tViscosity != (int)0))){
							HX_STACK_LINE(5476)
							Float iSum = (_this->b1->sinertia + _this->b2->sinertia);		HX_STACK_VAR(iSum,"iSum");
							HX_STACK_LINE(5476)
							if (((iSum != (int)0))){
								HX_STACK_LINE(5476)
								_this->wMass = (Float((int)1) / Float(iSum));
							}
							else{
								HX_STACK_LINE(5476)
								_this->wMass = 0.0;
							}
							HX_STACK_LINE(5476)
							Float biasCoef;		HX_STACK_VAR(biasCoef,"biasCoef");
							HX_STACK_LINE(5476)
							hx::MultEq(tViscosity,0.0004);
							HX_STACK_LINE(5476)
							Float _g26;		HX_STACK_VAR(_g26,"_g26");
							HX_STACK_LINE(5476)
							{
								HX_STACK_LINE(5476)
								Float omega = (((int)2 * ::Math_obj::PI) * tViscosity);		HX_STACK_VAR(omega,"omega");
								HX_STACK_LINE(5476)
								_this->agamma = (Float((int)1) / Float((((dt * omega) * (((int)2 + (omega * dt)))))));
								HX_STACK_LINE(5476)
								Float ig = (Float((int)1) / Float((((int)1 + _this->agamma))));		HX_STACK_VAR(ig,"ig");
								HX_STACK_LINE(5476)
								biasCoef = (((dt * omega) * omega) * _this->agamma);
								HX_STACK_LINE(5476)
								hx::MultEq(_this->agamma,ig);
								HX_STACK_LINE(5476)
								_g26 = ig;
							}
							HX_STACK_LINE(5476)
							hx::MultEq(_this->wMass,_g26);
						}
						else{
							HX_STACK_LINE(5476)
							_this->wMass = 0.0;
							HX_STACK_LINE(5476)
							_this->agamma = 0.0;
						}
						HX_STACK_LINE(5476)
						Float vrnx = (((_this->b2->velx + _this->b2->kinvelx) - (_this->r2y * ((_this->b2->angvel + _this->b2->kinangvel)))) - (((_this->b1->velx + _this->b1->kinvelx) - (_this->r1y * ((_this->b2->angvel + _this->b2->kinangvel))))));		HX_STACK_VAR(vrnx,"vrnx");
						HX_STACK_LINE(5476)
						Float vrny = (((_this->b2->vely + _this->b2->kinvely) + (_this->r2x * ((_this->b2->angvel + _this->b2->kinangvel)))) - (((_this->b1->vely + _this->b1->kinvely) + (_this->r1x * ((_this->b1->angvel + _this->b1->kinangvel))))));		HX_STACK_VAR(vrny,"vrny");
						HX_STACK_LINE(5476)
						if (((((vrnx * vrnx) + (vrny * vrny)) < (::nape::Config_obj::epsilon * ::nape::Config_obj::epsilon)))){
						}
						else{
							HX_STACK_LINE(5476)
							{
								HX_STACK_LINE(5476)
								Float d = ((vrnx * vrnx) + (vrny * vrny));		HX_STACK_VAR(d,"d");
								HX_STACK_LINE(5476)
								Float imag;		HX_STACK_VAR(imag,"imag");
								HX_STACK_LINE(5476)
								{
									HX_STACK_LINE(5476)
									Float _g27 = ::Math_obj::sqrt(d);		HX_STACK_VAR(_g27,"_g27");
									HX_STACK_LINE(5476)
									imag = (Float(1.0) / Float(_g27));
								}
								HX_STACK_LINE(5476)
								{
									HX_STACK_LINE(5476)
									Float t = imag;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5476)
									hx::MultEq(vrnx,t);
									HX_STACK_LINE(5476)
									hx::MultEq(vrny,t);
								}
							}
							HX_STACK_LINE(5476)
							{
								HX_STACK_LINE(5476)
								_this->nx = vrnx;
								HX_STACK_LINE(5476)
								_this->ny = vrny;
								HX_STACK_LINE(5476)
								{
								}
							}
						}
						HX_STACK_LINE(5476)
						Float tViscosity1 = 0.0;		HX_STACK_VAR(tViscosity1,"tViscosity1");
						HX_STACK_LINE(5476)
						if ((_this->ws1->fluidEnabled)){
							HX_STACK_LINE(5476)
							Float f = (Float((-(_this->ws1->fluidProperties->viscosity) * _this->overlap)) / Float(_this->ws2->area));		HX_STACK_VAR(f,"f");
							HX_STACK_LINE(5476)
							if (((_this->ws2->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
								HX_STACK_LINE(5476)
								hx::SubEq(tViscosity1,(Float(((f * _this->ws2->circle->radius) * ::nape::Config_obj::fluidLinearDrag)) / Float(((((int)2 * _this->ws2->circle->radius) * ::Math_obj::PI)))));
							}
							else{
								HX_STACK_LINE(5476)
								::zpp_nape::shape::ZPP_Polygon poly = _this->ws2->polygon;		HX_STACK_VAR(poly,"poly");
								HX_STACK_LINE(5476)
								Float bord = 0.0;		HX_STACK_VAR(bord,"bord");
								HX_STACK_LINE(5476)
								Float acc = 0.0;		HX_STACK_VAR(acc,"acc");
								HX_STACK_LINE(5476)
								{
									HX_STACK_LINE(5476)
									::zpp_nape::util::ZNPNode_ZPP_Edge cx_ite = poly->edges->head;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(5476)
									while((true)){
										HX_STACK_LINE(5476)
										if ((!(((cx_ite != null()))))){
											HX_STACK_LINE(5476)
											break;
										}
										HX_STACK_LINE(5476)
										::zpp_nape::shape::ZPP_Edge ex = cx_ite->elt;		HX_STACK_VAR(ex,"ex");
										HX_STACK_LINE(5476)
										{
											HX_STACK_LINE(5476)
											hx::AddEq(bord,ex->length);
											HX_STACK_LINE(5476)
											Float fact = ((f * ex->length) * (((ex->gnormx * _this->nx) + (ex->gnormy * _this->ny))));		HX_STACK_VAR(fact,"fact");
											HX_STACK_LINE(5476)
											if (((fact > (int)0))){
												HX_STACK_LINE(5476)
												Float _g28 = hx::MultEq(fact,-(::nape::Config_obj::fluidVacuumDrag));		HX_STACK_VAR(_g28,"_g28");
												HX_STACK_LINE(5476)
												fact = _g28;
											}
											HX_STACK_LINE(5476)
											hx::SubEq(acc,((fact * 0.5) * ::nape::Config_obj::fluidLinearDrag));
										}
										HX_STACK_LINE(5476)
										cx_ite = cx_ite->next;
									}
								}
								HX_STACK_LINE(5476)
								hx::AddEq(tViscosity1,(Float(acc) / Float(bord)));
							}
						}
						HX_STACK_LINE(5476)
						if ((_this->ws2->fluidEnabled)){
							HX_STACK_LINE(5476)
							Float f = (Float((-(_this->ws2->fluidProperties->viscosity) * _this->overlap)) / Float(_this->ws1->area));		HX_STACK_VAR(f,"f");
							HX_STACK_LINE(5476)
							if (((_this->ws1->type == ::zpp_nape::util::ZPP_Flags_obj::id_ShapeType_CIRCLE))){
								HX_STACK_LINE(5476)
								hx::SubEq(tViscosity1,(Float(((f * _this->ws1->circle->radius) * ::nape::Config_obj::fluidLinearDrag)) / Float(((((int)2 * _this->ws1->circle->radius) * ::Math_obj::PI)))));
							}
							else{
								HX_STACK_LINE(5476)
								::zpp_nape::shape::ZPP_Polygon poly = _this->ws1->polygon;		HX_STACK_VAR(poly,"poly");
								HX_STACK_LINE(5476)
								Float bord = 0.0;		HX_STACK_VAR(bord,"bord");
								HX_STACK_LINE(5476)
								Float acc = 0.0;		HX_STACK_VAR(acc,"acc");
								HX_STACK_LINE(5476)
								{
									HX_STACK_LINE(5476)
									::zpp_nape::util::ZNPNode_ZPP_Edge cx_ite = poly->edges->head;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(5476)
									while((true)){
										HX_STACK_LINE(5476)
										if ((!(((cx_ite != null()))))){
											HX_STACK_LINE(5476)
											break;
										}
										HX_STACK_LINE(5476)
										::zpp_nape::shape::ZPP_Edge ex = cx_ite->elt;		HX_STACK_VAR(ex,"ex");
										HX_STACK_LINE(5476)
										{
											HX_STACK_LINE(5476)
											hx::AddEq(bord,ex->length);
											HX_STACK_LINE(5476)
											Float fact = ((f * ex->length) * (((ex->gnormx * _this->nx) + (ex->gnormy * _this->ny))));		HX_STACK_VAR(fact,"fact");
											HX_STACK_LINE(5476)
											if (((fact > (int)0))){
												HX_STACK_LINE(5476)
												Float _g29 = hx::MultEq(fact,-(::nape::Config_obj::fluidVacuumDrag));		HX_STACK_VAR(_g29,"_g29");
												HX_STACK_LINE(5476)
												fact = _g29;
											}
											HX_STACK_LINE(5476)
											hx::SubEq(acc,((fact * 0.5) * ::nape::Config_obj::fluidLinearDrag));
										}
										HX_STACK_LINE(5476)
										cx_ite = cx_ite->next;
									}
								}
								HX_STACK_LINE(5476)
								hx::AddEq(tViscosity1,(Float(acc) / Float(bord)));
							}
						}
						HX_STACK_LINE(5476)
						if (((tViscosity1 != (int)0))){
							HX_STACK_LINE(5476)
							Float m = (_this->b1->smass + _this->b2->smass);		HX_STACK_VAR(m,"m");
							HX_STACK_LINE(5476)
							Float Ka = 0.0;		HX_STACK_VAR(Ka,"Ka");
							HX_STACK_LINE(5476)
							Float Kb = 0.0;		HX_STACK_VAR(Kb,"Kb");
							HX_STACK_LINE(5476)
							Float Kc = 0.0;		HX_STACK_VAR(Kc,"Kc");
							HX_STACK_LINE(5476)
							{
								HX_STACK_LINE(5476)
								Ka = m;
								HX_STACK_LINE(5476)
								Kb = (int)0;
								HX_STACK_LINE(5476)
								Kc = m;
							}
							HX_STACK_LINE(5476)
							if (((_this->b1->sinertia != (int)0))){
								HX_STACK_LINE(5476)
								Float X = (_this->r1x * _this->b1->sinertia);		HX_STACK_VAR(X,"X");
								HX_STACK_LINE(5476)
								Float Y = (_this->r1y * _this->b1->sinertia);		HX_STACK_VAR(Y,"Y");
								HX_STACK_LINE(5476)
								{
									HX_STACK_LINE(5476)
									hx::AddEq(Ka,(Y * _this->r1y));
									HX_STACK_LINE(5476)
									hx::AddEq(Kb,(-(Y) * _this->r1x));
									HX_STACK_LINE(5476)
									hx::AddEq(Kc,(X * _this->r1x));
								}
							}
							HX_STACK_LINE(5476)
							if (((_this->b2->sinertia != (int)0))){
								HX_STACK_LINE(5476)
								Float X = (_this->r2x * _this->b2->sinertia);		HX_STACK_VAR(X,"X");
								HX_STACK_LINE(5476)
								Float Y = (_this->r2y * _this->b2->sinertia);		HX_STACK_VAR(Y,"Y");
								HX_STACK_LINE(5476)
								{
									HX_STACK_LINE(5476)
									hx::AddEq(Ka,(Y * _this->r2y));
									HX_STACK_LINE(5476)
									hx::AddEq(Kb,(-(Y) * _this->r2x));
									HX_STACK_LINE(5476)
									hx::AddEq(Kc,(X * _this->r2x));
								}
							}
							HX_STACK_LINE(5476)
							{
								HX_STACK_LINE(5476)
								Float det = ((Ka * Kc) - (Kb * Kb));		HX_STACK_VAR(det,"det");
								HX_STACK_LINE(5476)
								if (((det != det))){
									HX_STACK_LINE(5476)
									Float _g30 = Kc = (int)0;		HX_STACK_VAR(_g30,"_g30");
									HX_STACK_LINE(5476)
									Float _g31 = Kb = _g30;		HX_STACK_VAR(_g31,"_g31");
									HX_STACK_LINE(5476)
									Ka = _g31;
									HX_STACK_LINE(5476)
									(int)3;
								}
								else{
									HX_STACK_LINE(5476)
									if (((det == (int)0))){
										HX_STACK_LINE(5476)
										int flag = (int)0;		HX_STACK_VAR(flag,"flag");
										HX_STACK_LINE(5476)
										if (((Ka != (int)0))){
											HX_STACK_LINE(5476)
											Ka = (Float((int)1) / Float(Ka));
										}
										else{
											HX_STACK_LINE(5476)
											Ka = (int)0;
											HX_STACK_LINE(5476)
											hx::OrEq(flag,(int)1);
										}
										HX_STACK_LINE(5476)
										if (((Kc != (int)0))){
											HX_STACK_LINE(5476)
											Kc = (Float((int)1) / Float(Kc));
										}
										else{
											HX_STACK_LINE(5476)
											Kc = (int)0;
											HX_STACK_LINE(5476)
											hx::OrEq(flag,(int)2);
										}
										HX_STACK_LINE(5476)
										Kb = (int)0;
										HX_STACK_LINE(5476)
										flag;
									}
									else{
										HX_STACK_LINE(5476)
										det = (Float((int)1) / Float(det));
										HX_STACK_LINE(5476)
										Float t = (Kc * det);		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(5476)
										Kc = (Ka * det);
										HX_STACK_LINE(5476)
										Ka = t;
										HX_STACK_LINE(5476)
										hx::MultEq(Kb,-(det));
										HX_STACK_LINE(5476)
										(int)0;
									}
								}
							}
							HX_STACK_LINE(5476)
							{
								HX_STACK_LINE(5476)
								_this->vMassa = Ka;
								HX_STACK_LINE(5476)
								_this->vMassb = Kb;
								HX_STACK_LINE(5476)
								_this->vMassc = Kc;
							}
							HX_STACK_LINE(5476)
							Float biasCoef;		HX_STACK_VAR(biasCoef,"biasCoef");
							HX_STACK_LINE(5476)
							{
								HX_STACK_LINE(5476)
								Float X;		HX_STACK_VAR(X,"X");
								HX_STACK_LINE(5476)
								{
									HX_STACK_LINE(5476)
									Float omega = (((int)2 * ::Math_obj::PI) * tViscosity1);		HX_STACK_VAR(omega,"omega");
									HX_STACK_LINE(5476)
									_this->lgamma = (Float((int)1) / Float((((dt * omega) * (((int)2 + (omega * dt)))))));
									HX_STACK_LINE(5476)
									Float ig = (Float((int)1) / Float((((int)1 + _this->lgamma))));		HX_STACK_VAR(ig,"ig");
									HX_STACK_LINE(5476)
									biasCoef = (((dt * omega) * omega) * _this->lgamma);
									HX_STACK_LINE(5476)
									hx::MultEq(_this->lgamma,ig);
									HX_STACK_LINE(5476)
									X = ig;
								}
								HX_STACK_LINE(5476)
								hx::MultEq(_this->vMassa,X);
								HX_STACK_LINE(5476)
								hx::MultEq(_this->vMassb,X);
								HX_STACK_LINE(5476)
								hx::MultEq(_this->vMassc,X);
							}
						}
						else{
							HX_STACK_LINE(5476)
							{
								HX_STACK_LINE(5476)
								_this->vMassa = (int)0;
								HX_STACK_LINE(5476)
								_this->vMassb = (int)0;
								HX_STACK_LINE(5476)
								_this->vMassc = (int)0;
							}
							HX_STACK_LINE(5476)
							_this->lgamma = 0.0;
						}
					}
					HX_STACK_LINE(5476)
					{
						HX_STACK_LINE(5476)
						Float t = dtratio;		HX_STACK_VAR(t,"t");
						HX_STACK_LINE(5476)
						hx::MultEq(_this->dampx,t);
						HX_STACK_LINE(5476)
						hx::MultEq(_this->dampy,t);
					}
					HX_STACK_LINE(5476)
					hx::MultEq(_this->adamp,dtratio);
				}
			}
		}
		else{
			HX_STACK_LINE(5479)
			if (((arb->colarb != null()))){
				struct _Function_3_1{
					inline static bool Block( ::zpp_nape::dynamics::ZPP_Arbiter &arb){
						HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5480,0x2b65ed03)
						{
							HX_STACK_LINE(5480)
							::zpp_nape::dynamics::ZPP_ColArbiter _this = arb->colarb;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(5480)
							bool fst = true;		HX_STACK_VAR(fst,"fst");
							HX_STACK_LINE(5480)
							::zpp_nape::dynamics::ZPP_Contact pre = null();		HX_STACK_VAR(pre,"pre");
							HX_STACK_LINE(5480)
							::zpp_nape::dynamics::ZPP_IContact prei = null();		HX_STACK_VAR(prei,"prei");
							HX_STACK_LINE(5480)
							::zpp_nape::dynamics::ZPP_IContact cx_itei = _this->innards->next;		HX_STACK_VAR(cx_itei,"cx_itei");
							HX_STACK_LINE(5480)
							_this->hc2 = false;
							HX_STACK_LINE(5480)
							{
								HX_STACK_LINE(5480)
								::zpp_nape::dynamics::ZPP_Contact cx_ite = _this->contacts->next;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(5480)
								while((true)){
									HX_STACK_LINE(5480)
									if ((!(((cx_ite != null()))))){
										HX_STACK_LINE(5480)
										break;
									}
									HX_STACK_LINE(5480)
									::zpp_nape::dynamics::ZPP_Contact c = cx_ite;		HX_STACK_VAR(c,"c");
									HX_STACK_LINE(5480)
									{
										HX_STACK_LINE(5480)
										if ((((c->stamp + ::nape::Config_obj::arbiterExpirationDelay) < _this->stamp))){
											HX_STACK_LINE(5480)
											::zpp_nape::dynamics::ZPP_Contact _g32;		HX_STACK_VAR(_g32,"_g32");
											HX_STACK_LINE(5480)
											{
												HX_STACK_LINE(5480)
												::zpp_nape::dynamics::ZPP_Contact _this1 = _this->contacts;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(5480)
												::zpp_nape::dynamics::ZPP_Contact old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5480)
												::zpp_nape::dynamics::ZPP_Contact ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(5480)
												if (((pre == null()))){
													HX_STACK_LINE(5480)
													old = _this1->next;
													HX_STACK_LINE(5480)
													ret = old->next;
													HX_STACK_LINE(5480)
													_this1->next = ret;
													HX_STACK_LINE(5480)
													if (((_this1->next == null()))){
														HX_STACK_LINE(5480)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5480)
													old = pre->next;
													HX_STACK_LINE(5480)
													ret = old->next;
													HX_STACK_LINE(5480)
													pre->next = ret;
													HX_STACK_LINE(5480)
													if (((ret == null()))){
														HX_STACK_LINE(5480)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5480)
												old->_inuse = false;
												HX_STACK_LINE(5480)
												_this1->modified = true;
												HX_STACK_LINE(5480)
												(_this1->length)--;
												HX_STACK_LINE(5480)
												_this1->pushmod = true;
												HX_STACK_LINE(5480)
												_g32 = ret;
											}
											HX_STACK_LINE(5480)
											cx_ite = _g32;
											HX_STACK_LINE(5480)
											::zpp_nape::dynamics::ZPP_IContact _g33;		HX_STACK_VAR(_g33,"_g33");
											HX_STACK_LINE(5480)
											{
												HX_STACK_LINE(5480)
												::zpp_nape::dynamics::ZPP_IContact _this1 = _this->innards;		HX_STACK_VAR(_this1,"_this1");
												HX_STACK_LINE(5480)
												::zpp_nape::dynamics::ZPP_IContact old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(5480)
												::zpp_nape::dynamics::ZPP_IContact ret;		HX_STACK_VAR(ret,"ret");
												HX_STACK_LINE(5480)
												if (((prei == null()))){
													HX_STACK_LINE(5480)
													old = _this1->next;
													HX_STACK_LINE(5480)
													ret = old->next;
													HX_STACK_LINE(5480)
													_this1->next = ret;
													HX_STACK_LINE(5480)
													if (((_this1->next == null()))){
														HX_STACK_LINE(5480)
														_this1->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(5480)
													old = prei->next;
													HX_STACK_LINE(5480)
													ret = old->next;
													HX_STACK_LINE(5480)
													prei->next = ret;
													HX_STACK_LINE(5480)
													if (((ret == null()))){
														HX_STACK_LINE(5480)
														_this1->pushmod = true;
													}
												}
												HX_STACK_LINE(5480)
												old->_inuse = false;
												HX_STACK_LINE(5480)
												_this1->modified = true;
												HX_STACK_LINE(5480)
												(_this1->length)--;
												HX_STACK_LINE(5480)
												_this1->pushmod = true;
												HX_STACK_LINE(5480)
												_g33 = ret;
											}
											HX_STACK_LINE(5480)
											cx_itei = _g33;
											HX_STACK_LINE(5480)
											{
												HX_STACK_LINE(5480)
												::zpp_nape::dynamics::ZPP_Contact o = c;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5480)
												o->arbiter = null();
												HX_STACK_LINE(5480)
												o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
												HX_STACK_LINE(5480)
												::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5480)
											continue;
										}
										HX_STACK_LINE(5480)
										::zpp_nape::dynamics::ZPP_IContact ci = c->inner;		HX_STACK_VAR(ci,"ci");
										HX_STACK_LINE(5480)
										bool pact1 = c->active;		HX_STACK_VAR(pact1,"pact1");
										HX_STACK_LINE(5480)
										c->active = (c->stamp == _this->stamp);
										HX_STACK_LINE(5480)
										if ((c->active)){
											HX_STACK_LINE(5480)
											if ((fst)){
												HX_STACK_LINE(5480)
												fst = false;
												HX_STACK_LINE(5480)
												_this->c1 = ci;
												HX_STACK_LINE(5480)
												_this->oc1 = c;
											}
											else{
												HX_STACK_LINE(5480)
												_this->hc2 = true;
												HX_STACK_LINE(5480)
												_this->c2 = ci;
												HX_STACK_LINE(5480)
												_this->oc2 = c;
											}
										}
										HX_STACK_LINE(5480)
										if (((pact1 != c->active))){
											HX_STACK_LINE(5480)
											_this->contacts->modified = true;
										}
										HX_STACK_LINE(5480)
										pre = cx_ite;
										HX_STACK_LINE(5480)
										prei = cx_itei;
										HX_STACK_LINE(5480)
										cx_itei = cx_itei->next;
									}
									HX_STACK_LINE(5480)
									cx_ite = cx_ite->next;
								}
							}
							HX_STACK_LINE(5480)
							if ((_this->hc2)){
								HX_STACK_LINE(5480)
								_this->hpc2 = true;
								HX_STACK_LINE(5480)
								if ((_this->oc1->posOnly)){
									HX_STACK_LINE(5480)
									::zpp_nape::dynamics::ZPP_IContact tmp = _this->c1;		HX_STACK_VAR(tmp,"tmp");
									HX_STACK_LINE(5480)
									_this->c1 = _this->c2;
									HX_STACK_LINE(5480)
									_this->c2 = tmp;
									HX_STACK_LINE(5480)
									::zpp_nape::dynamics::ZPP_Contact tmp2 = _this->oc1;		HX_STACK_VAR(tmp2,"tmp2");
									HX_STACK_LINE(5480)
									_this->oc1 = _this->oc2;
									HX_STACK_LINE(5480)
									_this->oc2 = tmp2;
									HX_STACK_LINE(5480)
									_this->hc2 = false;
								}
								else{
									HX_STACK_LINE(5480)
									if ((_this->oc2->posOnly)){
										HX_STACK_LINE(5480)
										_this->hc2 = false;
									}
								}
								HX_STACK_LINE(5480)
								if ((_this->oc1->posOnly)){
									HX_STACK_LINE(5480)
									fst = true;
								}
							}
							else{
								HX_STACK_LINE(5480)
								_this->hpc2 = false;
							}
							HX_STACK_LINE(5480)
							return fst;
						}
						return null();
					}
				};
				HX_STACK_LINE(5480)
				if ((_Function_3_1::Block(arb))){
					HX_STACK_LINE(5480)
					arb->active = false;
				}
			}
		}
		HX_STACK_LINE(5482)
		if (((pact != arb->active))){
			HX_STACK_LINE(5483)
			arb->b1->arbiters->modified = true;
			HX_STACK_LINE(5484)
			arb->b2->arbiters->modified = true;
			HX_STACK_LINE(5485)
			bool _g34 = this->c_arbiters_false->modified = true;		HX_STACK_VAR(_g34,"_g34");
			HX_STACK_LINE(5485)
			this->c_arbiters_true->modified = _g34;
			HX_STACK_LINE(5486)
			bool _g35 = this->f_arbiters->modified = true;		HX_STACK_VAR(_g35,"_g35");
			HX_STACK_LINE(5486)
			this->s_arbiters->modified = _g35;
		}
		HX_STACK_LINE(5488)
		return false;
	}
}


HX_DEFINE_DYNAMIC_FUNC3(ZPP_Space_obj,presteparb,return )

Void ZPP_Space_obj::prestep( Float dt){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","prestep",0x6c44ec39,"zpp_nape.space.ZPP_Space.prestep","zpp_nape/space/Space.hx",5490,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(dt,"dt")
		HX_STACK_LINE(5491)
		::zpp_nape::util::ZNPNode_ZPP_Constraint pre = null();		HX_STACK_VAR(pre,"pre");
		HX_STACK_LINE(5492)
		{
			HX_STACK_LINE(5493)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5494)
			while((true)){
				HX_STACK_LINE(5494)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(5494)
					break;
				}
				HX_STACK_LINE(5495)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(5496)
				{
					HX_STACK_LINE(5497)
					if ((con->preStep(dt))){
						HX_STACK_LINE(5498)
						::zpp_nape::util::ZNPNode_ZPP_Constraint _g = this->live_constraints->erase(pre);		HX_STACK_VAR(_g,"_g");
						HX_STACK_LINE(5498)
						cx_ite = _g;
						HX_STACK_LINE(5499)
						con->broken();
						HX_STACK_LINE(5500)
						this->constraintCbBreak(con);
						HX_STACK_LINE(5501)
						if ((con->removeOnBreak)){
							HX_STACK_LINE(5502)
							con->component->sleeping = true;
							HX_STACK_LINE(5503)
							this->midstep = false;
							HX_STACK_LINE(5504)
							if (((con->compound != null()))){
								HX_STACK_LINE(5504)
								con->compound->wrap_constraints->remove(con->outer);
							}
							else{
								HX_STACK_LINE(5505)
								this->wrap_constraints->remove(con->outer);
							}
							HX_STACK_LINE(5506)
							this->midstep = true;
						}
						else{
							HX_STACK_LINE(5508)
							con->active = false;
						}
						HX_STACK_LINE(5509)
						con->clearcache();
						HX_STACK_LINE(5510)
						continue;
					}
					HX_STACK_LINE(5512)
					pre = cx_ite;
				}
				HX_STACK_LINE(5514)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5517)
		{
			HX_STACK_LINE(5518)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
			HX_STACK_LINE(5519)
			::zpp_nape::util::ZNPList_ZPP_ColArbiter arbs = this->c_arbiters_true;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(5520)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(5521)
			bool fst = (this->c_arbiters_false != null());		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(5523)
			if (((bool(fst) && bool((arbite == null()))))){
				HX_STACK_LINE(5524)
				fst = false;
				HX_STACK_LINE(5525)
				arbite = this->c_arbiters_false->head;
				HX_STACK_LINE(5526)
				arbs = this->c_arbiters_false;
				HX_STACK_LINE(5527)
				pre1 = null();
			}
			HX_STACK_LINE(5530)
			while((true)){
				HX_STACK_LINE(5530)
				if ((!(((arbite != null()))))){
					HX_STACK_LINE(5530)
					break;
				}
				HX_STACK_LINE(5531)
				::zpp_nape::dynamics::ZPP_ColArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5532)
				if ((this->presteparb(arb,dt,null()))){
					HX_STACK_LINE(5533)
					::zpp_nape::util::ZNPNode_ZPP_ColArbiter _g1;		HX_STACK_VAR(_g1,"_g1");
					HX_STACK_LINE(5533)
					{
						HX_STACK_LINE(5533)
						::zpp_nape::util::ZNPNode_ZPP_ColArbiter old;		HX_STACK_VAR(old,"old");
						HX_STACK_LINE(5533)
						::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(5533)
						if (((pre1 == null()))){
							HX_STACK_LINE(5533)
							old = arbs->head;
							HX_STACK_LINE(5533)
							ret = old->next;
							HX_STACK_LINE(5533)
							arbs->head = ret;
							HX_STACK_LINE(5533)
							if (((arbs->head == null()))){
								HX_STACK_LINE(5533)
								arbs->pushmod = true;
							}
						}
						else{
							HX_STACK_LINE(5533)
							old = pre1->next;
							HX_STACK_LINE(5533)
							ret = old->next;
							HX_STACK_LINE(5533)
							pre1->next = ret;
							HX_STACK_LINE(5533)
							if (((ret == null()))){
								HX_STACK_LINE(5533)
								arbs->pushmod = true;
							}
						}
						HX_STACK_LINE(5533)
						{
							HX_STACK_LINE(5533)
							::zpp_nape::util::ZNPNode_ZPP_ColArbiter o = old;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(5533)
							o->elt = null();
							HX_STACK_LINE(5533)
							o->next = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
							HX_STACK_LINE(5533)
							::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = o;
						}
						HX_STACK_LINE(5533)
						arbs->modified = true;
						HX_STACK_LINE(5533)
						(arbs->length)--;
						HX_STACK_LINE(5533)
						arbs->pushmod = true;
						HX_STACK_LINE(5533)
						_g1 = ret;
					}
					HX_STACK_LINE(5533)
					arbite = _g1;
					HX_STACK_LINE(5535)
					if (((bool(fst) && bool((arbite == null()))))){
						HX_STACK_LINE(5536)
						fst = false;
						HX_STACK_LINE(5537)
						arbite = this->c_arbiters_false->head;
						HX_STACK_LINE(5538)
						arbs = this->c_arbiters_false;
						HX_STACK_LINE(5539)
						pre1 = null();
					}
					HX_STACK_LINE(5542)
					continue;
				}
				HX_STACK_LINE(5544)
				pre1 = arbite;
				HX_STACK_LINE(5545)
				arbite = arbite->next;
				HX_STACK_LINE(5547)
				if (((bool(fst) && bool((arbite == null()))))){
					HX_STACK_LINE(5548)
					fst = false;
					HX_STACK_LINE(5549)
					arbite = this->c_arbiters_false->head;
					HX_STACK_LINE(5550)
					arbs = this->c_arbiters_false;
					HX_STACK_LINE(5551)
					pre1 = null();
				}
			}
		}
		HX_STACK_LINE(5556)
		{
			HX_STACK_LINE(5557)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
			HX_STACK_LINE(5558)
			::zpp_nape::util::ZNPList_ZPP_FluidArbiter arbs = this->f_arbiters;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(5559)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(5560)
			bool fst = false;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(5562)
			if (((bool(fst) && bool((arbite == null()))))){
				HX_STACK_LINE(5563)
				fst = false;
				HX_STACK_LINE(5564)
				::zpp_nape::util::ZNPNode_ZPP_FluidArbiter _g2 = Dynamic()();		HX_STACK_VAR(_g2,"_g2");
				HX_STACK_LINE(5564)
				arbite = _g2;
				HX_STACK_LINE(5565)
				arbs = null();
				HX_STACK_LINE(5566)
				pre1 = null();
			}
			HX_STACK_LINE(5569)
			while((true)){
				HX_STACK_LINE(5569)
				if ((!(((arbite != null()))))){
					HX_STACK_LINE(5569)
					break;
				}
				HX_STACK_LINE(5570)
				::zpp_nape::dynamics::ZPP_FluidArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5571)
				if ((this->presteparb(arb,dt,null()))){
					HX_STACK_LINE(5572)
					::zpp_nape::util::ZNPNode_ZPP_FluidArbiter _g3;		HX_STACK_VAR(_g3,"_g3");
					HX_STACK_LINE(5572)
					{
						HX_STACK_LINE(5572)
						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter old;		HX_STACK_VAR(old,"old");
						HX_STACK_LINE(5572)
						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(5572)
						if (((pre1 == null()))){
							HX_STACK_LINE(5572)
							old = arbs->head;
							HX_STACK_LINE(5572)
							ret = old->next;
							HX_STACK_LINE(5572)
							arbs->head = ret;
							HX_STACK_LINE(5572)
							if (((arbs->head == null()))){
								HX_STACK_LINE(5572)
								arbs->pushmod = true;
							}
						}
						else{
							HX_STACK_LINE(5572)
							old = pre1->next;
							HX_STACK_LINE(5572)
							ret = old->next;
							HX_STACK_LINE(5572)
							pre1->next = ret;
							HX_STACK_LINE(5572)
							if (((ret == null()))){
								HX_STACK_LINE(5572)
								arbs->pushmod = true;
							}
						}
						HX_STACK_LINE(5572)
						{
							HX_STACK_LINE(5572)
							::zpp_nape::util::ZNPNode_ZPP_FluidArbiter o = old;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(5572)
							o->elt = null();
							HX_STACK_LINE(5572)
							o->next = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
							HX_STACK_LINE(5572)
							::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = o;
						}
						HX_STACK_LINE(5572)
						arbs->modified = true;
						HX_STACK_LINE(5572)
						(arbs->length)--;
						HX_STACK_LINE(5572)
						arbs->pushmod = true;
						HX_STACK_LINE(5572)
						_g3 = ret;
					}
					HX_STACK_LINE(5572)
					arbite = _g3;
					HX_STACK_LINE(5574)
					if (((bool(fst) && bool((arbite == null()))))){
						HX_STACK_LINE(5575)
						fst = false;
						HX_STACK_LINE(5576)
						::zpp_nape::util::ZNPNode_ZPP_FluidArbiter _g4 = Dynamic()();		HX_STACK_VAR(_g4,"_g4");
						HX_STACK_LINE(5576)
						arbite = _g4;
						HX_STACK_LINE(5577)
						arbs = null();
						HX_STACK_LINE(5578)
						pre1 = null();
					}
					HX_STACK_LINE(5581)
					continue;
				}
				HX_STACK_LINE(5583)
				pre1 = arbite;
				HX_STACK_LINE(5584)
				arbite = arbite->next;
				HX_STACK_LINE(5586)
				if (((bool(fst) && bool((arbite == null()))))){
					HX_STACK_LINE(5587)
					fst = false;
					HX_STACK_LINE(5588)
					::zpp_nape::util::ZNPNode_ZPP_FluidArbiter _g5 = Dynamic()();		HX_STACK_VAR(_g5,"_g5");
					HX_STACK_LINE(5588)
					arbite = _g5;
					HX_STACK_LINE(5589)
					arbs = null();
					HX_STACK_LINE(5590)
					pre1 = null();
				}
			}
		}
		HX_STACK_LINE(5595)
		{
			HX_STACK_LINE(5596)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter pre1 = null();		HX_STACK_VAR(pre1,"pre1");
			HX_STACK_LINE(5597)
			::zpp_nape::util::ZNPList_ZPP_SensorArbiter arbs = this->s_arbiters;		HX_STACK_VAR(arbs,"arbs");
			HX_STACK_LINE(5598)
			::zpp_nape::util::ZNPNode_ZPP_SensorArbiter arbite = arbs->head;		HX_STACK_VAR(arbite,"arbite");
			HX_STACK_LINE(5599)
			bool fst = false;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(5601)
			if (((bool(fst) && bool((arbite == null()))))){
				HX_STACK_LINE(5602)
				fst = false;
				HX_STACK_LINE(5603)
				::zpp_nape::util::ZNPNode_ZPP_SensorArbiter _g6 = Dynamic()();		HX_STACK_VAR(_g6,"_g6");
				HX_STACK_LINE(5603)
				arbite = _g6;
				HX_STACK_LINE(5604)
				arbs = null();
				HX_STACK_LINE(5605)
				pre1 = null();
			}
			HX_STACK_LINE(5608)
			while((true)){
				HX_STACK_LINE(5608)
				if ((!(((arbite != null()))))){
					HX_STACK_LINE(5608)
					break;
				}
				HX_STACK_LINE(5609)
				::zpp_nape::dynamics::ZPP_SensorArbiter arb = arbite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5610)
				if ((this->presteparb(arb,dt,null()))){
					HX_STACK_LINE(5611)
					::zpp_nape::util::ZNPNode_ZPP_SensorArbiter _g7;		HX_STACK_VAR(_g7,"_g7");
					HX_STACK_LINE(5611)
					{
						HX_STACK_LINE(5611)
						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter old;		HX_STACK_VAR(old,"old");
						HX_STACK_LINE(5611)
						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(5611)
						if (((pre1 == null()))){
							HX_STACK_LINE(5611)
							old = arbs->head;
							HX_STACK_LINE(5611)
							ret = old->next;
							HX_STACK_LINE(5611)
							arbs->head = ret;
							HX_STACK_LINE(5611)
							if (((arbs->head == null()))){
								HX_STACK_LINE(5611)
								arbs->pushmod = true;
							}
						}
						else{
							HX_STACK_LINE(5611)
							old = pre1->next;
							HX_STACK_LINE(5611)
							ret = old->next;
							HX_STACK_LINE(5611)
							pre1->next = ret;
							HX_STACK_LINE(5611)
							if (((ret == null()))){
								HX_STACK_LINE(5611)
								arbs->pushmod = true;
							}
						}
						HX_STACK_LINE(5611)
						{
							HX_STACK_LINE(5611)
							::zpp_nape::util::ZNPNode_ZPP_SensorArbiter o = old;		HX_STACK_VAR(o,"o");
							HX_STACK_LINE(5611)
							o->elt = null();
							HX_STACK_LINE(5611)
							o->next = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
							HX_STACK_LINE(5611)
							::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = o;
						}
						HX_STACK_LINE(5611)
						arbs->modified = true;
						HX_STACK_LINE(5611)
						(arbs->length)--;
						HX_STACK_LINE(5611)
						arbs->pushmod = true;
						HX_STACK_LINE(5611)
						_g7 = ret;
					}
					HX_STACK_LINE(5611)
					arbite = _g7;
					HX_STACK_LINE(5613)
					if (((bool(fst) && bool((arbite == null()))))){
						HX_STACK_LINE(5614)
						fst = false;
						HX_STACK_LINE(5615)
						::zpp_nape::util::ZNPNode_ZPP_SensorArbiter _g8 = Dynamic()();		HX_STACK_VAR(_g8,"_g8");
						HX_STACK_LINE(5615)
						arbite = _g8;
						HX_STACK_LINE(5616)
						arbs = null();
						HX_STACK_LINE(5617)
						pre1 = null();
					}
					HX_STACK_LINE(5620)
					continue;
				}
				HX_STACK_LINE(5622)
				pre1 = arbite;
				HX_STACK_LINE(5623)
				arbite = arbite->next;
				HX_STACK_LINE(5625)
				if (((bool(fst) && bool((arbite == null()))))){
					HX_STACK_LINE(5626)
					fst = false;
					HX_STACK_LINE(5627)
					::zpp_nape::util::ZNPNode_ZPP_SensorArbiter _g9 = Dynamic()();		HX_STACK_VAR(_g9,"_g9");
					HX_STACK_LINE(5627)
					arbite = _g9;
					HX_STACK_LINE(5628)
					arbs = null();
					HX_STACK_LINE(5629)
					pre1 = null();
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,prestep,(void))

Void ZPP_Space_obj::warmStart( ){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","warmStart",0x70dc65a7,"zpp_nape.space.ZPP_Space.warmStart","zpp_nape/space/Space.hx",5635,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_LINE(5636)
		{
			HX_STACK_LINE(5637)
			::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = this->f_arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5638)
			while((true)){
				HX_STACK_LINE(5638)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(5638)
					break;
				}
				HX_STACK_LINE(5639)
				::zpp_nape::dynamics::ZPP_FluidArbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5640)
				if (((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
					HX_STACK_LINE(5640)
					{
						HX_STACK_LINE(5640)
						Float t = arb->b1->imass;		HX_STACK_VAR(t,"t");
						HX_STACK_LINE(5640)
						hx::SubEq(arb->b1->velx,(arb->dampx * t));
						HX_STACK_LINE(5640)
						hx::SubEq(arb->b1->vely,(arb->dampy * t));
					}
					HX_STACK_LINE(5640)
					{
						HX_STACK_LINE(5640)
						Float t = arb->b2->imass;		HX_STACK_VAR(t,"t");
						HX_STACK_LINE(5640)
						hx::AddEq(arb->b2->velx,(arb->dampx * t));
						HX_STACK_LINE(5640)
						hx::AddEq(arb->b2->vely,(arb->dampy * t));
					}
					HX_STACK_LINE(5640)
					hx::SubEq(arb->b1->angvel,(arb->b1->iinertia * (((arb->dampy * arb->r1x) - (arb->dampx * arb->r1y)))));
					HX_STACK_LINE(5640)
					hx::AddEq(arb->b2->angvel,(arb->b2->iinertia * (((arb->dampy * arb->r2x) - (arb->dampx * arb->r2y)))));
					HX_STACK_LINE(5640)
					hx::SubEq(arb->b1->angvel,(arb->adamp * arb->b1->iinertia));
					HX_STACK_LINE(5640)
					hx::AddEq(arb->b2->angvel,(arb->adamp * arb->b2->iinertia));
				}
				HX_STACK_LINE(5641)
				cx_ite = cx_ite->next;
			}
		}
		HX_STACK_LINE(5644)
		{
			HX_STACK_LINE(5645)
			::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbi = this->c_arbiters_false->head;		HX_STACK_VAR(arbi,"arbi");
			HX_STACK_LINE(5646)
			bool fst = true;		HX_STACK_VAR(fst,"fst");
			HX_STACK_LINE(5647)
			if (((arbi == null()))){
				HX_STACK_LINE(5648)
				arbi = this->c_arbiters_true->head;
				HX_STACK_LINE(5649)
				fst = false;
			}
			HX_STACK_LINE(5651)
			while((true)){
				HX_STACK_LINE(5651)
				if ((!(((arbi != null()))))){
					HX_STACK_LINE(5651)
					break;
				}
				HX_STACK_LINE(5652)
				::zpp_nape::dynamics::ZPP_ColArbiter arb = arbi->elt;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(5654)
				if (((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
					HX_STACK_LINE(5654)
					{
						HX_STACK_LINE(5654)
						Float jx = ((arb->nx * arb->c1->jnAcc) - (arb->ny * arb->c1->jtAcc));		HX_STACK_VAR(jx,"jx");
						HX_STACK_LINE(5654)
						Float jy = ((arb->ny * arb->c1->jnAcc) + (arb->nx * arb->c1->jtAcc));		HX_STACK_VAR(jy,"jy");
						HX_STACK_LINE(5654)
						{
							HX_STACK_LINE(5654)
							Float t = arb->b1->imass;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5654)
							hx::SubEq(arb->b1->velx,(jx * t));
							HX_STACK_LINE(5654)
							hx::SubEq(arb->b1->vely,(jy * t));
						}
						HX_STACK_LINE(5654)
						hx::SubEq(arb->b1->angvel,(arb->b1->iinertia * (((jy * arb->c1->r1x) - (jx * arb->c1->r1y)))));
						HX_STACK_LINE(5654)
						{
							HX_STACK_LINE(5654)
							Float t = arb->b2->imass;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5654)
							hx::AddEq(arb->b2->velx,(jx * t));
							HX_STACK_LINE(5654)
							hx::AddEq(arb->b2->vely,(jy * t));
						}
						HX_STACK_LINE(5654)
						hx::AddEq(arb->b2->angvel,(arb->b2->iinertia * (((jy * arb->c1->r2x) - (jx * arb->c1->r2y)))));
					}
					HX_STACK_LINE(5654)
					if ((arb->hc2)){
						HX_STACK_LINE(5654)
						Float jx = ((arb->nx * arb->c2->jnAcc) - (arb->ny * arb->c2->jtAcc));		HX_STACK_VAR(jx,"jx");
						HX_STACK_LINE(5654)
						Float jy = ((arb->ny * arb->c2->jnAcc) + (arb->nx * arb->c2->jtAcc));		HX_STACK_VAR(jy,"jy");
						HX_STACK_LINE(5654)
						{
							HX_STACK_LINE(5654)
							Float t = arb->b1->imass;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5654)
							hx::SubEq(arb->b1->velx,(jx * t));
							HX_STACK_LINE(5654)
							hx::SubEq(arb->b1->vely,(jy * t));
						}
						HX_STACK_LINE(5654)
						hx::SubEq(arb->b1->angvel,(arb->b1->iinertia * (((jy * arb->c2->r1x) - (jx * arb->c2->r1y)))));
						HX_STACK_LINE(5654)
						{
							HX_STACK_LINE(5654)
							Float t = arb->b2->imass;		HX_STACK_VAR(t,"t");
							HX_STACK_LINE(5654)
							hx::AddEq(arb->b2->velx,(jx * t));
							HX_STACK_LINE(5654)
							hx::AddEq(arb->b2->vely,(jy * t));
						}
						HX_STACK_LINE(5654)
						hx::AddEq(arb->b2->angvel,(arb->b2->iinertia * (((jy * arb->c2->r2x) - (jx * arb->c2->r2y)))));
					}
					HX_STACK_LINE(5654)
					hx::AddEq(arb->b2->angvel,(arb->jrAcc * arb->b2->iinertia));
					HX_STACK_LINE(5654)
					hx::SubEq(arb->b1->angvel,(arb->jrAcc * arb->b1->iinertia));
				}
				HX_STACK_LINE(5656)
				arbi = arbi->next;
				HX_STACK_LINE(5657)
				if (((bool(fst) && bool((arbi == null()))))){
					HX_STACK_LINE(5658)
					arbi = this->c_arbiters_true->head;
					HX_STACK_LINE(5659)
					fst = false;
				}
			}
		}
		HX_STACK_LINE(5663)
		{
			HX_STACK_LINE(5664)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5665)
			while((true)){
				HX_STACK_LINE(5665)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(5665)
					break;
				}
				HX_STACK_LINE(5666)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(5667)
				con->warmStart();
				HX_STACK_LINE(5668)
				cx_ite = cx_ite->next;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC0(ZPP_Space_obj,warmStart,(void))

Void ZPP_Space_obj::iterateVel( int times){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","iterateVel",0xf7beeb79,"zpp_nape.space.ZPP_Space.iterateVel","zpp_nape/space/Space.hx",5673,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(times,"times")
		HX_STACK_LINE(5673)
		int _g = (int)0;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(5673)
		while((true)){
			HX_STACK_LINE(5673)
			if ((!(((_g < times))))){
				HX_STACK_LINE(5673)
				break;
			}
			HX_STACK_LINE(5673)
			int i = (_g)++;		HX_STACK_VAR(i,"i");
			HX_STACK_LINE(5674)
			{
				HX_STACK_LINE(5675)
				::zpp_nape::util::ZNPNode_ZPP_FluidArbiter cx_ite = this->f_arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(5676)
				while((true)){
					HX_STACK_LINE(5676)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(5676)
						break;
					}
					HX_STACK_LINE(5677)
					::zpp_nape::dynamics::ZPP_FluidArbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
					HX_STACK_LINE(5678)
					if (((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
						HX_STACK_LINE(5678)
						if ((!(arb->nodrag))){
							HX_STACK_LINE(5678)
							Float w1 = (arb->b1->angvel + arb->b1->kinangvel);		HX_STACK_VAR(w1,"w1");
							HX_STACK_LINE(5678)
							Float w2 = (arb->b2->angvel + arb->b2->kinangvel);		HX_STACK_VAR(w2,"w2");
							HX_STACK_LINE(5678)
							Float jx = (((arb->b1->velx + arb->b1->kinvelx) - (arb->r1y * w1)) - (((arb->b2->velx + arb->b2->kinvelx) - (arb->r2y * w2))));		HX_STACK_VAR(jx,"jx");
							HX_STACK_LINE(5678)
							Float jy = (((arb->b1->vely + arb->b1->kinvely) + (arb->r1x * w1)) - (((arb->b2->vely + arb->b2->kinvely) + (arb->r2x * w2))));		HX_STACK_VAR(jy,"jy");
							HX_STACK_LINE(5678)
							{
								HX_STACK_LINE(5678)
								Float t = ((arb->vMassa * jx) + (arb->vMassb * jy));		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5678)
								jy = ((arb->vMassb * jx) + (arb->vMassc * jy));
								HX_STACK_LINE(5678)
								jx = t;
							}
							HX_STACK_LINE(5678)
							{
								HX_STACK_LINE(5678)
								Float t = arb->lgamma;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5678)
								hx::SubEq(jx,(arb->dampx * t));
								HX_STACK_LINE(5678)
								hx::SubEq(jy,(arb->dampy * t));
							}
							HX_STACK_LINE(5678)
							{
								HX_STACK_LINE(5678)
								Float t = 1.0;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5678)
								hx::AddEq(arb->dampx,(jx * t));
								HX_STACK_LINE(5678)
								hx::AddEq(arb->dampy,(jy * t));
							}
							HX_STACK_LINE(5678)
							{
								HX_STACK_LINE(5678)
								Float t = arb->b1->imass;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5678)
								hx::SubEq(arb->b1->velx,(jx * t));
								HX_STACK_LINE(5678)
								hx::SubEq(arb->b1->vely,(jy * t));
							}
							HX_STACK_LINE(5678)
							{
								HX_STACK_LINE(5678)
								Float t = arb->b2->imass;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5678)
								hx::AddEq(arb->b2->velx,(jx * t));
								HX_STACK_LINE(5678)
								hx::AddEq(arb->b2->vely,(jy * t));
							}
							HX_STACK_LINE(5678)
							hx::SubEq(arb->b1->angvel,(arb->b1->iinertia * (((jy * arb->r1x) - (jx * arb->r1y)))));
							HX_STACK_LINE(5678)
							hx::AddEq(arb->b2->angvel,(arb->b2->iinertia * (((jy * arb->r2x) - (jx * arb->r2y)))));
							HX_STACK_LINE(5678)
							Float j_damp = ((((w1 - w2)) * arb->wMass) - (arb->adamp * arb->agamma));		HX_STACK_VAR(j_damp,"j_damp");
							HX_STACK_LINE(5678)
							hx::AddEq(arb->adamp,j_damp);
							HX_STACK_LINE(5678)
							hx::SubEq(arb->b1->angvel,(j_damp * arb->b1->iinertia));
							HX_STACK_LINE(5678)
							hx::AddEq(arb->b2->angvel,(j_damp * arb->b2->iinertia));
						}
					}
					HX_STACK_LINE(5679)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(5682)
			::zpp_nape::util::ZNPNode_ZPP_Constraint pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(5683)
			{
				HX_STACK_LINE(5684)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(5685)
				while((true)){
					HX_STACK_LINE(5685)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(5685)
						break;
					}
					HX_STACK_LINE(5686)
					::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
					HX_STACK_LINE(5687)
					{
						HX_STACK_LINE(5688)
						if ((con->applyImpulseVel())){
							HX_STACK_LINE(5689)
							::zpp_nape::util::ZNPNode_ZPP_Constraint _g1 = this->live_constraints->erase(pre);		HX_STACK_VAR(_g1,"_g1");
							HX_STACK_LINE(5689)
							cx_ite = _g1;
							HX_STACK_LINE(5690)
							con->broken();
							HX_STACK_LINE(5691)
							this->constraintCbBreak(con);
							HX_STACK_LINE(5692)
							if ((con->removeOnBreak)){
								HX_STACK_LINE(5693)
								con->component->sleeping = true;
								HX_STACK_LINE(5694)
								this->midstep = false;
								HX_STACK_LINE(5695)
								if (((con->compound != null()))){
									HX_STACK_LINE(5695)
									con->compound->wrap_constraints->remove(con->outer);
								}
								else{
									HX_STACK_LINE(5696)
									this->wrap_constraints->remove(con->outer);
								}
								HX_STACK_LINE(5697)
								this->midstep = true;
							}
							else{
								HX_STACK_LINE(5699)
								con->active = false;
							}
							HX_STACK_LINE(5700)
							con->clearcache();
							HX_STACK_LINE(5701)
							continue;
						}
						HX_STACK_LINE(5703)
						pre = cx_ite;
					}
					HX_STACK_LINE(5705)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(5708)
			{
				HX_STACK_LINE(5709)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbi = this->c_arbiters_false->head;		HX_STACK_VAR(arbi,"arbi");
				HX_STACK_LINE(5710)
				bool fst = true;		HX_STACK_VAR(fst,"fst");
				HX_STACK_LINE(5711)
				if (((arbi == null()))){
					HX_STACK_LINE(5712)
					arbi = this->c_arbiters_true->head;
					HX_STACK_LINE(5713)
					fst = false;
				}
				HX_STACK_LINE(5715)
				while((true)){
					HX_STACK_LINE(5715)
					if ((!(((arbi != null()))))){
						HX_STACK_LINE(5715)
						break;
					}
					HX_STACK_LINE(5716)
					::zpp_nape::dynamics::ZPP_ColArbiter arb = arbi->elt;		HX_STACK_VAR(arb,"arb");
					HX_STACK_LINE(5718)
					if (((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
						HX_STACK_LINE(5718)
						Float jx;		HX_STACK_VAR(jx,"jx");
						HX_STACK_LINE(5718)
						Float jy;		HX_STACK_VAR(jy,"jy");
						HX_STACK_LINE(5718)
						Float j;		HX_STACK_VAR(j,"j");
						HX_STACK_LINE(5718)
						Float jMax;		HX_STACK_VAR(jMax,"jMax");
						HX_STACK_LINE(5718)
						Float jOld;		HX_STACK_VAR(jOld,"jOld");
						HX_STACK_LINE(5718)
						Float cjAcc;		HX_STACK_VAR(cjAcc,"cjAcc");
						HX_STACK_LINE(5718)
						Float v1x = (((arb->k1x + arb->b2->velx) - (arb->c1->r2y * arb->b2->angvel)) - ((arb->b1->velx - (arb->c1->r1y * arb->b1->angvel))));		HX_STACK_VAR(v1x,"v1x");
						HX_STACK_LINE(5718)
						Float v1y = (((arb->k1y + arb->b2->vely) + (arb->c1->r2x * arb->b2->angvel)) - ((arb->b1->vely + (arb->c1->r1x * arb->b1->angvel))));		HX_STACK_VAR(v1y,"v1y");
						HX_STACK_LINE(5718)
						j = (((((v1y * arb->nx) - (v1x * arb->ny)) + arb->surfacex)) * arb->c1->tMass);
						HX_STACK_LINE(5718)
						jMax = (arb->c1->friction * arb->c1->jnAcc);
						HX_STACK_LINE(5718)
						jOld = arb->c1->jtAcc;
						HX_STACK_LINE(5718)
						cjAcc = (jOld - j);
						HX_STACK_LINE(5718)
						if (((cjAcc > jMax))){
							HX_STACK_LINE(5718)
							cjAcc = jMax;
						}
						else{
							HX_STACK_LINE(5718)
							if (((cjAcc < -(jMax)))){
								HX_STACK_LINE(5718)
								cjAcc = -(jMax);
							}
						}
						HX_STACK_LINE(5718)
						j = (cjAcc - jOld);
						HX_STACK_LINE(5718)
						arb->c1->jtAcc = cjAcc;
						HX_STACK_LINE(5718)
						jx = (-(arb->ny) * j);
						HX_STACK_LINE(5718)
						jy = (arb->nx * j);
						HX_STACK_LINE(5718)
						hx::AddEq(arb->b2->velx,(jx * arb->b2->imass));
						HX_STACK_LINE(5718)
						hx::AddEq(arb->b2->vely,(jy * arb->b2->imass));
						HX_STACK_LINE(5718)
						hx::SubEq(arb->b1->velx,(jx * arb->b1->imass));
						HX_STACK_LINE(5718)
						hx::SubEq(arb->b1->vely,(jy * arb->b1->imass));
						HX_STACK_LINE(5718)
						hx::AddEq(arb->b2->angvel,((arb->rt1b * j) * arb->b2->iinertia));
						HX_STACK_LINE(5718)
						hx::SubEq(arb->b1->angvel,((arb->rt1a * j) * arb->b1->iinertia));
						HX_STACK_LINE(5718)
						if ((arb->hc2)){
							HX_STACK_LINE(5718)
							Float v2x = (((arb->k2x + arb->b2->velx) - (arb->c2->r2y * arb->b2->angvel)) - ((arb->b1->velx - (arb->c2->r1y * arb->b1->angvel))));		HX_STACK_VAR(v2x,"v2x");
							HX_STACK_LINE(5718)
							Float v2y = (((arb->k2y + arb->b2->vely) + (arb->c2->r2x * arb->b2->angvel)) - ((arb->b1->vely + (arb->c2->r1x * arb->b1->angvel))));		HX_STACK_VAR(v2y,"v2y");
							HX_STACK_LINE(5718)
							j = (((((v2y * arb->nx) - (v2x * arb->ny)) + arb->surfacex)) * arb->c2->tMass);
							HX_STACK_LINE(5718)
							jMax = (arb->c2->friction * arb->c2->jnAcc);
							HX_STACK_LINE(5718)
							jOld = arb->c2->jtAcc;
							HX_STACK_LINE(5718)
							cjAcc = (jOld - j);
							HX_STACK_LINE(5718)
							if (((cjAcc > jMax))){
								HX_STACK_LINE(5718)
								cjAcc = jMax;
							}
							else{
								HX_STACK_LINE(5718)
								if (((cjAcc < -(jMax)))){
									HX_STACK_LINE(5718)
									cjAcc = -(jMax);
								}
							}
							HX_STACK_LINE(5718)
							j = (cjAcc - jOld);
							HX_STACK_LINE(5718)
							arb->c2->jtAcc = cjAcc;
							HX_STACK_LINE(5718)
							jx = (-(arb->ny) * j);
							HX_STACK_LINE(5718)
							jy = (arb->nx * j);
							HX_STACK_LINE(5718)
							hx::AddEq(arb->b2->velx,(jx * arb->b2->imass));
							HX_STACK_LINE(5718)
							hx::AddEq(arb->b2->vely,(jy * arb->b2->imass));
							HX_STACK_LINE(5718)
							hx::SubEq(arb->b1->velx,(jx * arb->b1->imass));
							HX_STACK_LINE(5718)
							hx::SubEq(arb->b1->vely,(jy * arb->b1->imass));
							HX_STACK_LINE(5718)
							hx::AddEq(arb->b2->angvel,((arb->rt2b * j) * arb->b2->iinertia));
							HX_STACK_LINE(5718)
							hx::SubEq(arb->b1->angvel,((arb->rt2a * j) * arb->b1->iinertia));
							HX_STACK_LINE(5718)
							v1x = (((arb->k1x + arb->b2->velx) - (arb->c1->r2y * arb->b2->angvel)) - ((arb->b1->velx - (arb->c1->r1y * arb->b1->angvel))));
							HX_STACK_LINE(5718)
							v1y = (((arb->k1y + arb->b2->vely) + (arb->c1->r2x * arb->b2->angvel)) - ((arb->b1->vely + (arb->c1->r1x * arb->b1->angvel))));
							HX_STACK_LINE(5718)
							v2x = (((arb->k2x + arb->b2->velx) - (arb->c2->r2y * arb->b2->angvel)) - ((arb->b1->velx - (arb->c2->r1y * arb->b1->angvel))));
							HX_STACK_LINE(5718)
							v2y = (((arb->k2y + arb->b2->vely) + (arb->c2->r2x * arb->b2->angvel)) - ((arb->b1->vely + (arb->c2->r1x * arb->b1->angvel))));
							HX_STACK_LINE(5718)
							Float ax = arb->c1->jnAcc;		HX_STACK_VAR(ax,"ax");
							HX_STACK_LINE(5718)
							Float ay = arb->c2->jnAcc;		HX_STACK_VAR(ay,"ay");
							HX_STACK_LINE(5718)
							Float jnx = (((((v1x * arb->nx) + (v1y * arb->ny)) + arb->surfacey) + arb->c1->bounce) - (((arb->Ka * ax) + (arb->Kb * ay))));		HX_STACK_VAR(jnx,"jnx");
							HX_STACK_LINE(5718)
							Float jny = (((((v2x * arb->nx) + (v2y * arb->ny)) + arb->surfacey) + arb->c2->bounce) - (((arb->Kb * ax) + (arb->Kc * ay))));		HX_STACK_VAR(jny,"jny");
							HX_STACK_LINE(5718)
							Float xx = -((((arb->kMassa * jnx) + (arb->kMassb * jny))));		HX_STACK_VAR(xx,"xx");
							HX_STACK_LINE(5718)
							Float xy = -((((arb->kMassb * jnx) + (arb->kMassc * jny))));		HX_STACK_VAR(xy,"xy");
							HX_STACK_LINE(5718)
							if (((bool((xx >= (int)0)) && bool((xy >= (int)0))))){
								HX_STACK_LINE(5718)
								{
									HX_STACK_LINE(5718)
									jnx = (xx - ax);
									HX_STACK_LINE(5718)
									jny = (xy - ay);
								}
								HX_STACK_LINE(5718)
								arb->c1->jnAcc = xx;
								HX_STACK_LINE(5718)
								arb->c2->jnAcc = xy;
							}
							else{
								HX_STACK_LINE(5718)
								xx = (-(arb->c1->nMass) * jnx);
								HX_STACK_LINE(5718)
								if (((bool((xx >= (int)0)) && bool((((arb->Kb * xx) + jny) >= (int)0))))){
									HX_STACK_LINE(5718)
									jnx = (xx - ax);
									HX_STACK_LINE(5718)
									jny = -(ay);
									HX_STACK_LINE(5718)
									arb->c1->jnAcc = xx;
									HX_STACK_LINE(5718)
									arb->c2->jnAcc = (int)0;
								}
								else{
									HX_STACK_LINE(5718)
									xy = (-(arb->c2->nMass) * jny);
									HX_STACK_LINE(5718)
									if (((bool((xy >= (int)0)) && bool((((arb->Kb * xy) + jnx) >= (int)0))))){
										HX_STACK_LINE(5718)
										jnx = -(ax);
										HX_STACK_LINE(5718)
										jny = (xy - ay);
										HX_STACK_LINE(5718)
										arb->c1->jnAcc = (int)0;
										HX_STACK_LINE(5718)
										arb->c2->jnAcc = xy;
									}
									else{
										HX_STACK_LINE(5718)
										if (((bool((jnx >= (int)0)) && bool((jny >= (int)0))))){
											HX_STACK_LINE(5718)
											jnx = -(ax);
											HX_STACK_LINE(5718)
											jny = -(ay);
											HX_STACK_LINE(5718)
											Float _g1 = arb->c2->jnAcc = (int)0;		HX_STACK_VAR(_g1,"_g1");
											HX_STACK_LINE(5718)
											arb->c1->jnAcc = _g1;
										}
										else{
											HX_STACK_LINE(5718)
											jnx = (int)0;
											HX_STACK_LINE(5718)
											jny = (int)0;
										}
									}
								}
							}
							HX_STACK_LINE(5718)
							j = (jnx + jny);
							HX_STACK_LINE(5718)
							jx = (arb->nx * j);
							HX_STACK_LINE(5718)
							jy = (arb->ny * j);
							HX_STACK_LINE(5718)
							hx::AddEq(arb->b2->velx,(jx * arb->b2->imass));
							HX_STACK_LINE(5718)
							hx::AddEq(arb->b2->vely,(jy * arb->b2->imass));
							HX_STACK_LINE(5718)
							hx::SubEq(arb->b1->velx,(jx * arb->b1->imass));
							HX_STACK_LINE(5718)
							hx::SubEq(arb->b1->vely,(jy * arb->b1->imass));
							HX_STACK_LINE(5718)
							hx::AddEq(arb->b2->angvel,((((arb->rn1b * jnx) + (arb->rn2b * jny))) * arb->b2->iinertia));
							HX_STACK_LINE(5718)
							hx::SubEq(arb->b1->angvel,((((arb->rn1a * jnx) + (arb->rn2a * jny))) * arb->b1->iinertia));
						}
						else{
							HX_STACK_LINE(5718)
							if (((arb->radius != 0.0))){
								HX_STACK_LINE(5718)
								Float dw = (arb->b2->angvel - arb->b1->angvel);		HX_STACK_VAR(dw,"dw");
								HX_STACK_LINE(5718)
								j = (dw * arb->rMass);
								HX_STACK_LINE(5718)
								jMax = (arb->rfric * arb->c1->jnAcc);
								HX_STACK_LINE(5718)
								jOld = arb->jrAcc;
								HX_STACK_LINE(5718)
								hx::SubEq(arb->jrAcc,j);
								HX_STACK_LINE(5718)
								if (((arb->jrAcc > jMax))){
									HX_STACK_LINE(5718)
									arb->jrAcc = jMax;
								}
								else{
									HX_STACK_LINE(5718)
									if (((arb->jrAcc < -(jMax)))){
										HX_STACK_LINE(5718)
										arb->jrAcc = -(jMax);
									}
								}
								HX_STACK_LINE(5718)
								j = (arb->jrAcc - jOld);
								HX_STACK_LINE(5718)
								hx::AddEq(arb->b2->angvel,(j * arb->b2->iinertia));
								HX_STACK_LINE(5718)
								hx::SubEq(arb->b1->angvel,(j * arb->b1->iinertia));
							}
							HX_STACK_LINE(5718)
							v1x = (((arb->k1x + arb->b2->velx) - (arb->c1->r2y * arb->b2->angvel)) - ((arb->b1->velx - (arb->c1->r1y * arb->b1->angvel))));
							HX_STACK_LINE(5718)
							v1y = (((arb->k1y + arb->b2->vely) + (arb->c1->r2x * arb->b2->angvel)) - ((arb->b1->vely + (arb->c1->r1x * arb->b1->angvel))));
							HX_STACK_LINE(5718)
							j = ((((arb->c1->bounce + (((arb->nx * v1x) + (arb->ny * v1y)))) + arb->surfacey)) * arb->c1->nMass);
							HX_STACK_LINE(5718)
							jOld = arb->c1->jnAcc;
							HX_STACK_LINE(5718)
							cjAcc = (jOld - j);
							HX_STACK_LINE(5718)
							if (((cjAcc < 0.0))){
								HX_STACK_LINE(5718)
								cjAcc = 0.0;
							}
							HX_STACK_LINE(5718)
							j = (cjAcc - jOld);
							HX_STACK_LINE(5718)
							arb->c1->jnAcc = cjAcc;
							HX_STACK_LINE(5718)
							jx = (arb->nx * j);
							HX_STACK_LINE(5718)
							jy = (arb->ny * j);
							HX_STACK_LINE(5718)
							hx::AddEq(arb->b2->velx,(jx * arb->b2->imass));
							HX_STACK_LINE(5718)
							hx::AddEq(arb->b2->vely,(jy * arb->b2->imass));
							HX_STACK_LINE(5718)
							hx::SubEq(arb->b1->velx,(jx * arb->b1->imass));
							HX_STACK_LINE(5718)
							hx::SubEq(arb->b1->vely,(jy * arb->b1->imass));
							HX_STACK_LINE(5718)
							hx::AddEq(arb->b2->angvel,((arb->rn1b * j) * arb->b2->iinertia));
							HX_STACK_LINE(5718)
							hx::SubEq(arb->b1->angvel,((arb->rn1a * j) * arb->b1->iinertia));
						}
					}
					HX_STACK_LINE(5720)
					arbi = arbi->next;
					HX_STACK_LINE(5721)
					if (((bool(fst) && bool((arbi == null()))))){
						HX_STACK_LINE(5722)
						arbi = this->c_arbiters_true->head;
						HX_STACK_LINE(5723)
						fst = false;
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,iterateVel,(void))

Void ZPP_Space_obj::iteratePos( int times){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","iteratePos",0xf7ba66b0,"zpp_nape.space.ZPP_Space.iteratePos","zpp_nape/space/Space.hx",5730,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(times,"times")
		HX_STACK_LINE(5730)
		int _g = (int)0;		HX_STACK_VAR(_g,"_g");
		HX_STACK_LINE(5730)
		while((true)){
			HX_STACK_LINE(5730)
			if ((!(((_g < times))))){
				HX_STACK_LINE(5730)
				break;
			}
			HX_STACK_LINE(5730)
			int i = (_g)++;		HX_STACK_VAR(i,"i");
			HX_STACK_LINE(5731)
			::zpp_nape::util::ZNPNode_ZPP_Constraint pre = null();		HX_STACK_VAR(pre,"pre");
			HX_STACK_LINE(5732)
			{
				HX_STACK_LINE(5733)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = this->live_constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(5734)
				while((true)){
					HX_STACK_LINE(5734)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(5734)
						break;
					}
					HX_STACK_LINE(5735)
					::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
					HX_STACK_LINE(5736)
					{
						HX_STACK_LINE(5737)
						if (((bool(!(con->__velocity)) && bool(con->stiff)))){
							HX_STACK_LINE(5738)
							if ((con->applyImpulsePos())){
								HX_STACK_LINE(5739)
								::zpp_nape::util::ZNPNode_ZPP_Constraint _g1 = this->live_constraints->erase(pre);		HX_STACK_VAR(_g1,"_g1");
								HX_STACK_LINE(5739)
								cx_ite = _g1;
								HX_STACK_LINE(5740)
								con->broken();
								HX_STACK_LINE(5741)
								this->constraintCbBreak(con);
								HX_STACK_LINE(5742)
								if ((con->removeOnBreak)){
									HX_STACK_LINE(5743)
									con->component->sleeping = true;
									HX_STACK_LINE(5744)
									this->midstep = false;
									HX_STACK_LINE(5745)
									if (((con->compound != null()))){
										HX_STACK_LINE(5745)
										con->compound->wrap_constraints->remove(con->outer);
									}
									else{
										HX_STACK_LINE(5746)
										this->wrap_constraints->remove(con->outer);
									}
									HX_STACK_LINE(5747)
									this->midstep = true;
								}
								else{
									HX_STACK_LINE(5749)
									con->active = false;
								}
								HX_STACK_LINE(5750)
								con->clearcache();
								HX_STACK_LINE(5751)
								continue;
							}
						}
						HX_STACK_LINE(5754)
						pre = cx_ite;
					}
					HX_STACK_LINE(5756)
					cx_ite = cx_ite->next;
				}
			}
			HX_STACK_LINE(5759)
			{
				HX_STACK_LINE(5760)
				::zpp_nape::util::ZNPNode_ZPP_ColArbiter arbi = this->c_arbiters_false->head;		HX_STACK_VAR(arbi,"arbi");
				HX_STACK_LINE(5761)
				bool fst = true;		HX_STACK_VAR(fst,"fst");
				HX_STACK_LINE(5762)
				if (((arbi == null()))){
					HX_STACK_LINE(5763)
					arbi = this->c_arbiters_true->head;
					HX_STACK_LINE(5764)
					fst = false;
				}
				HX_STACK_LINE(5766)
				while((true)){
					HX_STACK_LINE(5766)
					if ((!(((arbi != null()))))){
						HX_STACK_LINE(5766)
						break;
					}
					HX_STACK_LINE(5767)
					::zpp_nape::dynamics::ZPP_ColArbiter arb = arbi->elt;		HX_STACK_VAR(arb,"arb");
					HX_STACK_LINE(5770)
					if (((bool(arb->active) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))))){
						HX_STACK_LINE(5771)
						if (((arb->ptype == (int)2))){
							HX_STACK_LINE(5771)
							::zpp_nape::dynamics::ZPP_IContact c = arb->c1;		HX_STACK_VAR(c,"c");
							HX_STACK_LINE(5771)
							Float dx = 0.0;		HX_STACK_VAR(dx,"dx");
							HX_STACK_LINE(5771)
							Float dy = 0.0;		HX_STACK_VAR(dy,"dy");
							HX_STACK_LINE(5771)
							Float r2x = 0.0;		HX_STACK_VAR(r2x,"r2x");
							HX_STACK_LINE(5771)
							Float r2y = 0.0;		HX_STACK_VAR(r2y,"r2y");
							HX_STACK_LINE(5771)
							{
								HX_STACK_LINE(5771)
								r2x = ((arb->b2->axisy * c->lr2x) - (arb->b2->axisx * c->lr2y));
								HX_STACK_LINE(5771)
								r2y = ((c->lr2x * arb->b2->axisx) + (c->lr2y * arb->b2->axisy));
							}
							HX_STACK_LINE(5771)
							{
								HX_STACK_LINE(5771)
								Float t = 1.0;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5771)
								hx::AddEq(r2x,(arb->b2->posx * t));
								HX_STACK_LINE(5771)
								hx::AddEq(r2y,(arb->b2->posy * t));
							}
							HX_STACK_LINE(5771)
							Float r1x = 0.0;		HX_STACK_VAR(r1x,"r1x");
							HX_STACK_LINE(5771)
							Float r1y = 0.0;		HX_STACK_VAR(r1y,"r1y");
							HX_STACK_LINE(5771)
							{
								HX_STACK_LINE(5771)
								r1x = ((arb->b1->axisy * c->lr1x) - (arb->b1->axisx * c->lr1y));
								HX_STACK_LINE(5771)
								r1y = ((c->lr1x * arb->b1->axisx) + (c->lr1y * arb->b1->axisy));
							}
							HX_STACK_LINE(5771)
							{
								HX_STACK_LINE(5771)
								Float t = 1.0;		HX_STACK_VAR(t,"t");
								HX_STACK_LINE(5771)
								hx::AddEq(r1x,(arb->b1->posx * t));
								HX_STACK_LINE(5771)
								hx::AddEq(r1y,(arb->b1->posy * t));
							}
							HX_STACK_LINE(5771)
							Float dx1 = 0.0;		HX_STACK_VAR(dx1,"dx1");
							HX_STACK_LINE(5771)
							Float dy1 = 0.0;		HX_STACK_VAR(dy1,"dy1");
							HX_STACK_LINE(5771)
							{
								HX_STACK_LINE(5771)
								dx1 = (r2x - r1x);
								HX_STACK_LINE(5771)
								dy1 = (r2y - r1y);
							}
							HX_STACK_LINE(5771)
							Float dl = ::Math_obj::sqrt(((dx1 * dx1) + (dy1 * dy1)));		HX_STACK_VAR(dl,"dl");
							HX_STACK_LINE(5771)
							Float r = (arb->radius - ::nape::Config_obj::collisionSlop);		HX_STACK_VAR(r,"r");
							HX_STACK_LINE(5771)
							Float err = (dl - r);		HX_STACK_VAR(err,"err");
							HX_STACK_LINE(5771)
							if (((((dx1 * arb->nx) + (dy1 * arb->ny)) < (int)0))){
								HX_STACK_LINE(5771)
								{
									HX_STACK_LINE(5771)
									dx1 = -(dx1);
									HX_STACK_LINE(5771)
									dy1 = -(dy1);
								}
								HX_STACK_LINE(5771)
								hx::SubEq(err,arb->radius);
							}
							HX_STACK_LINE(5771)
							if (((err < (int)0))){
								HX_STACK_LINE(5771)
								if (((dl < ::nape::Config_obj::epsilon))){
									HX_STACK_LINE(5771)
									if (((arb->b1->smass != 0.0))){
										HX_STACK_LINE(5771)
										hx::AddEq(arb->b1->posx,(::nape::Config_obj::epsilon * (int)10));
									}
									else{
										HX_STACK_LINE(5771)
										hx::AddEq(arb->b2->posx,(::nape::Config_obj::epsilon * (int)10));
									}
								}
								else{
									HX_STACK_LINE(5771)
									{
										HX_STACK_LINE(5771)
										Float t = (Float(1.0) / Float(dl));		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(5771)
										hx::MultEq(dx1,t);
										HX_STACK_LINE(5771)
										hx::MultEq(dy1,t);
									}
									HX_STACK_LINE(5771)
									Float px = (0.5 * ((r1x + r2x)));		HX_STACK_VAR(px,"px");
									HX_STACK_LINE(5771)
									Float py = (0.5 * ((r1y + r2y)));		HX_STACK_VAR(py,"py");
									HX_STACK_LINE(5771)
									Float pen = (dl - r);		HX_STACK_VAR(pen,"pen");
									HX_STACK_LINE(5771)
									{
										HX_STACK_LINE(5771)
										r1x = (px - arb->b1->posx);
										HX_STACK_LINE(5771)
										r1y = (py - arb->b1->posy);
									}
									HX_STACK_LINE(5771)
									{
										HX_STACK_LINE(5771)
										r2x = (px - arb->b2->posx);
										HX_STACK_LINE(5771)
										r2y = (py - arb->b2->posy);
									}
									HX_STACK_LINE(5771)
									Float rn1 = ((dy1 * r1x) - (dx1 * r1y));		HX_STACK_VAR(rn1,"rn1");
									HX_STACK_LINE(5771)
									Float rn2 = ((dy1 * r2x) - (dx1 * r2y));		HX_STACK_VAR(rn2,"rn2");
									HX_STACK_LINE(5771)
									Float K = (((arb->b2->smass + ((rn2 * rn2) * arb->b2->sinertia)) + arb->b1->smass) + ((rn1 * rn1) * arb->b1->sinertia));		HX_STACK_VAR(K,"K");
									HX_STACK_LINE(5771)
									if (((K != (int)0))){
										HX_STACK_LINE(5771)
										Float jn = (Float((-(arb->biasCoef) * pen)) / Float(K));		HX_STACK_VAR(jn,"jn");
										HX_STACK_LINE(5771)
										Float Jx = 0.0;		HX_STACK_VAR(Jx,"Jx");
										HX_STACK_LINE(5771)
										Float Jy = 0.0;		HX_STACK_VAR(Jy,"Jy");
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											Float t = jn;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5771)
											Jx = (dx1 * t);
											HX_STACK_LINE(5771)
											Jy = (dy1 * t);
										}
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											Float t = arb->b1->imass;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5771)
											hx::SubEq(arb->b1->posx,(Jx * t));
											HX_STACK_LINE(5771)
											hx::SubEq(arb->b1->posy,(Jy * t));
										}
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5771)
											Float dr = ((-(rn1) * arb->b1->iinertia) * jn);		HX_STACK_VAR(dr,"dr");
											HX_STACK_LINE(5771)
											hx::AddEq(_this->rot,dr);
											HX_STACK_LINE(5771)
											if ((((dr * dr) > 0.0001))){
												HX_STACK_LINE(5771)
												Float _g1 = ::Math_obj::sin(_this->rot);		HX_STACK_VAR(_g1,"_g1");
												HX_STACK_LINE(5771)
												_this->axisx = _g1;
												HX_STACK_LINE(5771)
												Float _g2 = ::Math_obj::cos(_this->rot);		HX_STACK_VAR(_g2,"_g2");
												HX_STACK_LINE(5771)
												_this->axisy = _g2;
												HX_STACK_LINE(5771)
												Dynamic();
											}
											else{
												HX_STACK_LINE(5771)
												Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
												HX_STACK_LINE(5771)
												Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
												HX_STACK_LINE(5771)
												Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
												HX_STACK_LINE(5771)
												Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
												HX_STACK_LINE(5771)
												_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
												HX_STACK_LINE(5771)
												_this->axisx = nx;
											}
										}
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											Float t = arb->b2->imass;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5771)
											hx::AddEq(arb->b2->posx,(Jx * t));
											HX_STACK_LINE(5771)
											hx::AddEq(arb->b2->posy,(Jy * t));
										}
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5771)
											Float dr = ((rn2 * arb->b2->iinertia) * jn);		HX_STACK_VAR(dr,"dr");
											HX_STACK_LINE(5771)
											hx::AddEq(_this->rot,dr);
											HX_STACK_LINE(5771)
											if ((((dr * dr) > 0.0001))){
												HX_STACK_LINE(5771)
												Float _g3 = ::Math_obj::sin(_this->rot);		HX_STACK_VAR(_g3,"_g3");
												HX_STACK_LINE(5771)
												_this->axisx = _g3;
												HX_STACK_LINE(5771)
												Float _g4 = ::Math_obj::cos(_this->rot);		HX_STACK_VAR(_g4,"_g4");
												HX_STACK_LINE(5771)
												_this->axisy = _g4;
												HX_STACK_LINE(5771)
												Dynamic();
											}
											else{
												HX_STACK_LINE(5771)
												Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
												HX_STACK_LINE(5771)
												Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
												HX_STACK_LINE(5771)
												Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
												HX_STACK_LINE(5771)
												Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
												HX_STACK_LINE(5771)
												_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
												HX_STACK_LINE(5771)
												_this->axisx = nx;
											}
										}
									}
								}
							}
						}
						else{
							HX_STACK_LINE(5771)
							Float gnormx = 0.0;		HX_STACK_VAR(gnormx,"gnormx");
							HX_STACK_LINE(5771)
							Float gnormy = 0.0;		HX_STACK_VAR(gnormy,"gnormy");
							HX_STACK_LINE(5771)
							Float gproj;		HX_STACK_VAR(gproj,"gproj");
							HX_STACK_LINE(5771)
							Float clip1x = 0.0;		HX_STACK_VAR(clip1x,"clip1x");
							HX_STACK_LINE(5771)
							Float clip1y = 0.0;		HX_STACK_VAR(clip1y,"clip1y");
							HX_STACK_LINE(5771)
							Float clip2x = (int)0;		HX_STACK_VAR(clip2x,"clip2x");
							HX_STACK_LINE(5771)
							Float clip2y = (int)0;		HX_STACK_VAR(clip2y,"clip2y");
							HX_STACK_LINE(5771)
							if (((arb->ptype == (int)0))){
								HX_STACK_LINE(5771)
								{
									HX_STACK_LINE(5771)
									gnormx = ((arb->b1->axisy * arb->lnormx) - (arb->b1->axisx * arb->lnormy));
									HX_STACK_LINE(5771)
									gnormy = ((arb->lnormx * arb->b1->axisx) + (arb->lnormy * arb->b1->axisy));
								}
								HX_STACK_LINE(5771)
								gproj = (arb->lproj + (((gnormx * arb->b1->posx) + (gnormy * arb->b1->posy))));
								HX_STACK_LINE(5771)
								{
									HX_STACK_LINE(5771)
									clip1x = ((arb->b2->axisy * arb->c1->lr1x) - (arb->b2->axisx * arb->c1->lr1y));
									HX_STACK_LINE(5771)
									clip1y = ((arb->c1->lr1x * arb->b2->axisx) + (arb->c1->lr1y * arb->b2->axisy));
								}
								HX_STACK_LINE(5771)
								{
									HX_STACK_LINE(5771)
									Float t = 1.0;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5771)
									hx::AddEq(clip1x,(arb->b2->posx * t));
									HX_STACK_LINE(5771)
									hx::AddEq(clip1y,(arb->b2->posy * t));
								}
								HX_STACK_LINE(5771)
								if ((arb->hpc2)){
									HX_STACK_LINE(5771)
									{
										HX_STACK_LINE(5771)
										clip2x = ((arb->b2->axisy * arb->c2->lr1x) - (arb->b2->axisx * arb->c2->lr1y));
										HX_STACK_LINE(5771)
										clip2y = ((arb->c2->lr1x * arb->b2->axisx) + (arb->c2->lr1y * arb->b2->axisy));
									}
									HX_STACK_LINE(5771)
									{
										HX_STACK_LINE(5771)
										Float t = 1.0;		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(5771)
										hx::AddEq(clip2x,(arb->b2->posx * t));
										HX_STACK_LINE(5771)
										hx::AddEq(clip2y,(arb->b2->posy * t));
									}
								}
							}
							else{
								HX_STACK_LINE(5771)
								{
									HX_STACK_LINE(5771)
									gnormx = ((arb->b2->axisy * arb->lnormx) - (arb->b2->axisx * arb->lnormy));
									HX_STACK_LINE(5771)
									gnormy = ((arb->lnormx * arb->b2->axisx) + (arb->lnormy * arb->b2->axisy));
								}
								HX_STACK_LINE(5771)
								gproj = (arb->lproj + (((gnormx * arb->b2->posx) + (gnormy * arb->b2->posy))));
								HX_STACK_LINE(5771)
								{
									HX_STACK_LINE(5771)
									clip1x = ((arb->b1->axisy * arb->c1->lr1x) - (arb->b1->axisx * arb->c1->lr1y));
									HX_STACK_LINE(5771)
									clip1y = ((arb->c1->lr1x * arb->b1->axisx) + (arb->c1->lr1y * arb->b1->axisy));
								}
								HX_STACK_LINE(5771)
								{
									HX_STACK_LINE(5771)
									Float t = 1.0;		HX_STACK_VAR(t,"t");
									HX_STACK_LINE(5771)
									hx::AddEq(clip1x,(arb->b1->posx * t));
									HX_STACK_LINE(5771)
									hx::AddEq(clip1y,(arb->b1->posy * t));
								}
								HX_STACK_LINE(5771)
								if ((arb->hpc2)){
									HX_STACK_LINE(5771)
									{
										HX_STACK_LINE(5771)
										clip2x = ((arb->b1->axisy * arb->c2->lr1x) - (arb->b1->axisx * arb->c2->lr1y));
										HX_STACK_LINE(5771)
										clip2y = ((arb->c2->lr1x * arb->b1->axisx) + (arb->c2->lr1y * arb->b1->axisy));
									}
									HX_STACK_LINE(5771)
									{
										HX_STACK_LINE(5771)
										Float t = 1.0;		HX_STACK_VAR(t,"t");
										HX_STACK_LINE(5771)
										hx::AddEq(clip2x,(arb->b1->posx * t));
										HX_STACK_LINE(5771)
										hx::AddEq(clip2y,(arb->b1->posy * t));
									}
								}
							}
							HX_STACK_LINE(5771)
							Float err1 = ((((clip1x * gnormx) + (clip1y * gnormy)) - gproj) - arb->radius);		HX_STACK_VAR(err1,"err1");
							HX_STACK_LINE(5771)
							hx::AddEq(err1,::nape::Config_obj::collisionSlop);
							HX_STACK_LINE(5771)
							Float err2 = 0.0;		HX_STACK_VAR(err2,"err2");
							HX_STACK_LINE(5771)
							if ((arb->hpc2)){
								HX_STACK_LINE(5771)
								err2 = ((((clip2x * gnormx) + (clip2y * gnormy)) - gproj) - arb->radius);
								HX_STACK_LINE(5771)
								hx::AddEq(err2,::nape::Config_obj::collisionSlop);
							}
							HX_STACK_LINE(5771)
							if (((bool((err1 < (int)0)) || bool((err2 < (int)0))))){
								HX_STACK_LINE(5771)
								if ((arb->rev)){
									HX_STACK_LINE(5771)
									gnormx = -(gnormx);
									HX_STACK_LINE(5771)
									gnormy = -(gnormy);
								}
								HX_STACK_LINE(5771)
								Float c1r1x = 0.0;		HX_STACK_VAR(c1r1x,"c1r1x");
								HX_STACK_LINE(5771)
								Float c1r1y = 0.0;		HX_STACK_VAR(c1r1y,"c1r1y");
								HX_STACK_LINE(5771)
								{
									HX_STACK_LINE(5771)
									c1r1x = (clip1x - arb->b1->posx);
									HX_STACK_LINE(5771)
									c1r1y = (clip1y - arb->b1->posy);
								}
								HX_STACK_LINE(5771)
								Float c1r2x = 0.0;		HX_STACK_VAR(c1r2x,"c1r2x");
								HX_STACK_LINE(5771)
								Float c1r2y = 0.0;		HX_STACK_VAR(c1r2y,"c1r2y");
								HX_STACK_LINE(5771)
								{
									HX_STACK_LINE(5771)
									c1r2x = (clip1x - arb->b2->posx);
									HX_STACK_LINE(5771)
									c1r2y = (clip1y - arb->b2->posy);
								}
								HX_STACK_LINE(5771)
								Float c2r1x = (int)0;		HX_STACK_VAR(c2r1x,"c2r1x");
								HX_STACK_LINE(5771)
								Float c2r1y = (int)0;		HX_STACK_VAR(c2r1y,"c2r1y");
								HX_STACK_LINE(5771)
								Float c2r2x = (int)0;		HX_STACK_VAR(c2r2x,"c2r2x");
								HX_STACK_LINE(5771)
								Float c2r2y = (int)0;		HX_STACK_VAR(c2r2y,"c2r2y");
								HX_STACK_LINE(5771)
								if ((arb->hpc2)){
									HX_STACK_LINE(5771)
									{
										HX_STACK_LINE(5771)
										c2r1x = (clip2x - arb->b1->posx);
										HX_STACK_LINE(5771)
										c2r1y = (clip2y - arb->b1->posy);
									}
									HX_STACK_LINE(5771)
									{
										HX_STACK_LINE(5771)
										c2r2x = (clip2x - arb->b2->posx);
										HX_STACK_LINE(5771)
										c2r2y = (clip2y - arb->b2->posy);
									}
									HX_STACK_LINE(5771)
									Float rn1a = ((gnormy * c1r1x) - (gnormx * c1r1y));		HX_STACK_VAR(rn1a,"rn1a");
									HX_STACK_LINE(5771)
									Float rn1b = ((gnormy * c1r2x) - (gnormx * c1r2y));		HX_STACK_VAR(rn1b,"rn1b");
									HX_STACK_LINE(5771)
									Float rn2a = ((gnormy * c2r1x) - (gnormx * c2r1y));		HX_STACK_VAR(rn2a,"rn2a");
									HX_STACK_LINE(5771)
									Float rn2b = ((gnormy * c2r2x) - (gnormx * c2r2y));		HX_STACK_VAR(rn2b,"rn2b");
									HX_STACK_LINE(5771)
									Float mass_sum = (arb->b1->smass + arb->b2->smass);		HX_STACK_VAR(mass_sum,"mass_sum");
									HX_STACK_LINE(5771)
									{
										HX_STACK_LINE(5771)
										arb->kMassa = ((mass_sum + ((arb->b1->sinertia * rn1a) * rn1a)) + ((arb->b2->sinertia * rn1b) * rn1b));
										HX_STACK_LINE(5771)
										arb->kMassb = ((mass_sum + ((arb->b1->sinertia * rn1a) * rn2a)) + ((arb->b2->sinertia * rn1b) * rn2b));
										HX_STACK_LINE(5771)
										arb->kMassc = ((mass_sum + ((arb->b1->sinertia * rn2a) * rn2a)) + ((arb->b2->sinertia * rn2b) * rn2b));
									}
									HX_STACK_LINE(5771)
									Float Ka = 0.0;		HX_STACK_VAR(Ka,"Ka");
									HX_STACK_LINE(5771)
									Float Kb = 0.0;		HX_STACK_VAR(Kb,"Kb");
									HX_STACK_LINE(5771)
									Float Kc = 0.0;		HX_STACK_VAR(Kc,"Kc");
									HX_STACK_LINE(5771)
									{
										HX_STACK_LINE(5771)
										Ka = arb->kMassa;
										HX_STACK_LINE(5771)
										Kb = arb->kMassb;
										HX_STACK_LINE(5771)
										Kc = arb->kMassc;
									}
									HX_STACK_LINE(5771)
									Float bx = (err1 * arb->biasCoef);		HX_STACK_VAR(bx,"bx");
									HX_STACK_LINE(5771)
									Float by = (err2 * arb->biasCoef);		HX_STACK_VAR(by,"by");
									HX_STACK_LINE(5771)
									while((true)){
										HX_STACK_LINE(5771)
										Float xx = 0.0;		HX_STACK_VAR(xx,"xx");
										HX_STACK_LINE(5771)
										Float xy = 0.0;		HX_STACK_VAR(xy,"xy");
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											xx = bx;
											HX_STACK_LINE(5771)
											xy = by;
											HX_STACK_LINE(5771)
											{
											}
										}
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											xx = -(xx);
											HX_STACK_LINE(5771)
											xy = -(xy);
										}
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											Float det = ((arb->kMassa * arb->kMassc) - (arb->kMassb * arb->kMassb));		HX_STACK_VAR(det,"det");
											HX_STACK_LINE(5771)
											if (((det != det))){
												HX_STACK_LINE(5771)
												Float _g5 = xy = (int)0;		HX_STACK_VAR(_g5,"_g5");
												HX_STACK_LINE(5771)
												xx = _g5;
											}
											else{
												HX_STACK_LINE(5771)
												if (((det == (int)0))){
													HX_STACK_LINE(5771)
													if (((arb->kMassa != (int)0))){
														HX_STACK_LINE(5771)
														hx::DivEq(xx,arb->kMassa);
													}
													else{
														HX_STACK_LINE(5771)
														xx = (int)0;
													}
													HX_STACK_LINE(5771)
													if (((arb->kMassc != (int)0))){
														HX_STACK_LINE(5771)
														hx::DivEq(xy,arb->kMassc);
													}
													else{
														HX_STACK_LINE(5771)
														xy = (int)0;
													}
												}
												else{
													HX_STACK_LINE(5771)
													det = (Float((int)1) / Float(det));
													HX_STACK_LINE(5771)
													Float t = (det * (((arb->kMassc * xx) - (arb->kMassb * xy))));		HX_STACK_VAR(t,"t");
													HX_STACK_LINE(5771)
													xy = (det * (((arb->kMassa * xy) - (arb->kMassb * xx))));
													HX_STACK_LINE(5771)
													xx = t;
												}
											}
										}
										HX_STACK_LINE(5771)
										if (((bool((xx >= (int)0)) && bool((xy >= (int)0))))){
											HX_STACK_LINE(5771)
											{
												HX_STACK_LINE(5771)
												Float t = (((xx + xy)) * arb->b1->imass);		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5771)
												hx::SubEq(arb->b1->posx,(gnormx * t));
												HX_STACK_LINE(5771)
												hx::SubEq(arb->b1->posy,(gnormy * t));
											}
											HX_STACK_LINE(5771)
											{
												HX_STACK_LINE(5771)
												::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5771)
												Float dr = (-(arb->b1->iinertia) * (((rn1a * xx) + (rn2a * xy))));		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5771)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5771)
												if ((((dr * dr) > 0.0001))){
													HX_STACK_LINE(5771)
													Float _g6 = ::Math_obj::sin(_this->rot);		HX_STACK_VAR(_g6,"_g6");
													HX_STACK_LINE(5771)
													_this->axisx = _g6;
													HX_STACK_LINE(5771)
													Float _g7 = ::Math_obj::cos(_this->rot);		HX_STACK_VAR(_g7,"_g7");
													HX_STACK_LINE(5771)
													_this->axisy = _g7;
													HX_STACK_LINE(5771)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5771)
													Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5771)
													Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5771)
													Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5771)
													Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5771)
													_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
													HX_STACK_LINE(5771)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5771)
											{
												HX_STACK_LINE(5771)
												Float t = (((xx + xy)) * arb->b2->imass);		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5771)
												hx::AddEq(arb->b2->posx,(gnormx * t));
												HX_STACK_LINE(5771)
												hx::AddEq(arb->b2->posy,(gnormy * t));
											}
											HX_STACK_LINE(5771)
											{
												HX_STACK_LINE(5771)
												::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5771)
												Float dr = (arb->b2->iinertia * (((rn1b * xx) + (rn2b * xy))));		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5771)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5771)
												if ((((dr * dr) > 0.0001))){
													HX_STACK_LINE(5771)
													Float _g8 = ::Math_obj::sin(_this->rot);		HX_STACK_VAR(_g8,"_g8");
													HX_STACK_LINE(5771)
													_this->axisx = _g8;
													HX_STACK_LINE(5771)
													Float _g9 = ::Math_obj::cos(_this->rot);		HX_STACK_VAR(_g9,"_g9");
													HX_STACK_LINE(5771)
													_this->axisy = _g9;
													HX_STACK_LINE(5771)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5771)
													Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5771)
													Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5771)
													Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5771)
													Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5771)
													_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
													HX_STACK_LINE(5771)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5771)
											break;
										}
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											xx = (Float(-(bx)) / Float(Ka));
											HX_STACK_LINE(5771)
											xy = (int)0;
											HX_STACK_LINE(5771)
											{
											}
										}
										HX_STACK_LINE(5771)
										Float vn2 = ((Kb * xx) + by);		HX_STACK_VAR(vn2,"vn2");
										HX_STACK_LINE(5771)
										if (((bool((xx >= (int)0)) && bool((vn2 >= (int)0))))){
											HX_STACK_LINE(5771)
											{
												HX_STACK_LINE(5771)
												Float t = (((xx + xy)) * arb->b1->imass);		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5771)
												hx::SubEq(arb->b1->posx,(gnormx * t));
												HX_STACK_LINE(5771)
												hx::SubEq(arb->b1->posy,(gnormy * t));
											}
											HX_STACK_LINE(5771)
											{
												HX_STACK_LINE(5771)
												::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5771)
												Float dr = (-(arb->b1->iinertia) * (((rn1a * xx) + (rn2a * xy))));		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5771)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5771)
												if ((((dr * dr) > 0.0001))){
													HX_STACK_LINE(5771)
													Float _g10 = ::Math_obj::sin(_this->rot);		HX_STACK_VAR(_g10,"_g10");
													HX_STACK_LINE(5771)
													_this->axisx = _g10;
													HX_STACK_LINE(5771)
													Float _g11 = ::Math_obj::cos(_this->rot);		HX_STACK_VAR(_g11,"_g11");
													HX_STACK_LINE(5771)
													_this->axisy = _g11;
													HX_STACK_LINE(5771)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5771)
													Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5771)
													Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5771)
													Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5771)
													Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5771)
													_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
													HX_STACK_LINE(5771)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5771)
											{
												HX_STACK_LINE(5771)
												Float t = (((xx + xy)) * arb->b2->imass);		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5771)
												hx::AddEq(arb->b2->posx,(gnormx * t));
												HX_STACK_LINE(5771)
												hx::AddEq(arb->b2->posy,(gnormy * t));
											}
											HX_STACK_LINE(5771)
											{
												HX_STACK_LINE(5771)
												::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5771)
												Float dr = (arb->b2->iinertia * (((rn1b * xx) + (rn2b * xy))));		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5771)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5771)
												if ((((dr * dr) > 0.0001))){
													HX_STACK_LINE(5771)
													Float _g12 = ::Math_obj::sin(_this->rot);		HX_STACK_VAR(_g12,"_g12");
													HX_STACK_LINE(5771)
													_this->axisx = _g12;
													HX_STACK_LINE(5771)
													Float _g13 = ::Math_obj::cos(_this->rot);		HX_STACK_VAR(_g13,"_g13");
													HX_STACK_LINE(5771)
													_this->axisy = _g13;
													HX_STACK_LINE(5771)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5771)
													Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5771)
													Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5771)
													Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5771)
													Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5771)
													_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
													HX_STACK_LINE(5771)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5771)
											break;
										}
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											xx = (int)0;
											HX_STACK_LINE(5771)
											xy = (Float(-(by)) / Float(Kc));
											HX_STACK_LINE(5771)
											{
											}
										}
										HX_STACK_LINE(5771)
										Float vn1 = ((Kb * xy) + bx);		HX_STACK_VAR(vn1,"vn1");
										HX_STACK_LINE(5771)
										if (((bool((xy >= (int)0)) && bool((vn1 >= (int)0))))){
											HX_STACK_LINE(5771)
											{
												HX_STACK_LINE(5771)
												Float t = (((xx + xy)) * arb->b1->imass);		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5771)
												hx::SubEq(arb->b1->posx,(gnormx * t));
												HX_STACK_LINE(5771)
												hx::SubEq(arb->b1->posy,(gnormy * t));
											}
											HX_STACK_LINE(5771)
											{
												HX_STACK_LINE(5771)
												::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5771)
												Float dr = (-(arb->b1->iinertia) * (((rn1a * xx) + (rn2a * xy))));		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5771)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5771)
												if ((((dr * dr) > 0.0001))){
													HX_STACK_LINE(5771)
													Float _g14 = ::Math_obj::sin(_this->rot);		HX_STACK_VAR(_g14,"_g14");
													HX_STACK_LINE(5771)
													_this->axisx = _g14;
													HX_STACK_LINE(5771)
													Float _g15 = ::Math_obj::cos(_this->rot);		HX_STACK_VAR(_g15,"_g15");
													HX_STACK_LINE(5771)
													_this->axisy = _g15;
													HX_STACK_LINE(5771)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5771)
													Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5771)
													Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5771)
													Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5771)
													Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5771)
													_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
													HX_STACK_LINE(5771)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5771)
											{
												HX_STACK_LINE(5771)
												Float t = (((xx + xy)) * arb->b2->imass);		HX_STACK_VAR(t,"t");
												HX_STACK_LINE(5771)
												hx::AddEq(arb->b2->posx,(gnormx * t));
												HX_STACK_LINE(5771)
												hx::AddEq(arb->b2->posy,(gnormy * t));
											}
											HX_STACK_LINE(5771)
											{
												HX_STACK_LINE(5771)
												::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(5771)
												Float dr = (arb->b2->iinertia * (((rn1b * xx) + (rn2b * xy))));		HX_STACK_VAR(dr,"dr");
												HX_STACK_LINE(5771)
												hx::AddEq(_this->rot,dr);
												HX_STACK_LINE(5771)
												if ((((dr * dr) > 0.0001))){
													HX_STACK_LINE(5771)
													Float _g16 = ::Math_obj::sin(_this->rot);		HX_STACK_VAR(_g16,"_g16");
													HX_STACK_LINE(5771)
													_this->axisx = _g16;
													HX_STACK_LINE(5771)
													Float _g17 = ::Math_obj::cos(_this->rot);		HX_STACK_VAR(_g17,"_g17");
													HX_STACK_LINE(5771)
													_this->axisy = _g17;
													HX_STACK_LINE(5771)
													Dynamic();
												}
												else{
													HX_STACK_LINE(5771)
													Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
													HX_STACK_LINE(5771)
													Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
													HX_STACK_LINE(5771)
													Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
													HX_STACK_LINE(5771)
													Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
													HX_STACK_LINE(5771)
													_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
													HX_STACK_LINE(5771)
													_this->axisx = nx;
												}
											}
											HX_STACK_LINE(5771)
											break;
										}
										HX_STACK_LINE(5771)
										break;
									}
								}
								else{
									HX_STACK_LINE(5771)
									Float rn1 = ((gnormy * c1r1x) - (gnormx * c1r1y));		HX_STACK_VAR(rn1,"rn1");
									HX_STACK_LINE(5771)
									Float rn2 = ((gnormy * c1r2x) - (gnormx * c1r2y));		HX_STACK_VAR(rn2,"rn2");
									HX_STACK_LINE(5771)
									Float K = (((arb->b2->smass + ((rn2 * rn2) * arb->b2->sinertia)) + arb->b1->smass) + ((rn1 * rn1) * arb->b1->sinertia));		HX_STACK_VAR(K,"K");
									HX_STACK_LINE(5771)
									if (((K != (int)0))){
										HX_STACK_LINE(5771)
										Float jn = (Float((-(arb->biasCoef) * err1)) / Float(K));		HX_STACK_VAR(jn,"jn");
										HX_STACK_LINE(5771)
										Float Jx = 0.0;		HX_STACK_VAR(Jx,"Jx");
										HX_STACK_LINE(5771)
										Float Jy = 0.0;		HX_STACK_VAR(Jy,"Jy");
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											Float t = jn;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5771)
											Jx = (gnormx * t);
											HX_STACK_LINE(5771)
											Jy = (gnormy * t);
										}
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											Float t = arb->b1->imass;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5771)
											hx::SubEq(arb->b1->posx,(Jx * t));
											HX_STACK_LINE(5771)
											hx::SubEq(arb->b1->posy,(Jy * t));
										}
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											::zpp_nape::phys::ZPP_Body _this = arb->b1;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5771)
											Float dr = ((-(rn1) * arb->b1->iinertia) * jn);		HX_STACK_VAR(dr,"dr");
											HX_STACK_LINE(5771)
											hx::AddEq(_this->rot,dr);
											HX_STACK_LINE(5771)
											if ((((dr * dr) > 0.0001))){
												HX_STACK_LINE(5771)
												Float _g18 = ::Math_obj::sin(_this->rot);		HX_STACK_VAR(_g18,"_g18");
												HX_STACK_LINE(5771)
												_this->axisx = _g18;
												HX_STACK_LINE(5771)
												Float _g19 = ::Math_obj::cos(_this->rot);		HX_STACK_VAR(_g19,"_g19");
												HX_STACK_LINE(5771)
												_this->axisy = _g19;
												HX_STACK_LINE(5771)
												Dynamic();
											}
											else{
												HX_STACK_LINE(5771)
												Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
												HX_STACK_LINE(5771)
												Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
												HX_STACK_LINE(5771)
												Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
												HX_STACK_LINE(5771)
												Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
												HX_STACK_LINE(5771)
												_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
												HX_STACK_LINE(5771)
												_this->axisx = nx;
											}
										}
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											Float t = arb->b2->imass;		HX_STACK_VAR(t,"t");
											HX_STACK_LINE(5771)
											hx::AddEq(arb->b2->posx,(Jx * t));
											HX_STACK_LINE(5771)
											hx::AddEq(arb->b2->posy,(Jy * t));
										}
										HX_STACK_LINE(5771)
										{
											HX_STACK_LINE(5771)
											::zpp_nape::phys::ZPP_Body _this = arb->b2;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5771)
											Float dr = ((rn2 * arb->b2->iinertia) * jn);		HX_STACK_VAR(dr,"dr");
											HX_STACK_LINE(5771)
											hx::AddEq(_this->rot,dr);
											HX_STACK_LINE(5771)
											if ((((dr * dr) > 0.0001))){
												HX_STACK_LINE(5771)
												Float _g20 = ::Math_obj::sin(_this->rot);		HX_STACK_VAR(_g20,"_g20");
												HX_STACK_LINE(5771)
												_this->axisx = _g20;
												HX_STACK_LINE(5771)
												Float _g21 = ::Math_obj::cos(_this->rot);		HX_STACK_VAR(_g21,"_g21");
												HX_STACK_LINE(5771)
												_this->axisy = _g21;
												HX_STACK_LINE(5771)
												Dynamic();
											}
											else{
												HX_STACK_LINE(5771)
												Float d2 = (dr * dr);		HX_STACK_VAR(d2,"d2");
												HX_STACK_LINE(5771)
												Float p = ((int)1 - (0.5 * d2));		HX_STACK_VAR(p,"p");
												HX_STACK_LINE(5771)
												Float m = ((int)1 - (Float((d2 * d2)) / Float((int)8)));		HX_STACK_VAR(m,"m");
												HX_STACK_LINE(5771)
												Float nx = ((((p * _this->axisx) + (dr * _this->axisy))) * m);		HX_STACK_VAR(nx,"nx");
												HX_STACK_LINE(5771)
												_this->axisy = ((((p * _this->axisy) - (dr * _this->axisx))) * m);
												HX_STACK_LINE(5771)
												_this->axisx = nx;
											}
										}
									}
								}
							}
						}
					}
					HX_STACK_LINE(5775)
					arbi = arbi->next;
					HX_STACK_LINE(5776)
					if (((bool(fst) && bool((arbi == null()))))){
						HX_STACK_LINE(5777)
						arbi = this->c_arbiters_true->head;
						HX_STACK_LINE(5778)
						fst = false;
					}
				}
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC1(ZPP_Space_obj,iteratePos,(void))

bool ZPP_Space_obj::group_ignore( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","group_ignore",0x665189c8,"zpp_nape.space.ZPP_Space.group_ignore","zpp_nape/space/Space.hx",5786,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(s1,"s1")
	HX_STACK_ARG(s2,"s2")
	HX_STACK_LINE(5787)
	::zpp_nape::dynamics::ZPP_InteractionGroup g1;		HX_STACK_VAR(g1,"g1");
	HX_STACK_LINE(5787)
	{
		HX_STACK_LINE(5787)
		::zpp_nape::phys::ZPP_Interactor cur = s1;		HX_STACK_VAR(cur,"cur");
		HX_STACK_LINE(5787)
		while((true)){
			HX_STACK_LINE(5787)
			if ((!(((bool((cur != null())) && bool((cur->group == null()))))))){
				HX_STACK_LINE(5787)
				break;
			}
			HX_STACK_LINE(5787)
			if (((cur->ishape != null()))){
				HX_STACK_LINE(5787)
				cur = cur->ishape->body;
			}
			else{
				HX_STACK_LINE(5787)
				if (((cur->icompound != null()))){
					HX_STACK_LINE(5787)
					cur = cur->icompound->compound;
				}
				else{
					HX_STACK_LINE(5787)
					cur = cur->ibody->compound;
				}
			}
		}
		HX_STACK_LINE(5787)
		if (((cur == null()))){
			HX_STACK_LINE(5787)
			g1 = null();
		}
		else{
			HX_STACK_LINE(5787)
			g1 = cur->group;
		}
	}
	HX_STACK_LINE(5788)
	if (((g1 == null()))){
		HX_STACK_LINE(5788)
		return false;
	}
	else{
		HX_STACK_LINE(5790)
		::zpp_nape::dynamics::ZPP_InteractionGroup g2;		HX_STACK_VAR(g2,"g2");
		HX_STACK_LINE(5790)
		{
			HX_STACK_LINE(5790)
			::zpp_nape::phys::ZPP_Interactor cur = s2;		HX_STACK_VAR(cur,"cur");
			HX_STACK_LINE(5790)
			while((true)){
				HX_STACK_LINE(5790)
				if ((!(((bool((cur != null())) && bool((cur->group == null()))))))){
					HX_STACK_LINE(5790)
					break;
				}
				HX_STACK_LINE(5790)
				if (((cur->ishape != null()))){
					HX_STACK_LINE(5790)
					cur = cur->ishape->body;
				}
				else{
					HX_STACK_LINE(5790)
					if (((cur->icompound != null()))){
						HX_STACK_LINE(5790)
						cur = cur->icompound->compound;
					}
					else{
						HX_STACK_LINE(5790)
						cur = cur->ibody->compound;
					}
				}
			}
			HX_STACK_LINE(5790)
			if (((cur == null()))){
				HX_STACK_LINE(5790)
				g2 = null();
			}
			else{
				HX_STACK_LINE(5790)
				g2 = cur->group;
			}
		}
		HX_STACK_LINE(5791)
		if (((g2 == null()))){
			HX_STACK_LINE(5791)
			return false;
		}
		else{
			HX_STACK_LINE(5793)
			bool ret = false;		HX_STACK_VAR(ret,"ret");
			HX_STACK_LINE(5794)
			while((true)){
				HX_STACK_LINE(5794)
				if ((!(((bool((g1 != null())) && bool((g2 != null()))))))){
					HX_STACK_LINE(5794)
					break;
				}
				HX_STACK_LINE(5795)
				if (((g1 == g2))){
					HX_STACK_LINE(5796)
					ret = g1->ignore;
					HX_STACK_LINE(5797)
					break;
				}
				HX_STACK_LINE(5799)
				if (((g1->depth < g2->depth))){
					HX_STACK_LINE(5799)
					g2 = g2->group;
				}
				else{
					HX_STACK_LINE(5800)
					g1 = g1->group;
				}
			}
			HX_STACK_LINE(5802)
			return ret;
		}
	}
	HX_STACK_LINE(5788)
	return false;
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,group_ignore,return )

int ZPP_Space_obj::interactionType( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2,::zpp_nape::phys::ZPP_Body b1,::zpp_nape::phys::ZPP_Body b2){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","interactionType",0x649d58f6,"zpp_nape.space.ZPP_Space.interactionType","zpp_nape/space/Space.hx",5808,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(s1,"s1")
	HX_STACK_ARG(s2,"s2")
	HX_STACK_ARG(b1,"b1")
	HX_STACK_ARG(b2,"b2")
	HX_STACK_LINE(5825)
	bool con_ignore;		HX_STACK_VAR(con_ignore,"con_ignore");
	HX_STACK_LINE(5826)
	{
		HX_STACK_LINE(5827)
		con_ignore = false;
		HX_STACK_LINE(5828)
		{
			HX_STACK_LINE(5829)
			::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = b1->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
			HX_STACK_LINE(5830)
			while((true)){
				HX_STACK_LINE(5830)
				if ((!(((cx_ite != null()))))){
					HX_STACK_LINE(5830)
					break;
				}
				HX_STACK_LINE(5831)
				::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
				HX_STACK_LINE(5833)
				if (((  ((con->ignore)) ? bool(con->pair_exists(b1->id,b2->id)) : bool(false) ))){
					HX_STACK_LINE(5834)
					con_ignore = true;
					HX_STACK_LINE(5835)
					break;
				}
				HX_STACK_LINE(5838)
				cx_ite = cx_ite->next;
			}
		}
	}
	struct _Function_1_1{
		inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5842,0x2b65ed03)
			{
				HX_STACK_LINE(5842)
				::zpp_nape::dynamics::ZPP_InteractionGroup g1;		HX_STACK_VAR(g1,"g1");
				HX_STACK_LINE(5842)
				{
					HX_STACK_LINE(5842)
					::zpp_nape::phys::ZPP_Interactor cur = s1;		HX_STACK_VAR(cur,"cur");
					HX_STACK_LINE(5842)
					while((true)){
						HX_STACK_LINE(5842)
						if ((!(((bool((cur != null())) && bool((cur->group == null()))))))){
							HX_STACK_LINE(5842)
							break;
						}
						HX_STACK_LINE(5842)
						if (((cur->ishape != null()))){
							HX_STACK_LINE(5842)
							cur = cur->ishape->body;
						}
						else{
							HX_STACK_LINE(5842)
							if (((cur->icompound != null()))){
								HX_STACK_LINE(5842)
								cur = cur->icompound->compound;
							}
							else{
								HX_STACK_LINE(5842)
								cur = cur->ibody->compound;
							}
						}
					}
					HX_STACK_LINE(5842)
					if (((cur == null()))){
						HX_STACK_LINE(5842)
						g1 = null();
					}
					else{
						HX_STACK_LINE(5842)
						g1 = cur->group;
					}
				}
				struct _Function_2_1{
					inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::dynamics::ZPP_InteractionGroup &g1){
						HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5842,0x2b65ed03)
						{
							HX_STACK_LINE(5842)
							::zpp_nape::dynamics::ZPP_InteractionGroup g2;		HX_STACK_VAR(g2,"g2");
							HX_STACK_LINE(5842)
							{
								HX_STACK_LINE(5842)
								::zpp_nape::phys::ZPP_Interactor cur = s2;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5842)
								while((true)){
									HX_STACK_LINE(5842)
									if ((!(((bool((cur != null())) && bool((cur->group == null()))))))){
										HX_STACK_LINE(5842)
										break;
									}
									HX_STACK_LINE(5842)
									if (((cur->ishape != null()))){
										HX_STACK_LINE(5842)
										cur = cur->ishape->body;
									}
									else{
										HX_STACK_LINE(5842)
										if (((cur->icompound != null()))){
											HX_STACK_LINE(5842)
											cur = cur->icompound->compound;
										}
										else{
											HX_STACK_LINE(5842)
											cur = cur->ibody->compound;
										}
									}
								}
								HX_STACK_LINE(5842)
								if (((cur == null()))){
									HX_STACK_LINE(5842)
									g2 = null();
								}
								else{
									HX_STACK_LINE(5842)
									g2 = cur->group;
								}
							}
							struct _Function_3_1{
								inline static bool Block( ::zpp_nape::dynamics::ZPP_InteractionGroup &g1,::zpp_nape::dynamics::ZPP_InteractionGroup &g2){
									HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5842,0x2b65ed03)
									{
										HX_STACK_LINE(5842)
										bool ret = false;		HX_STACK_VAR(ret,"ret");
										HX_STACK_LINE(5842)
										while((true)){
											HX_STACK_LINE(5842)
											if ((!(((bool((g1 != null())) && bool((g2 != null()))))))){
												HX_STACK_LINE(5842)
												break;
											}
											HX_STACK_LINE(5842)
											if (((g1 == g2))){
												HX_STACK_LINE(5842)
												ret = g1->ignore;
												HX_STACK_LINE(5842)
												break;
											}
											HX_STACK_LINE(5842)
											if (((g1->depth < g2->depth))){
												HX_STACK_LINE(5842)
												g2 = g2->group;
											}
											else{
												HX_STACK_LINE(5842)
												g1 = g1->group;
											}
										}
										HX_STACK_LINE(5842)
										return ret;
									}
									return null();
								}
							};
							HX_STACK_LINE(5842)
							return (  (((g2 == null()))) ? bool(false) : bool(_Function_3_1::Block(g1,g2)) );
						}
						return null();
					}
				};
				HX_STACK_LINE(5842)
				return (  (((g1 == null()))) ? bool(false) : bool(_Function_2_1::Block(s2,g1)) );
			}
			return null();
		}
	};
	HX_STACK_LINE(5842)
	if (((  ((!(con_ignore))) ? bool(!(_Function_1_1::Block(s2,s1))) : bool(false) ))){
		struct _Function_2_1{
			inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
				HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5843,0x2b65ed03)
				{
					HX_STACK_LINE(5843)
					::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(5843)
					::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
					HX_STACK_LINE(5843)
					return (bool((((int(_this->sensorMask) & int(x->sensorGroup))) != (int)0)) && bool((((int(x->sensorMask) & int(_this->sensorGroup))) != (int)0)));
				}
				return null();
			}
		};
		HX_STACK_LINE(5843)
		if (((bool(((bool(s1->sensorEnabled) || bool(s2->sensorEnabled)))) && bool(_Function_2_1::Block(s2,s1))))){
			HX_STACK_LINE(5844)
			return (int)2;
		}
		else{
			struct _Function_3_1{
				inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
					HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5846,0x2b65ed03)
					{
						HX_STACK_LINE(5846)
						::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5846)
						::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
						HX_STACK_LINE(5846)
						return (bool((((int(_this->fluidMask) & int(x->fluidGroup))) != (int)0)) && bool((((int(x->fluidMask) & int(_this->fluidGroup))) != (int)0)));
					}
					return null();
				}
			};
			HX_STACK_LINE(5846)
			if (((bool((bool(((bool(s1->fluidEnabled) || bool(s2->fluidEnabled)))) && bool(_Function_3_1::Block(s2,s1)))) && bool(!(((bool((bool((bool((b1->imass == (int)0)) && bool((b2->imass == (int)0)))) && bool((b1->iinertia == (int)0)))) && bool((b2->iinertia == (int)0))))))))){
				HX_STACK_LINE(5847)
				return (int)0;
			}
			else{
				struct _Function_4_1{
					inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
						HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5849,0x2b65ed03)
						{
							HX_STACK_LINE(5849)
							::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(5849)
							::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
							HX_STACK_LINE(5849)
							return (bool((((int(_this->collisionMask) & int(x->collisionGroup))) != (int)0)) && bool((((int(x->collisionMask) & int(_this->collisionGroup))) != (int)0)));
						}
						return null();
					}
				};
				HX_STACK_LINE(5849)
				if (((bool(_Function_4_1::Block(s2,s1)) && bool(!(((bool((bool((bool((b1->imass == (int)0)) && bool((b2->imass == (int)0)))) && bool((b1->iinertia == (int)0)))) && bool((b2->iinertia == (int)0))))))))){
					HX_STACK_LINE(5850)
					return (int)1;
				}
				else{
					HX_STACK_LINE(5852)
					return (int)-1;
				}
			}
		}
	}
	else{
		HX_STACK_LINE(5854)
		return (int)-1;
	}
	HX_STACK_LINE(5842)
	return (int)0;
}


HX_DEFINE_DYNAMIC_FUNC4(ZPP_Space_obj,interactionType,return )

::zpp_nape::dynamics::ZPP_Arbiter ZPP_Space_obj::narrowPhase( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2,bool stat,::zpp_nape::dynamics::ZPP_Arbiter in_arb,bool continuous){
	HX_STACK_FRAME("zpp_nape.space.ZPP_Space","narrowPhase",0x3219dfea,"zpp_nape.space.ZPP_Space.narrowPhase","zpp_nape/space/Space.hx",5858,0x2b65ed03)
	HX_STACK_THIS(this)
	HX_STACK_ARG(s1,"s1")
	HX_STACK_ARG(s2,"s2")
	HX_STACK_ARG(stat,"stat")
	HX_STACK_ARG(in_arb,"in_arb")
	HX_STACK_ARG(continuous,"continuous")
	HX_STACK_LINE(5858)
	::zpp_nape::space::ZPP_Space _g = hx::ObjectPtr<OBJ_>(this);		HX_STACK_VAR(_g,"_g");
	HX_STACK_LINE(5861)
	::zpp_nape::dynamics::ZPP_Arbiter ret = null();		HX_STACK_VAR(ret,"ret");
	HX_STACK_LINE(5862)
	::zpp_nape::phys::ZPP_Body b1 = s1->body;		HX_STACK_VAR(b1,"b1");
	HX_STACK_LINE(5863)
	::zpp_nape::phys::ZPP_Body b2 = s2->body;		HX_STACK_VAR(b2,"b2");
	HX_STACK_LINE(5864)
	int itype;		HX_STACK_VAR(itype,"itype");
	HX_STACK_LINE(5864)
	{
		HX_STACK_LINE(5864)
		bool con_ignore;		HX_STACK_VAR(con_ignore,"con_ignore");
		HX_STACK_LINE(5864)
		{
			HX_STACK_LINE(5864)
			con_ignore = false;
			HX_STACK_LINE(5864)
			{
				HX_STACK_LINE(5864)
				::zpp_nape::util::ZNPNode_ZPP_Constraint cx_ite = b1->constraints->head;		HX_STACK_VAR(cx_ite,"cx_ite");
				HX_STACK_LINE(5864)
				while((true)){
					HX_STACK_LINE(5864)
					if ((!(((cx_ite != null()))))){
						HX_STACK_LINE(5864)
						break;
					}
					HX_STACK_LINE(5864)
					::zpp_nape::constraint::ZPP_Constraint con = cx_ite->elt;		HX_STACK_VAR(con,"con");
					HX_STACK_LINE(5864)
					if (((  ((con->ignore)) ? bool(con->pair_exists(b1->id,b2->id)) : bool(false) ))){
						HX_STACK_LINE(5864)
						con_ignore = true;
						HX_STACK_LINE(5864)
						break;
					}
					HX_STACK_LINE(5864)
					cx_ite = cx_ite->next;
				}
			}
		}
		struct _Function_2_1{
			inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
				HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5864,0x2b65ed03)
				{
					HX_STACK_LINE(5864)
					::zpp_nape::dynamics::ZPP_InteractionGroup g1;		HX_STACK_VAR(g1,"g1");
					HX_STACK_LINE(5864)
					{
						HX_STACK_LINE(5864)
						::zpp_nape::phys::ZPP_Interactor cur = s1;		HX_STACK_VAR(cur,"cur");
						HX_STACK_LINE(5864)
						while((true)){
							HX_STACK_LINE(5864)
							if ((!(((bool((cur != null())) && bool((cur->group == null()))))))){
								HX_STACK_LINE(5864)
								break;
							}
							HX_STACK_LINE(5864)
							if (((cur->ishape != null()))){
								HX_STACK_LINE(5864)
								cur = cur->ishape->body;
							}
							else{
								HX_STACK_LINE(5864)
								if (((cur->icompound != null()))){
									HX_STACK_LINE(5864)
									cur = cur->icompound->compound;
								}
								else{
									HX_STACK_LINE(5864)
									cur = cur->ibody->compound;
								}
							}
						}
						HX_STACK_LINE(5864)
						if (((cur == null()))){
							HX_STACK_LINE(5864)
							g1 = null();
						}
						else{
							HX_STACK_LINE(5864)
							g1 = cur->group;
						}
					}
					struct _Function_3_1{
						inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::dynamics::ZPP_InteractionGroup &g1){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5864,0x2b65ed03)
							{
								HX_STACK_LINE(5864)
								::zpp_nape::dynamics::ZPP_InteractionGroup g2;		HX_STACK_VAR(g2,"g2");
								HX_STACK_LINE(5864)
								{
									HX_STACK_LINE(5864)
									::zpp_nape::phys::ZPP_Interactor cur = s2;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(5864)
									while((true)){
										HX_STACK_LINE(5864)
										if ((!(((bool((cur != null())) && bool((cur->group == null()))))))){
											HX_STACK_LINE(5864)
											break;
										}
										HX_STACK_LINE(5864)
										if (((cur->ishape != null()))){
											HX_STACK_LINE(5864)
											cur = cur->ishape->body;
										}
										else{
											HX_STACK_LINE(5864)
											if (((cur->icompound != null()))){
												HX_STACK_LINE(5864)
												cur = cur->icompound->compound;
											}
											else{
												HX_STACK_LINE(5864)
												cur = cur->ibody->compound;
											}
										}
									}
									HX_STACK_LINE(5864)
									if (((cur == null()))){
										HX_STACK_LINE(5864)
										g2 = null();
									}
									else{
										HX_STACK_LINE(5864)
										g2 = cur->group;
									}
								}
								struct _Function_4_1{
									inline static bool Block( ::zpp_nape::dynamics::ZPP_InteractionGroup &g1,::zpp_nape::dynamics::ZPP_InteractionGroup &g2){
										HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5864,0x2b65ed03)
										{
											HX_STACK_LINE(5864)
											bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5864)
											while((true)){
												HX_STACK_LINE(5864)
												if ((!(((bool((g1 != null())) && bool((g2 != null()))))))){
													HX_STACK_LINE(5864)
													break;
												}
												HX_STACK_LINE(5864)
												if (((g1 == g2))){
													HX_STACK_LINE(5864)
													ret1 = g1->ignore;
													HX_STACK_LINE(5864)
													break;
												}
												HX_STACK_LINE(5864)
												if (((g1->depth < g2->depth))){
													HX_STACK_LINE(5864)
													g2 = g2->group;
												}
												else{
													HX_STACK_LINE(5864)
													g1 = g1->group;
												}
											}
											HX_STACK_LINE(5864)
											return ret1;
										}
										return null();
									}
								};
								HX_STACK_LINE(5864)
								return (  (((g2 == null()))) ? bool(false) : bool(_Function_4_1::Block(g1,g2)) );
							}
							return null();
						}
					};
					HX_STACK_LINE(5864)
					return (  (((g1 == null()))) ? bool(false) : bool(_Function_3_1::Block(s2,g1)) );
				}
				return null();
			}
		};
		HX_STACK_LINE(5864)
		if (((  ((!(con_ignore))) ? bool(!(_Function_2_1::Block(s2,s1))) : bool(false) ))){
			struct _Function_3_1{
				inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
					HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5864,0x2b65ed03)
					{
						HX_STACK_LINE(5864)
						::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
						HX_STACK_LINE(5864)
						::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
						HX_STACK_LINE(5864)
						return (bool((((int(_this->sensorMask) & int(x->sensorGroup))) != (int)0)) && bool((((int(x->sensorMask) & int(_this->sensorGroup))) != (int)0)));
					}
					return null();
				}
			};
			HX_STACK_LINE(5864)
			if (((bool(((bool(s1->sensorEnabled) || bool(s2->sensorEnabled)))) && bool(_Function_3_1::Block(s2,s1))))){
				HX_STACK_LINE(5864)
				itype = (int)2;
			}
			else{
				struct _Function_4_1{
					inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
						HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5864,0x2b65ed03)
						{
							HX_STACK_LINE(5864)
							::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(5864)
							::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
							HX_STACK_LINE(5864)
							return (bool((((int(_this->fluidMask) & int(x->fluidGroup))) != (int)0)) && bool((((int(x->fluidMask) & int(_this->fluidGroup))) != (int)0)));
						}
						return null();
					}
				};
				HX_STACK_LINE(5864)
				if (((bool((bool(((bool(s1->fluidEnabled) || bool(s2->fluidEnabled)))) && bool(_Function_4_1::Block(s2,s1)))) && bool(!(((bool((bool((bool((b1->imass == (int)0)) && bool((b2->imass == (int)0)))) && bool((b1->iinertia == (int)0)))) && bool((b2->iinertia == (int)0))))))))){
					HX_STACK_LINE(5864)
					itype = (int)0;
				}
				else{
					struct _Function_5_1{
						inline static bool Block( ::zpp_nape::shape::ZPP_Shape &s2,::zpp_nape::shape::ZPP_Shape &s1){
							HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5864,0x2b65ed03)
							{
								HX_STACK_LINE(5864)
								::zpp_nape::dynamics::ZPP_InteractionFilter _this = s1->filter;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(5864)
								::zpp_nape::dynamics::ZPP_InteractionFilter x = s2->filter;		HX_STACK_VAR(x,"x");
								HX_STACK_LINE(5864)
								return (bool((((int(_this->collisionMask) & int(x->collisionGroup))) != (int)0)) && bool((((int(x->collisionMask) & int(_this->collisionGroup))) != (int)0)));
							}
							return null();
						}
					};
					HX_STACK_LINE(5864)
					if (((bool(_Function_5_1::Block(s2,s1)) && bool(!(((bool((bool((bool((b1->imass == (int)0)) && bool((b2->imass == (int)0)))) && bool((b1->iinertia == (int)0)))) && bool((b2->iinertia == (int)0))))))))){
						HX_STACK_LINE(5864)
						itype = (int)1;
					}
					else{
						HX_STACK_LINE(5864)
						itype = (int)-1;
					}
				}
			}
		}
		else{
			HX_STACK_LINE(5864)
			itype = (int)-1;
		}
	}
	HX_STACK_LINE(5865)
	if (((itype != (int)-1))){
		HX_STACK_LINE(5866)
		::zpp_nape::shape::ZPP_Shape sa;		HX_STACK_VAR(sa,"sa");
		HX_STACK_LINE(5866)
		::zpp_nape::shape::ZPP_Shape sb;		HX_STACK_VAR(sb,"sb");
		HX_STACK_LINE(5867)
		if (((s1->type > s2->type))){
			HX_STACK_LINE(5868)
			sa = s2;
			HX_STACK_LINE(5869)
			sb = s1;
		}
		else{
			HX_STACK_LINE(5871)
			if (((s1->type == s2->type))){
				HX_STACK_LINE(5872)
				if (((s1->id < s2->id))){
					HX_STACK_LINE(5873)
					sa = s1;
					HX_STACK_LINE(5874)
					sb = s2;
				}
				else{
					HX_STACK_LINE(5877)
					sb = s1;
					HX_STACK_LINE(5878)
					sa = s2;
				}
			}
			else{
				HX_STACK_LINE(5882)
				sa = s1;
				HX_STACK_LINE(5883)
				sb = s2;
			}
		}
		HX_STACK_LINE(5885)
		bool reverse = (sa == s2);		HX_STACK_VAR(reverse,"reverse");
		HX_STACK_LINE(5886)
		if (((itype == (int)0))){
			HX_STACK_LINE(5887)
			::zpp_nape::dynamics::ZPP_Arbiter xarb;		HX_STACK_VAR(xarb,"xarb");
			HX_STACK_LINE(5887)
			if (((in_arb == null()))){
				HX_STACK_LINE(5888)
				::zpp_nape::dynamics::ZPP_Arbiter ret1 = null();		HX_STACK_VAR(ret1,"ret1");
				HX_STACK_LINE(5889)
				::zpp_nape::phys::ZPP_Body b;		HX_STACK_VAR(b,"b");
				HX_STACK_LINE(5889)
				if (((b1->arbiters->length < b2->arbiters->length))){
					HX_STACK_LINE(5889)
					b = b1;
				}
				else{
					HX_STACK_LINE(5889)
					b = b2;
				}
				HX_STACK_LINE(5890)
				{
					HX_STACK_LINE(5891)
					::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = b->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
					HX_STACK_LINE(5892)
					while((true)){
						HX_STACK_LINE(5892)
						if ((!(((cx_ite != null()))))){
							HX_STACK_LINE(5892)
							break;
						}
						HX_STACK_LINE(5893)
						::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
						HX_STACK_LINE(5903)
						if (((bool((arb->id == sa->id)) && bool((arb->di == sb->id))))){
							HX_STACK_LINE(5904)
							ret1 = arb;
							HX_STACK_LINE(5905)
							break;
						}
						HX_STACK_LINE(5908)
						cx_ite = cx_ite->next;
					}
				}
				HX_STACK_LINE(5911)
				xarb = ret1;
			}
			else{
				HX_STACK_LINE(5912)
				xarb = in_arb;
			}
			HX_STACK_LINE(5913)
			bool first = (xarb == null());		HX_STACK_VAR(first,"first");
			HX_STACK_LINE(5914)
			::zpp_nape::dynamics::ZPP_FluidArbiter arb;		HX_STACK_VAR(arb,"arb");
			HX_STACK_LINE(5915)
			bool swapped = false;		HX_STACK_VAR(swapped,"swapped");
			HX_STACK_LINE(5916)
			if ((first)){
				HX_STACK_LINE(5917)
				if (((::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool == null()))){
					HX_STACK_LINE(5918)
					::zpp_nape::dynamics::ZPP_FluidArbiter _g1 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(_g1,"_g1");
					HX_STACK_LINE(5918)
					arb = _g1;
				}
				else{
					HX_STACK_LINE(5924)
					arb = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
					HX_STACK_LINE(5925)
					::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = arb->next;
					HX_STACK_LINE(5926)
					arb->next = null();
				}
				HX_STACK_LINE(5931)
				Dynamic();
			}
			else{
				HX_STACK_LINE(5934)
				if (((xarb->fluidarb == null()))){
					HX_STACK_LINE(5935)
					{
						HX_STACK_LINE(5935)
						xarb->cleared = true;
						HX_STACK_LINE(5935)
						{
							HX_STACK_LINE(5935)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(5935)
							{
								HX_STACK_LINE(5935)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5935)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5935)
								bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
								HX_STACK_LINE(5935)
								while((true)){
									HX_STACK_LINE(5935)
									if ((!(((cur != null()))))){
										HX_STACK_LINE(5935)
										break;
									}
									HX_STACK_LINE(5935)
									if (((cur->elt == xarb))){
										HX_STACK_LINE(5935)
										{
											HX_STACK_LINE(5935)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5935)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
											HX_STACK_LINE(5935)
											if (((pre == null()))){
												HX_STACK_LINE(5935)
												old = _this->head;
												HX_STACK_LINE(5935)
												ret2 = old->next;
												HX_STACK_LINE(5935)
												_this->head = ret2;
												HX_STACK_LINE(5935)
												if (((_this->head == null()))){
													HX_STACK_LINE(5935)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5935)
												old = pre->next;
												HX_STACK_LINE(5935)
												ret2 = old->next;
												HX_STACK_LINE(5935)
												pre->next = ret2;
												HX_STACK_LINE(5935)
												if (((ret2 == null()))){
													HX_STACK_LINE(5935)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(5935)
											{
												HX_STACK_LINE(5935)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5935)
												o->elt = null();
												HX_STACK_LINE(5935)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(5935)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5935)
											_this->modified = true;
											HX_STACK_LINE(5935)
											(_this->length)--;
											HX_STACK_LINE(5935)
											_this->pushmod = true;
											HX_STACK_LINE(5935)
											ret2;
										}
										HX_STACK_LINE(5935)
										ret1 = true;
										HX_STACK_LINE(5935)
										break;
									}
									HX_STACK_LINE(5935)
									pre = cur;
									HX_STACK_LINE(5935)
									cur = cur->next;
								}
								HX_STACK_LINE(5935)
								ret1;
							}
						}
						HX_STACK_LINE(5935)
						{
							HX_STACK_LINE(5935)
							::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
							HX_STACK_LINE(5935)
							{
								HX_STACK_LINE(5935)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
								HX_STACK_LINE(5935)
								::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
								HX_STACK_LINE(5935)
								bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
								HX_STACK_LINE(5935)
								while((true)){
									HX_STACK_LINE(5935)
									if ((!(((cur != null()))))){
										HX_STACK_LINE(5935)
										break;
									}
									HX_STACK_LINE(5935)
									if (((cur->elt == xarb))){
										HX_STACK_LINE(5935)
										{
											HX_STACK_LINE(5935)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
											HX_STACK_LINE(5935)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
											HX_STACK_LINE(5935)
											if (((pre == null()))){
												HX_STACK_LINE(5935)
												old = _this->head;
												HX_STACK_LINE(5935)
												ret2 = old->next;
												HX_STACK_LINE(5935)
												_this->head = ret2;
												HX_STACK_LINE(5935)
												if (((_this->head == null()))){
													HX_STACK_LINE(5935)
													_this->pushmod = true;
												}
											}
											else{
												HX_STACK_LINE(5935)
												old = pre->next;
												HX_STACK_LINE(5935)
												ret2 = old->next;
												HX_STACK_LINE(5935)
												pre->next = ret2;
												HX_STACK_LINE(5935)
												if (((ret2 == null()))){
													HX_STACK_LINE(5935)
													_this->pushmod = true;
												}
											}
											HX_STACK_LINE(5935)
											{
												HX_STACK_LINE(5935)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5935)
												o->elt = null();
												HX_STACK_LINE(5935)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
												HX_STACK_LINE(5935)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5935)
											_this->modified = true;
											HX_STACK_LINE(5935)
											(_this->length)--;
											HX_STACK_LINE(5935)
											_this->pushmod = true;
											HX_STACK_LINE(5935)
											ret2;
										}
										HX_STACK_LINE(5935)
										ret1 = true;
										HX_STACK_LINE(5935)
										break;
									}
									HX_STACK_LINE(5935)
									pre = cur;
									HX_STACK_LINE(5935)
									cur = cur->next;
								}
								HX_STACK_LINE(5935)
								ret1;
							}
						}
						HX_STACK_LINE(5935)
						if (((xarb->pair != null()))){
							HX_STACK_LINE(5935)
							xarb->pair->arb = null();
							HX_STACK_LINE(5935)
							xarb->pair = null();
						}
						HX_STACK_LINE(5935)
						xarb->active = false;
						HX_STACK_LINE(5935)
						this->f_arbiters->modified = true;
					}
					HX_STACK_LINE(5936)
					{
						HX_STACK_LINE(5937)
						if (((::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool == null()))){
							HX_STACK_LINE(5938)
							::zpp_nape::dynamics::ZPP_FluidArbiter _g1 = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(_g1,"_g1");
							HX_STACK_LINE(5938)
							arb = _g1;
						}
						else{
							HX_STACK_LINE(5944)
							arb = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
							HX_STACK_LINE(5945)
							::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = arb->next;
							HX_STACK_LINE(5946)
							arb->next = null();
						}
						HX_STACK_LINE(5951)
						Dynamic();
					}
					HX_STACK_LINE(5953)
					arb->intchange = true;
					HX_STACK_LINE(5954)
					first = true;
					HX_STACK_LINE(5955)
					swapped = true;
				}
				else{
					HX_STACK_LINE(5957)
					arb = xarb->fluidarb;
				}
			}
			HX_STACK_LINE(5959)
			::zpp_nape::dynamics::ZPP_Arbiter _g28;		HX_STACK_VAR(_g28,"_g28");
			HX_STACK_LINE(5959)
			{
				HX_STACK_LINE(5960)
				int inttype = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_FLUID;		HX_STACK_VAR(inttype,"inttype");
				HX_STACK_LINE(5961)
				if (((bool((bool(first) || bool((arb->stamp != this->stamp)))) || bool(continuous)))){
					HX_STACK_LINE(5962)
					arb->stamp = this->stamp;
					HX_STACK_LINE(5963)
					if ((::zpp_nape::geom::ZPP_Collide_obj::flowCollide(sa,sb,arb))){
						HX_STACK_LINE(5964)
						if ((first)){
							HX_STACK_LINE(5965)
							{
								HX_STACK_LINE(5965)
								{
									HX_STACK_LINE(5965)
									arb->b1 = s1->body;
									HX_STACK_LINE(5965)
									arb->ws1 = s1;
									HX_STACK_LINE(5965)
									arb->b2 = s2->body;
									HX_STACK_LINE(5965)
									arb->ws2 = s2;
									HX_STACK_LINE(5965)
									arb->id = sa->id;
									HX_STACK_LINE(5965)
									arb->di = sb->id;
									HX_STACK_LINE(5965)
									{
										HX_STACK_LINE(5965)
										::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(5965)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter temp;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(5965)
										{
											HX_STACK_LINE(5965)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5965)
											{
												HX_STACK_LINE(5965)
												if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
													HX_STACK_LINE(5965)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter _g2 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(_g2,"_g2");
													HX_STACK_LINE(5965)
													ret1 = _g2;
												}
												else{
													HX_STACK_LINE(5965)
													ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(5965)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(5965)
													ret1->next = null();
												}
												HX_STACK_LINE(5965)
												Dynamic();
											}
											HX_STACK_LINE(5965)
											ret1->elt = arb;
											HX_STACK_LINE(5965)
											temp = ret1;
										}
										HX_STACK_LINE(5965)
										temp->next = _this->head;
										HX_STACK_LINE(5965)
										_this->head = temp;
										HX_STACK_LINE(5965)
										_this->modified = true;
										HX_STACK_LINE(5965)
										(_this->length)++;
										HX_STACK_LINE(5965)
										arb;
									}
									HX_STACK_LINE(5965)
									{
										HX_STACK_LINE(5965)
										::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(5965)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter temp;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(5965)
										{
											HX_STACK_LINE(5965)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5965)
											{
												HX_STACK_LINE(5965)
												if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
													HX_STACK_LINE(5965)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter _g3 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(_g3,"_g3");
													HX_STACK_LINE(5965)
													ret1 = _g3;
												}
												else{
													HX_STACK_LINE(5965)
													ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(5965)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(5965)
													ret1->next = null();
												}
												HX_STACK_LINE(5965)
												Dynamic();
											}
											HX_STACK_LINE(5965)
											ret1->elt = arb;
											HX_STACK_LINE(5965)
											temp = ret1;
										}
										HX_STACK_LINE(5965)
										temp->next = _this->head;
										HX_STACK_LINE(5965)
										_this->head = temp;
										HX_STACK_LINE(5965)
										_this->modified = true;
										HX_STACK_LINE(5965)
										(_this->length)++;
										HX_STACK_LINE(5965)
										arb;
									}
									HX_STACK_LINE(5965)
									arb->active = true;
									HX_STACK_LINE(5965)
									arb->present = (int)0;
									HX_STACK_LINE(5965)
									arb->cleared = false;
									HX_STACK_LINE(5965)
									arb->sleeping = false;
									HX_STACK_LINE(5965)
									arb->fresh = false;
									HX_STACK_LINE(5965)
									arb->presentable = false;
								}
								HX_STACK_LINE(5965)
								{
									HX_STACK_LINE(5965)
									arb->nx = (int)0;
									HX_STACK_LINE(5965)
									arb->ny = (int)1;
									HX_STACK_LINE(5965)
									{
									}
								}
								HX_STACK_LINE(5965)
								{
									HX_STACK_LINE(5965)
									arb->dampx = (int)0;
									HX_STACK_LINE(5965)
									arb->dampy = (int)0;
									HX_STACK_LINE(5965)
									{
									}
								}
								HX_STACK_LINE(5965)
								arb->adamp = 0.0;
							}
							HX_STACK_LINE(5966)
							{
								HX_STACK_LINE(5966)
								::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this = this->f_arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(5966)
								::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp;		HX_STACK_VAR(temp,"temp");
								HX_STACK_LINE(5966)
								{
									HX_STACK_LINE(5966)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(5966)
									{
										HX_STACK_LINE(5966)
										if (((::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool == null()))){
											HX_STACK_LINE(5966)
											::zpp_nape::util::ZNPNode_ZPP_FluidArbiter _g4 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(_g4,"_g4");
											HX_STACK_LINE(5966)
											ret1 = _g4;
										}
										else{
											HX_STACK_LINE(5966)
											ret1 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
											HX_STACK_LINE(5966)
											::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(5966)
											ret1->next = null();
										}
										HX_STACK_LINE(5966)
										Dynamic();
									}
									HX_STACK_LINE(5966)
									ret1->elt = arb;
									HX_STACK_LINE(5966)
									temp = ret1;
								}
								HX_STACK_LINE(5966)
								temp->next = _this->head;
								HX_STACK_LINE(5966)
								_this->head = temp;
								HX_STACK_LINE(5966)
								_this->modified = true;
								HX_STACK_LINE(5966)
								(_this->length)++;
								HX_STACK_LINE(5966)
								arb;
							}
							HX_STACK_LINE(5967)
							arb->fresh = !(swapped);
						}
						else{
							HX_STACK_LINE(5970)
							arb->fresh = (bool((arb->up_stamp < (this->stamp - (int)1))) || bool((bool((arb->endGenerated == this->stamp)) && bool(continuous))));
						}
						HX_STACK_LINE(5972)
						arb->up_stamp = arb->stamp;
						HX_STACK_LINE(5973)
						if (((bool(arb->fresh) || bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))){
							HX_STACK_LINE(5974)
							arb->immState = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
							HX_STACK_LINE(5975)
							bool anyimpure = false;		HX_STACK_VAR(anyimpure,"anyimpure");
							HX_STACK_LINE(5976)
							::zpp_nape::shape::ZPP_Shape arbs1;		HX_STACK_VAR(arbs1,"arbs1");
							HX_STACK_LINE(5976)
							if (((arb->ws1->id > arb->ws2->id))){
								HX_STACK_LINE(5976)
								arbs1 = arb->ws2;
							}
							else{
								HX_STACK_LINE(5976)
								arbs1 = arb->ws1;
							}
							HX_STACK_LINE(5977)
							::zpp_nape::shape::ZPP_Shape arbs2;		HX_STACK_VAR(arbs2,"arbs2");
							HX_STACK_LINE(5977)
							if (((arb->ws1->id > arb->ws2->id))){
								HX_STACK_LINE(5977)
								arbs2 = arb->ws1;
							}
							else{
								HX_STACK_LINE(5977)
								arbs2 = arb->ws2;
							}
							HX_STACK_LINE(5978)
							{
								HX_STACK_LINE(5978)
								{
									HX_STACK_LINE(5978)
									::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(5978)
									{
										HX_STACK_LINE(5978)
										while((true)){
											HX_STACK_LINE(5978)
											if ((!((!(((_this->head == null()))))))){
												HX_STACK_LINE(5978)
												break;
											}
											HX_STACK_LINE(5978)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5978)
											_this->head = ret1->next;
											HX_STACK_LINE(5978)
											{
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5978)
												o->elt = null();
												HX_STACK_LINE(5978)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5978)
											if (((_this->head == null()))){
												HX_STACK_LINE(5978)
												_this->pushmod = true;
											}
											HX_STACK_LINE(5978)
											_this->modified = true;
											HX_STACK_LINE(5978)
											(_this->length)--;
										}
										HX_STACK_LINE(5978)
										_this->pushmod = true;
									}
								}
								HX_STACK_LINE(5978)
								{
									HX_STACK_LINE(5978)
									::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(5978)
									{
										HX_STACK_LINE(5978)
										while((true)){
											HX_STACK_LINE(5978)
											if ((!((!(((_this->head == null()))))))){
												HX_STACK_LINE(5978)
												break;
											}
											HX_STACK_LINE(5978)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(5978)
											_this->head = ret1->next;
											HX_STACK_LINE(5978)
											{
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
												HX_STACK_LINE(5978)
												o->elt = null();
												HX_STACK_LINE(5978)
												o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
											}
											HX_STACK_LINE(5978)
											if (((_this->head == null()))){
												HX_STACK_LINE(5978)
												_this->pushmod = true;
											}
											HX_STACK_LINE(5978)
											_this->modified = true;
											HX_STACK_LINE(5978)
											(_this->length)--;
										}
										HX_STACK_LINE(5978)
										_this->pushmod = true;
									}
								}
								HX_STACK_LINE(5978)
								if (((arbs1->cbSet != null()))){
									HX_STACK_LINE(5978)
									::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(5978)
									::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(5978)
									{
										HX_STACK_LINE(5978)
										::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(5978)
										{
											HX_STACK_LINE(5978)
											if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor _g5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g5,"_g5");
												HX_STACK_LINE(5978)
												ret1 = _g5;
											}
											else{
												HX_STACK_LINE(5978)
												ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(5978)
												ret1->next = null();
											}
											HX_STACK_LINE(5978)
											Dynamic();
										}
										HX_STACK_LINE(5978)
										ret1->elt = arbs1;
										HX_STACK_LINE(5978)
										temp = ret1;
									}
									HX_STACK_LINE(5978)
									temp->next = _this->head;
									HX_STACK_LINE(5978)
									_this->head = temp;
									HX_STACK_LINE(5978)
									_this->modified = true;
									HX_STACK_LINE(5978)
									(_this->length)++;
									HX_STACK_LINE(5978)
									arbs1;
								}
								HX_STACK_LINE(5978)
								if (((arbs1->body->cbSet != null()))){
									HX_STACK_LINE(5978)
									::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(5978)
									::zpp_nape::phys::ZPP_Interactor o = arbs1->body;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5978)
									::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(5978)
									{
										HX_STACK_LINE(5978)
										::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(5978)
										{
											HX_STACK_LINE(5978)
											if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor _g6 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g6,"_g6");
												HX_STACK_LINE(5978)
												ret1 = _g6;
											}
											else{
												HX_STACK_LINE(5978)
												ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(5978)
												ret1->next = null();
											}
											HX_STACK_LINE(5978)
											Dynamic();
										}
										HX_STACK_LINE(5978)
										ret1->elt = o;
										HX_STACK_LINE(5978)
										temp = ret1;
									}
									HX_STACK_LINE(5978)
									temp->next = _this->head;
									HX_STACK_LINE(5978)
									_this->head = temp;
									HX_STACK_LINE(5978)
									_this->modified = true;
									HX_STACK_LINE(5978)
									(_this->length)++;
									HX_STACK_LINE(5978)
									o;
								}
								HX_STACK_LINE(5978)
								if (((arbs2->cbSet != null()))){
									HX_STACK_LINE(5978)
									::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(5978)
									::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(5978)
									{
										HX_STACK_LINE(5978)
										::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(5978)
										{
											HX_STACK_LINE(5978)
											if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor _g7 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g7,"_g7");
												HX_STACK_LINE(5978)
												ret1 = _g7;
											}
											else{
												HX_STACK_LINE(5978)
												ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(5978)
												ret1->next = null();
											}
											HX_STACK_LINE(5978)
											Dynamic();
										}
										HX_STACK_LINE(5978)
										ret1->elt = arbs2;
										HX_STACK_LINE(5978)
										temp = ret1;
									}
									HX_STACK_LINE(5978)
									temp->next = _this->head;
									HX_STACK_LINE(5978)
									_this->head = temp;
									HX_STACK_LINE(5978)
									_this->modified = true;
									HX_STACK_LINE(5978)
									(_this->length)++;
									HX_STACK_LINE(5978)
									arbs2;
								}
								HX_STACK_LINE(5978)
								if (((arbs2->body->cbSet != null()))){
									HX_STACK_LINE(5978)
									::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(5978)
									::zpp_nape::phys::ZPP_Interactor o = arbs2->body;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(5978)
									::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(5978)
									{
										HX_STACK_LINE(5978)
										::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(5978)
										{
											HX_STACK_LINE(5978)
											if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor _g8 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g8,"_g8");
												HX_STACK_LINE(5978)
												ret1 = _g8;
											}
											else{
												HX_STACK_LINE(5978)
												ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(5978)
												ret1->next = null();
											}
											HX_STACK_LINE(5978)
											Dynamic();
										}
										HX_STACK_LINE(5978)
										ret1->elt = o;
										HX_STACK_LINE(5978)
										temp = ret1;
									}
									HX_STACK_LINE(5978)
									temp->next = _this->head;
									HX_STACK_LINE(5978)
									_this->head = temp;
									HX_STACK_LINE(5978)
									_this->modified = true;
									HX_STACK_LINE(5978)
									(_this->length)++;
									HX_STACK_LINE(5978)
									o;
								}
								HX_STACK_LINE(5978)
								::zpp_nape::phys::ZPP_Compound c1 = arbs1->body->compound;		HX_STACK_VAR(c1,"c1");
								HX_STACK_LINE(5978)
								::zpp_nape::phys::ZPP_Compound c2 = arbs2->body->compound;		HX_STACK_VAR(c2,"c2");
								HX_STACK_LINE(5978)
								while((true)){
									HX_STACK_LINE(5978)
									if ((!(((c1 != c2))))){
										HX_STACK_LINE(5978)
										break;
									}
									HX_STACK_LINE(5978)
									int d1;		HX_STACK_VAR(d1,"d1");
									HX_STACK_LINE(5978)
									if (((c1 == null()))){
										HX_STACK_LINE(5978)
										d1 = (int)0;
									}
									else{
										HX_STACK_LINE(5978)
										d1 = c1->depth;
									}
									HX_STACK_LINE(5978)
									int d2;		HX_STACK_VAR(d2,"d2");
									HX_STACK_LINE(5978)
									if (((c2 == null()))){
										HX_STACK_LINE(5978)
										d2 = (int)0;
									}
									else{
										HX_STACK_LINE(5978)
										d2 = c2->depth;
									}
									HX_STACK_LINE(5978)
									if (((d1 < d2))){
										HX_STACK_LINE(5978)
										if (((c2->cbSet != null()))){
											HX_STACK_LINE(5978)
											::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5978)
											::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
											HX_STACK_LINE(5978)
											{
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5978)
												{
													HX_STACK_LINE(5978)
													if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
														HX_STACK_LINE(5978)
														::zpp_nape::util::ZNPNode_ZPP_Interactor _g9 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g9,"_g9");
														HX_STACK_LINE(5978)
														ret1 = _g9;
													}
													else{
														HX_STACK_LINE(5978)
														ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
														HX_STACK_LINE(5978)
														::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(5978)
														ret1->next = null();
													}
													HX_STACK_LINE(5978)
													Dynamic();
												}
												HX_STACK_LINE(5978)
												ret1->elt = c2;
												HX_STACK_LINE(5978)
												temp = ret1;
											}
											HX_STACK_LINE(5978)
											temp->next = _this->head;
											HX_STACK_LINE(5978)
											_this->head = temp;
											HX_STACK_LINE(5978)
											_this->modified = true;
											HX_STACK_LINE(5978)
											(_this->length)++;
											HX_STACK_LINE(5978)
											c2;
										}
										HX_STACK_LINE(5978)
										c2 = c2->compound;
									}
									else{
										HX_STACK_LINE(5978)
										if (((c1->cbSet != null()))){
											HX_STACK_LINE(5978)
											::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(5978)
											::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
											HX_STACK_LINE(5978)
											{
												HX_STACK_LINE(5978)
												::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(5978)
												{
													HX_STACK_LINE(5978)
													if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
														HX_STACK_LINE(5978)
														::zpp_nape::util::ZNPNode_ZPP_Interactor _g10 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g10,"_g10");
														HX_STACK_LINE(5978)
														ret1 = _g10;
													}
													else{
														HX_STACK_LINE(5978)
														ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
														HX_STACK_LINE(5978)
														::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(5978)
														ret1->next = null();
													}
													HX_STACK_LINE(5978)
													Dynamic();
												}
												HX_STACK_LINE(5978)
												ret1->elt = c1;
												HX_STACK_LINE(5978)
												temp = ret1;
											}
											HX_STACK_LINE(5978)
											temp->next = _this->head;
											HX_STACK_LINE(5978)
											_this->head = temp;
											HX_STACK_LINE(5978)
											_this->modified = true;
											HX_STACK_LINE(5978)
											(_this->length)++;
											HX_STACK_LINE(5978)
											c1;
										}
										HX_STACK_LINE(5978)
										c1 = c1->compound;
									}
								}
							}
							HX_STACK_LINE(5979)
							{
								HX_STACK_LINE(5980)
								::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = this->mrca1->head;		HX_STACK_VAR(cx_ite,"cx_ite");
								HX_STACK_LINE(5981)
								while((true)){
									HX_STACK_LINE(5981)
									if ((!(((cx_ite != null()))))){
										HX_STACK_LINE(5981)
										break;
									}
									HX_STACK_LINE(5982)
									::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;		HX_STACK_VAR(i1,"i1");
									HX_STACK_LINE(5984)
									{
										HX_STACK_LINE(5985)
										::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca2->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
										HX_STACK_LINE(5986)
										while((true)){
											HX_STACK_LINE(5986)
											if ((!(((cx_ite1 != null()))))){
												HX_STACK_LINE(5986)
												break;
											}
											HX_STACK_LINE(5987)
											::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;		HX_STACK_VAR(i2,"i2");
											HX_STACK_LINE(5988)
											{
												HX_STACK_LINE(5989)
												::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
												HX_STACK_LINE(5990)
												::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
												struct _Function_12_1{
													inline static bool Block( ::zpp_nape::callbacks::ZPP_CbSet &cb2,::zpp_nape::callbacks::ZPP_CbSet &cb1){
														HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",5999,0x2b65ed03)
														{
															HX_STACK_LINE(5999)
															::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(5999)
															{
																HX_STACK_LINE(5999)
																::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(5999)
																::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
																HX_STACK_LINE(5999)
																if (((cb1->cbpairs->length < cb2->cbpairs->length))){
																	HX_STACK_LINE(5999)
																	pairs = cb1->cbpairs;
																}
																else{
																	HX_STACK_LINE(5999)
																	pairs = cb2->cbpairs;
																}
																HX_STACK_LINE(5999)
																{
																	HX_STACK_LINE(5999)
																	::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																	HX_STACK_LINE(5999)
																	while((true)){
																		HX_STACK_LINE(5999)
																		if ((!(((cx_ite2 != null()))))){
																			HX_STACK_LINE(5999)
																			break;
																		}
																		HX_STACK_LINE(5999)
																		::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																		HX_STACK_LINE(5999)
																		if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																			HX_STACK_LINE(5999)
																			ret1 = p;
																			HX_STACK_LINE(5999)
																			break;
																		}
																		HX_STACK_LINE(5999)
																		cx_ite2 = cx_ite2->next;
																	}
																}
																HX_STACK_LINE(5999)
																if (((ret1 == null()))){
																	HX_STACK_LINE(5999)
																	::zpp_nape::callbacks::ZPP_CbSetPair _g12;		HX_STACK_VAR(_g12,"_g12");
																	HX_STACK_LINE(5999)
																	{
																		HX_STACK_LINE(5999)
																		::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																		HX_STACK_LINE(5999)
																		{
																			HX_STACK_LINE(5999)
																			if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																				HX_STACK_LINE(5999)
																				::zpp_nape::callbacks::ZPP_CbSetPair _g11 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g11,"_g11");
																				HX_STACK_LINE(5999)
																				ret2 = _g11;
																			}
																			else{
																				HX_STACK_LINE(5999)
																				ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																				HX_STACK_LINE(5999)
																				::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																				HX_STACK_LINE(5999)
																				ret2->next = null();
																			}
																			HX_STACK_LINE(5999)
																			ret2->zip_listeners = true;
																		}
																		HX_STACK_LINE(5999)
																		if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																			HX_STACK_LINE(5999)
																			ret2->a = cb1;
																			HX_STACK_LINE(5999)
																			ret2->b = cb2;
																		}
																		else{
																			HX_STACK_LINE(5999)
																			ret2->a = cb2;
																			HX_STACK_LINE(5999)
																			ret2->b = cb1;
																		}
																		HX_STACK_LINE(5999)
																		_g12 = ret2;
																	}
																	HX_STACK_LINE(5999)
																	ret1 = _g12;
																	HX_STACK_LINE(5999)
																	cb1->cbpairs->add(ret1);
																	HX_STACK_LINE(5999)
																	if (((cb2 != cb1))){
																		HX_STACK_LINE(5999)
																		cb2->cbpairs->add(ret1);
																	}
																}
																HX_STACK_LINE(5999)
																if ((ret1->zip_listeners)){
																	HX_STACK_LINE(5999)
																	ret1->zip_listeners = false;
																	HX_STACK_LINE(5999)
																	ret1->__validate();
																}
																HX_STACK_LINE(5999)
																_this = ret1;
															}
															HX_STACK_LINE(5999)
															return (_this->listeners->head == null());
														}
														return null();
													}
												};
												HX_STACK_LINE(5999)
												if ((_Function_12_1::Block(cb2,cb1))){
													HX_STACK_LINE(6000)
													cx_ite1 = cx_ite1->next;
													HX_STACK_LINE(6001)
													continue;
												}
												HX_STACK_LINE(6003)
												::zpp_nape::space::ZPP_CallbackSet callbackset = null();		HX_STACK_VAR(callbackset,"callbackset");
												HX_STACK_LINE(6004)
												::zpp_nape::space::ZPP_CallbackSet ncallbackset = null();		HX_STACK_VAR(ncallbackset,"ncallbackset");
												HX_STACK_LINE(6005)
												{
													HX_STACK_LINE(6005)
													::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = this->prelisteners;		HX_STACK_VAR(_this,"_this");
													HX_STACK_LINE(6005)
													{
														HX_STACK_LINE(6005)
														while((true)){
															HX_STACK_LINE(6005)
															if ((!((!(((_this->head == null()))))))){
																HX_STACK_LINE(6005)
																break;
															}
															HX_STACK_LINE(6005)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(6005)
															_this->head = ret1->next;
															HX_STACK_LINE(6005)
															{
																HX_STACK_LINE(6005)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener o = ret1;		HX_STACK_VAR(o,"o");
																HX_STACK_LINE(6005)
																o->elt = null();
																HX_STACK_LINE(6005)
																o->next = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
																HX_STACK_LINE(6005)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = o;
															}
															HX_STACK_LINE(6005)
															if (((_this->head == null()))){
																HX_STACK_LINE(6005)
																_this->pushmod = true;
															}
															HX_STACK_LINE(6005)
															_this->modified = true;
															HX_STACK_LINE(6005)
															(_this->length)--;
														}
														HX_STACK_LINE(6005)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6006)
												::zpp_nape::util::ZNPNode_ZPP_InteractionListener lite = null();		HX_STACK_VAR(lite,"lite");
												HX_STACK_LINE(6007)
												{
													HX_STACK_LINE(6007)
													int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_PRE;		HX_STACK_VAR(event,"event");
													HX_STACK_LINE(6007)
													{
														HX_STACK_LINE(6007)
														::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(6007)
														{
															HX_STACK_LINE(6007)
															::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
															HX_STACK_LINE(6007)
															::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
															HX_STACK_LINE(6007)
															if (((cb1->cbpairs->length < cb2->cbpairs->length))){
																HX_STACK_LINE(6007)
																pairs = cb1->cbpairs;
															}
															else{
																HX_STACK_LINE(6007)
																pairs = cb2->cbpairs;
															}
															HX_STACK_LINE(6007)
															{
																HX_STACK_LINE(6007)
																::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(6007)
																while((true)){
																	HX_STACK_LINE(6007)
																	if ((!(((cx_ite2 != null()))))){
																		HX_STACK_LINE(6007)
																		break;
																	}
																	HX_STACK_LINE(6007)
																	::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																	HX_STACK_LINE(6007)
																	if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																		HX_STACK_LINE(6007)
																		ret1 = p;
																		HX_STACK_LINE(6007)
																		break;
																	}
																	HX_STACK_LINE(6007)
																	cx_ite2 = cx_ite2->next;
																}
															}
															HX_STACK_LINE(6007)
															if (((ret1 == null()))){
																HX_STACK_LINE(6007)
																::zpp_nape::callbacks::ZPP_CbSetPair _g14;		HX_STACK_VAR(_g14,"_g14");
																HX_STACK_LINE(6007)
																{
																	HX_STACK_LINE(6007)
																	::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																	HX_STACK_LINE(6007)
																	{
																		HX_STACK_LINE(6007)
																		if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																			HX_STACK_LINE(6007)
																			::zpp_nape::callbacks::ZPP_CbSetPair _g13 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g13,"_g13");
																			HX_STACK_LINE(6007)
																			ret2 = _g13;
																		}
																		else{
																			HX_STACK_LINE(6007)
																			ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																			HX_STACK_LINE(6007)
																			::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																			HX_STACK_LINE(6007)
																			ret2->next = null();
																		}
																		HX_STACK_LINE(6007)
																		ret2->zip_listeners = true;
																	}
																	HX_STACK_LINE(6007)
																	if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																		HX_STACK_LINE(6007)
																		ret2->a = cb1;
																		HX_STACK_LINE(6007)
																		ret2->b = cb2;
																	}
																	else{
																		HX_STACK_LINE(6007)
																		ret2->a = cb2;
																		HX_STACK_LINE(6007)
																		ret2->b = cb1;
																	}
																	HX_STACK_LINE(6007)
																	_g14 = ret2;
																}
																HX_STACK_LINE(6007)
																ret1 = _g14;
																HX_STACK_LINE(6007)
																cb1->cbpairs->add(ret1);
																HX_STACK_LINE(6007)
																if (((cb2 != cb1))){
																	HX_STACK_LINE(6007)
																	cb2->cbpairs->add(ret1);
																}
															}
															HX_STACK_LINE(6007)
															if ((ret1->zip_listeners)){
																HX_STACK_LINE(6007)
																ret1->zip_listeners = false;
																HX_STACK_LINE(6007)
																ret1->__validate();
															}
															HX_STACK_LINE(6007)
															_this = ret1;
														}
														HX_STACK_LINE(6007)
														{
															HX_STACK_LINE(6007)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = _this->listeners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6007)
															while((true)){
																HX_STACK_LINE(6007)
																if ((!(((cx_ite2 != null()))))){
																	HX_STACK_LINE(6007)
																	break;
																}
																HX_STACK_LINE(6007)
																::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
																HX_STACK_LINE(6007)
																if (((x->event == event))){
																	HX_STACK_LINE(6008)
																	if (((((int(x->itype) & int(inttype))) != (int)0))){
																		HX_STACK_LINE(6009)
																		::zpp_nape::util::ZNPNode_ZPP_InteractionListener _g17;		HX_STACK_VAR(_g17,"_g17");
																		HX_STACK_LINE(6009)
																		{
																			HX_STACK_LINE(6009)
																			::zpp_nape::util::ZNPList_ZPP_InteractionListener _this1 = _g->prelisteners;		HX_STACK_VAR(_this1,"_this1");
																			HX_STACK_LINE(6009)
																			::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp;		HX_STACK_VAR(temp,"temp");
																			HX_STACK_LINE(6009)
																			{
																				HX_STACK_LINE(6009)
																				::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1;		HX_STACK_VAR(ret1,"ret1");
																				HX_STACK_LINE(6009)
																				{
																					HX_STACK_LINE(6009)
																					if (((::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool == null()))){
																						HX_STACK_LINE(6009)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener _g15 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__new();		HX_STACK_VAR(_g15,"_g15");
																						HX_STACK_LINE(6009)
																						ret1 = _g15;
																					}
																					else{
																						HX_STACK_LINE(6009)
																						ret1 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
																						HX_STACK_LINE(6009)
																						::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret1->next;
																						HX_STACK_LINE(6009)
																						ret1->next = null();
																					}
																					HX_STACK_LINE(6009)
																					Dynamic();
																				}
																				HX_STACK_LINE(6009)
																				ret1->elt = x;
																				HX_STACK_LINE(6009)
																				temp = ret1;
																			}
																			HX_STACK_LINE(6009)
																			if (((lite == null()))){
																				HX_STACK_LINE(6009)
																				temp->next = _this1->head;
																				HX_STACK_LINE(6009)
																				_this1->head = temp;
																			}
																			else{
																				HX_STACK_LINE(6009)
																				temp->next = lite->next;
																				HX_STACK_LINE(6009)
																				lite->next = temp;
																			}
																			HX_STACK_LINE(6009)
																			bool _g16 = _this1->modified = true;		HX_STACK_VAR(_g16,"_g16");
																			HX_STACK_LINE(6009)
																			_this1->pushmod = _g16;
																			HX_STACK_LINE(6009)
																			(_this1->length)++;
																			HX_STACK_LINE(6009)
																			_g17 = temp;
																		}
																		HX_STACK_LINE(6009)
																		lite = _g17;
																		HX_STACK_LINE(6010)
																		anyimpure = (bool(anyimpure) || bool(!(x->pure)));
																	}
																}
																HX_STACK_LINE(6007)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
												}
												HX_STACK_LINE(6013)
												if (((this->prelisteners->head == null()))){
													HX_STACK_LINE(6014)
													cx_ite1 = cx_ite1->next;
													HX_STACK_LINE(6015)
													continue;
												}
												HX_STACK_LINE(6017)
												::zpp_nape::space::ZPP_CallbackSet _g18 = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(_g18,"_g18");
												HX_STACK_LINE(6017)
												callbackset = _g18;
												HX_STACK_LINE(6018)
												if (((callbackset == null()))){
													HX_STACK_LINE(6019)
													::zpp_nape::space::ZPP_CallbackSet _g19 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);		HX_STACK_VAR(_g19,"_g19");
													HX_STACK_LINE(6019)
													ncallbackset = _g19;
													HX_STACK_LINE(6020)
													this->add_callbackset(ncallbackset);
												}
												HX_STACK_LINE(6022)
												if (((bool((callbackset == null())) || bool((bool(((bool((callbackset->FLUIDstamp != this->stamp)) || bool(continuous)))) && bool((((int(callbackset->FLUIDstate) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))))){
													HX_STACK_LINE(6023)
													if (((ncallbackset != null()))){
														HX_STACK_LINE(6023)
														callbackset = ncallbackset;
													}
													HX_STACK_LINE(6024)
													if (((callbackset != null()))){
														HX_STACK_LINE(6026)
														::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(6027)
														while((true)){
															HX_STACK_LINE(6027)
															if ((!(((cx_ite2 != null()))))){
																HX_STACK_LINE(6027)
																break;
															}
															HX_STACK_LINE(6028)
															::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
															HX_STACK_LINE(6030)
															if (((listener->itype == ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY))){
																HX_STACK_LINE(6031)
																callbackset->COLLISIONstamp = this->stamp;
																HX_STACK_LINE(6032)
																callbackset->SENSORstamp = this->stamp;
																HX_STACK_LINE(6033)
																callbackset->FLUIDstamp = this->stamp;
															}
															else{
																HX_STACK_LINE(6035)
																callbackset->FLUIDstamp = this->stamp;
															}
															HX_STACK_LINE(6037)
															cx_ite2 = cx_ite2->next;
														}
													}
													HX_STACK_LINE(6044)
													bool pact = arb->active;		HX_STACK_VAR(pact,"pact");
													HX_STACK_LINE(6045)
													arb->active = true;
													HX_STACK_LINE(6046)
													bool emptycontacts = false;		HX_STACK_VAR(emptycontacts,"emptycontacts");
													HX_STACK_LINE(6049)
													this->precb->zpp_inner->pre_arbiter = arb;
													HX_STACK_LINE(6050)
													this->precb->zpp_inner->set = callbackset;
													HX_STACK_LINE(6051)
													{
														HX_STACK_LINE(6052)
														::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(6053)
														while((true)){
															HX_STACK_LINE(6053)
															if ((!(((cx_ite2 != null()))))){
																HX_STACK_LINE(6053)
																break;
															}
															HX_STACK_LINE(6054)
															::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
															HX_STACK_LINE(6055)
															{
																HX_STACK_LINE(6056)
																this->precb->zpp_inner->listener = listener;
																HX_STACK_LINE(6083)
																{
																	HX_STACK_LINE(6083)
																	::zpp_nape::callbacks::ZPP_Callback cb = this->precb->zpp_inner;		HX_STACK_VAR(cb,"cb");
																	HX_STACK_LINE(6083)
																	::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																	HX_STACK_LINE(6083)
																	::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																	struct _Function_17_1{
																		inline static bool Block( ::zpp_nape::phys::ZPP_Interactor &o1,::zpp_nape::callbacks::ZPP_InteractionListener &listener){
																			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",6083,0x2b65ed03)
																			{
																				HX_STACK_LINE(6083)
																				::zpp_nape::callbacks::ZPP_OptionType _this = listener->options1;		HX_STACK_VAR(_this,"_this");
																				HX_STACK_LINE(6083)
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(6083)
																				return (  ((_this->nonemptyintersection(xs,_this->includes))) ? bool(!(_this->nonemptyintersection(xs,_this->excludes))) : bool(false) );
																			}
																			return null();
																		}
																	};
																	struct _Function_17_2{
																		inline static bool Block( ::zpp_nape::phys::ZPP_Interactor &o2,::zpp_nape::callbacks::ZPP_InteractionListener &listener){
																			HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",6083,0x2b65ed03)
																			{
																				HX_STACK_LINE(6083)
																				::zpp_nape::callbacks::ZPP_OptionType _this = listener->options2;		HX_STACK_VAR(_this,"_this");
																				HX_STACK_LINE(6083)
																				::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																				HX_STACK_LINE(6083)
																				return (  ((_this->nonemptyintersection(xs,_this->includes))) ? bool(!(_this->nonemptyintersection(xs,_this->excludes))) : bool(false) );
																			}
																			return null();
																		}
																	};
																	HX_STACK_LINE(6083)
																	if (((  ((_Function_17_1::Block(o1,listener))) ? bool(_Function_17_2::Block(o2,listener)) : bool(false) ))){
																		HX_STACK_LINE(6083)
																		cb->int1 = o1;
																		HX_STACK_LINE(6083)
																		cb->int2 = o2;
																	}
																	else{
																		HX_STACK_LINE(6083)
																		cb->int1 = o2;
																		HX_STACK_LINE(6083)
																		cb->int2 = o1;
																	}
																}
																HX_STACK_LINE(6084)
																this->precb->zpp_inner->pre_swapped = (i1 != this->precb->zpp_inner->int1);
																HX_STACK_LINE(6085)
																::nape::callbacks::PreFlag ret1 = listener->handlerp(this->precb);		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(6086)
																if (((ret1 != null()))){
																	HX_STACK_LINE(6087)
																	::nape::callbacks::PreFlag _g21;		HX_STACK_VAR(_g21,"_g21");
																	HX_STACK_LINE(6087)
																	{
																		HX_STACK_LINE(6087)
																		if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT == null()))){
																			HX_STACK_LINE(6087)
																			::zpp_nape::util::ZPP_Flags_obj::internal = true;
																			HX_STACK_LINE(6087)
																			::nape::callbacks::PreFlag _g20 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(_g20,"_g20");
																			HX_STACK_LINE(6087)
																			::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT = _g20;
																			HX_STACK_LINE(6087)
																			::zpp_nape::util::ZPP_Flags_obj::internal = false;
																		}
																		HX_STACK_LINE(6087)
																		_g21 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;
																	}
																	HX_STACK_LINE(6087)
																	int _g26;		HX_STACK_VAR(_g26,"_g26");
																	HX_STACK_LINE(6087)
																	if (((ret1 == _g21))){
																		HX_STACK_LINE(6087)
																		_g26 = (int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT) | int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS));
																	}
																	else{
																		HX_STACK_LINE(6087)
																		::nape::callbacks::PreFlag _g23;		HX_STACK_VAR(_g23,"_g23");
																		HX_STACK_LINE(6087)
																		{
																			HX_STACK_LINE(6087)
																			if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE == null()))){
																				HX_STACK_LINE(6087)
																				::zpp_nape::util::ZPP_Flags_obj::internal = true;
																				HX_STACK_LINE(6087)
																				::nape::callbacks::PreFlag _g22 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(_g22,"_g22");
																				HX_STACK_LINE(6087)
																				::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE = _g22;
																				HX_STACK_LINE(6087)
																				::zpp_nape::util::ZPP_Flags_obj::internal = false;
																			}
																			HX_STACK_LINE(6087)
																			_g23 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;
																		}
																		HX_STACK_LINE(6087)
																		if (((ret1 == _g23))){
																			HX_STACK_LINE(6087)
																			_g26 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
																		}
																		else{
																			HX_STACK_LINE(6087)
																			::nape::callbacks::PreFlag _g25;		HX_STACK_VAR(_g25,"_g25");
																			HX_STACK_LINE(6087)
																			{
																				HX_STACK_LINE(6087)
																				if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE == null()))){
																					HX_STACK_LINE(6087)
																					::zpp_nape::util::ZPP_Flags_obj::internal = true;
																					HX_STACK_LINE(6087)
																					::nape::callbacks::PreFlag _g24 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(_g24,"_g24");
																					HX_STACK_LINE(6087)
																					::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE = _g24;
																					HX_STACK_LINE(6087)
																					::zpp_nape::util::ZPP_Flags_obj::internal = false;
																				}
																				HX_STACK_LINE(6087)
																				_g25 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;
																			}
																			HX_STACK_LINE(6087)
																			if (((ret1 == _g25))){
																				HX_STACK_LINE(6087)
																				_g26 = (int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE) | int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS));
																			}
																			else{
																				HX_STACK_LINE(6087)
																				_g26 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE;
																			}
																		}
																	}
																	HX_STACK_LINE(6087)
																	arb->immState = _g26;
																}
															}
															HX_STACK_LINE(6090)
															cx_ite2 = cx_ite2->next;
														}
													}
													HX_STACK_LINE(6096)
													arb->active = pact;
													HX_STACK_LINE(6097)
													if (((callbackset != null()))){
														HX_STACK_LINE(6099)
														::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
														HX_STACK_LINE(6100)
														while((true)){
															HX_STACK_LINE(6100)
															if ((!(((cx_ite2 != null()))))){
																HX_STACK_LINE(6100)
																break;
															}
															HX_STACK_LINE(6101)
															::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
															HX_STACK_LINE(6103)
															if (((listener->itype == ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY))){
																HX_STACK_LINE(6104)
																callbackset->COLLISIONstate = arb->immState;
																HX_STACK_LINE(6105)
																callbackset->SENSORstate = arb->immState;
																HX_STACK_LINE(6106)
																callbackset->FLUIDstate = arb->immState;
															}
															else{
																HX_STACK_LINE(6108)
																callbackset->FLUIDstate = arb->immState;
															}
															HX_STACK_LINE(6110)
															cx_ite2 = cx_ite2->next;
														}
													}
												}
												else{
													HX_STACK_LINE(6115)
													if (((callbackset == null()))){
														HX_STACK_LINE(6116)
														if (((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))){
															HX_STACK_LINE(6116)
															arb->immState = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
														}
													}
													else{
														HX_STACK_LINE(6118)
														arb->immState = callbackset->FLUIDstate;
													}
												}
											}
											HX_STACK_LINE(6120)
											cx_ite1 = cx_ite1->next;
										}
									}
									HX_STACK_LINE(6124)
									cx_ite = cx_ite->next;
								}
							}
							HX_STACK_LINE(6127)
							if (((bool(anyimpure) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))){
								HX_STACK_LINE(6129)
								if (((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
									HX_STACK_LINE(6130)
									::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(6139)
									if ((!(o->world))){
										HX_STACK_LINE(6148)
										o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
										HX_STACK_LINE(6149)
										if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
											HX_STACK_LINE(6149)
											o->kinematicDelaySleep = true;
										}
										HX_STACK_LINE(6150)
										if ((o->component->sleeping)){
											HX_STACK_LINE(6151)
											this->really_wake(o,false);
										}
									}
								}
								HX_STACK_LINE(6155)
								if (((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
									HX_STACK_LINE(6156)
									::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(6165)
									if ((!(o->world))){
										HX_STACK_LINE(6174)
										o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
										HX_STACK_LINE(6175)
										if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
											HX_STACK_LINE(6175)
											o->kinematicDelaySleep = true;
										}
										HX_STACK_LINE(6176)
										if ((o->component->sleeping)){
											HX_STACK_LINE(6177)
											this->really_wake(o,false);
										}
									}
								}
							}
						}
						HX_STACK_LINE(6238)
						if (((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))){
							HX_STACK_LINE(6239)
							if (((bool((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(arb->b1->component->sleeping)))){
								HX_STACK_LINE(6240)
								::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(6249)
								if ((!(o->world))){
									HX_STACK_LINE(6258)
									o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
									HX_STACK_LINE(6259)
									if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
										HX_STACK_LINE(6259)
										o->kinematicDelaySleep = true;
									}
									HX_STACK_LINE(6260)
									if ((o->component->sleeping)){
										HX_STACK_LINE(6261)
										this->really_wake(o,false);
									}
								}
							}
							HX_STACK_LINE(6265)
							if (((bool((arb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(arb->b2->component->sleeping)))){
								HX_STACK_LINE(6266)
								::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(6275)
								if ((!(o->world))){
									HX_STACK_LINE(6284)
									o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
									HX_STACK_LINE(6285)
									if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
										HX_STACK_LINE(6285)
										o->kinematicDelaySleep = true;
									}
									HX_STACK_LINE(6286)
									if ((o->component->sleeping)){
										HX_STACK_LINE(6287)
										this->really_wake(o,false);
									}
								}
							}
						}
						HX_STACK_LINE(6292)
						if ((arb->sleeping)){
							HX_STACK_LINE(6293)
							arb->sleeping = false;
							HX_STACK_LINE(6294)
							{
								HX_STACK_LINE(6294)
								::zpp_nape::util::ZNPList_ZPP_FluidArbiter _this = this->f_arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6294)
								::zpp_nape::util::ZNPNode_ZPP_FluidArbiter temp;		HX_STACK_VAR(temp,"temp");
								HX_STACK_LINE(6294)
								{
									HX_STACK_LINE(6294)
									::zpp_nape::util::ZNPNode_ZPP_FluidArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6294)
									{
										HX_STACK_LINE(6294)
										if (((::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool == null()))){
											HX_STACK_LINE(6294)
											::zpp_nape::util::ZNPNode_ZPP_FluidArbiter _g27 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::__new();		HX_STACK_VAR(_g27,"_g27");
											HX_STACK_LINE(6294)
											ret1 = _g27;
										}
										else{
											HX_STACK_LINE(6294)
											ret1 = ::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool;
											HX_STACK_LINE(6294)
											::zpp_nape::util::ZNPNode_ZPP_FluidArbiter_obj::zpp_pool = ret1->next;
											HX_STACK_LINE(6294)
											ret1->next = null();
										}
										HX_STACK_LINE(6294)
										Dynamic();
									}
									HX_STACK_LINE(6294)
									ret1->elt = arb;
									HX_STACK_LINE(6294)
									temp = ret1;
								}
								HX_STACK_LINE(6294)
								temp->next = _this->head;
								HX_STACK_LINE(6294)
								_this->head = temp;
								HX_STACK_LINE(6294)
								_this->modified = true;
								HX_STACK_LINE(6294)
								(_this->length)++;
								HX_STACK_LINE(6294)
								arb;
							}
						}
						HX_STACK_LINE(6296)
						_g28 = arb;
					}
					else{
						HX_STACK_LINE(6298)
						if ((first)){
							HX_STACK_LINE(6299)
							{
								HX_STACK_LINE(6300)
								::zpp_nape::dynamics::ZPP_FluidArbiter o = arb;		HX_STACK_VAR(o,"o");
								HX_STACK_LINE(6310)
								o->next = ::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool;
								HX_STACK_LINE(6311)
								::zpp_nape::dynamics::ZPP_FluidArbiter_obj::zpp_pool = o;
							}
							HX_STACK_LINE(6316)
							_g28 = null();
						}
						else{
							HX_STACK_LINE(6318)
							_g28 = arb;
						}
					}
				}
				else{
					HX_STACK_LINE(6320)
					_g28 = arb;
				}
			}
			HX_STACK_LINE(5959)
			ret = _g28;
		}
		else{
			HX_STACK_LINE(6323)
			if (((itype == (int)1))){
				HX_STACK_LINE(6324)
				::zpp_nape::util::ZNPList_ZPP_ColArbiter carbs;		HX_STACK_VAR(carbs,"carbs");
				HX_STACK_LINE(6324)
				if ((stat)){
					HX_STACK_LINE(6324)
					carbs = this->c_arbiters_true;
				}
				else{
					HX_STACK_LINE(6324)
					carbs = this->c_arbiters_false;
				}
				HX_STACK_LINE(6325)
				::zpp_nape::dynamics::ZPP_Arbiter xarb;		HX_STACK_VAR(xarb,"xarb");
				HX_STACK_LINE(6325)
				if (((in_arb == null()))){
					HX_STACK_LINE(6326)
					::zpp_nape::dynamics::ZPP_Arbiter ret1 = null();		HX_STACK_VAR(ret1,"ret1");
					HX_STACK_LINE(6327)
					::zpp_nape::phys::ZPP_Body b;		HX_STACK_VAR(b,"b");
					HX_STACK_LINE(6327)
					if (((b1->arbiters->length < b2->arbiters->length))){
						HX_STACK_LINE(6327)
						b = b1;
					}
					else{
						HX_STACK_LINE(6327)
						b = b2;
					}
					HX_STACK_LINE(6328)
					{
						HX_STACK_LINE(6329)
						::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = b->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(6330)
						while((true)){
							HX_STACK_LINE(6330)
							if ((!(((cx_ite != null()))))){
								HX_STACK_LINE(6330)
								break;
							}
							HX_STACK_LINE(6331)
							::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
							HX_STACK_LINE(6341)
							if (((bool((arb->id == sa->id)) && bool((arb->di == sb->id))))){
								HX_STACK_LINE(6342)
								ret1 = arb;
								HX_STACK_LINE(6343)
								break;
							}
							HX_STACK_LINE(6346)
							cx_ite = cx_ite->next;
						}
					}
					HX_STACK_LINE(6349)
					xarb = ret1;
				}
				else{
					HX_STACK_LINE(6350)
					xarb = in_arb;
				}
				HX_STACK_LINE(6351)
				bool first = (xarb == null());		HX_STACK_VAR(first,"first");
				HX_STACK_LINE(6352)
				::zpp_nape::dynamics::ZPP_ColArbiter arb;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(6353)
				bool swapped = false;		HX_STACK_VAR(swapped,"swapped");
				HX_STACK_LINE(6354)
				if ((first)){
					HX_STACK_LINE(6355)
					{
						HX_STACK_LINE(6356)
						if (((::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool == null()))){
							HX_STACK_LINE(6357)
							::zpp_nape::dynamics::ZPP_ColArbiter _g29 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(_g29,"_g29");
							HX_STACK_LINE(6357)
							arb = _g29;
						}
						else{
							HX_STACK_LINE(6363)
							arb = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
							HX_STACK_LINE(6364)
							::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = arb->next;
							HX_STACK_LINE(6365)
							arb->next = null();
						}
						HX_STACK_LINE(6370)
						Dynamic();
					}
					HX_STACK_LINE(6372)
					arb->stat = stat;
				}
				else{
					HX_STACK_LINE(6375)
					if (((xarb->colarb == null()))){
						HX_STACK_LINE(6376)
						{
							HX_STACK_LINE(6376)
							xarb->cleared = true;
							HX_STACK_LINE(6376)
							{
								HX_STACK_LINE(6376)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6376)
								{
									HX_STACK_LINE(6376)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(6376)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(6376)
									bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6376)
									while((true)){
										HX_STACK_LINE(6376)
										if ((!(((cur != null()))))){
											HX_STACK_LINE(6376)
											break;
										}
										HX_STACK_LINE(6376)
										if (((cur->elt == xarb))){
											HX_STACK_LINE(6376)
											{
												HX_STACK_LINE(6376)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(6376)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
												HX_STACK_LINE(6376)
												if (((pre == null()))){
													HX_STACK_LINE(6376)
													old = _this->head;
													HX_STACK_LINE(6376)
													ret2 = old->next;
													HX_STACK_LINE(6376)
													_this->head = ret2;
													HX_STACK_LINE(6376)
													if (((_this->head == null()))){
														HX_STACK_LINE(6376)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(6376)
													old = pre->next;
													HX_STACK_LINE(6376)
													ret2 = old->next;
													HX_STACK_LINE(6376)
													pre->next = ret2;
													HX_STACK_LINE(6376)
													if (((ret2 == null()))){
														HX_STACK_LINE(6376)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6376)
												{
													HX_STACK_LINE(6376)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6376)
													o->elt = null();
													HX_STACK_LINE(6376)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(6376)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6376)
												_this->modified = true;
												HX_STACK_LINE(6376)
												(_this->length)--;
												HX_STACK_LINE(6376)
												_this->pushmod = true;
												HX_STACK_LINE(6376)
												ret2;
											}
											HX_STACK_LINE(6376)
											ret1 = true;
											HX_STACK_LINE(6376)
											break;
										}
										HX_STACK_LINE(6376)
										pre = cur;
										HX_STACK_LINE(6376)
										cur = cur->next;
									}
									HX_STACK_LINE(6376)
									ret1;
								}
							}
							HX_STACK_LINE(6376)
							{
								HX_STACK_LINE(6376)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6376)
								{
									HX_STACK_LINE(6376)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(6376)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(6376)
									bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6376)
									while((true)){
										HX_STACK_LINE(6376)
										if ((!(((cur != null()))))){
											HX_STACK_LINE(6376)
											break;
										}
										HX_STACK_LINE(6376)
										if (((cur->elt == xarb))){
											HX_STACK_LINE(6376)
											{
												HX_STACK_LINE(6376)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(6376)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
												HX_STACK_LINE(6376)
												if (((pre == null()))){
													HX_STACK_LINE(6376)
													old = _this->head;
													HX_STACK_LINE(6376)
													ret2 = old->next;
													HX_STACK_LINE(6376)
													_this->head = ret2;
													HX_STACK_LINE(6376)
													if (((_this->head == null()))){
														HX_STACK_LINE(6376)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(6376)
													old = pre->next;
													HX_STACK_LINE(6376)
													ret2 = old->next;
													HX_STACK_LINE(6376)
													pre->next = ret2;
													HX_STACK_LINE(6376)
													if (((ret2 == null()))){
														HX_STACK_LINE(6376)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6376)
												{
													HX_STACK_LINE(6376)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6376)
													o->elt = null();
													HX_STACK_LINE(6376)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(6376)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6376)
												_this->modified = true;
												HX_STACK_LINE(6376)
												(_this->length)--;
												HX_STACK_LINE(6376)
												_this->pushmod = true;
												HX_STACK_LINE(6376)
												ret2;
											}
											HX_STACK_LINE(6376)
											ret1 = true;
											HX_STACK_LINE(6376)
											break;
										}
										HX_STACK_LINE(6376)
										pre = cur;
										HX_STACK_LINE(6376)
										cur = cur->next;
									}
									HX_STACK_LINE(6376)
									ret1;
								}
							}
							HX_STACK_LINE(6376)
							if (((xarb->pair != null()))){
								HX_STACK_LINE(6376)
								xarb->pair->arb = null();
								HX_STACK_LINE(6376)
								xarb->pair = null();
							}
							HX_STACK_LINE(6376)
							xarb->active = false;
							HX_STACK_LINE(6376)
							this->f_arbiters->modified = true;
						}
						HX_STACK_LINE(6377)
						{
							HX_STACK_LINE(6378)
							if (((::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool == null()))){
								HX_STACK_LINE(6379)
								::zpp_nape::dynamics::ZPP_ColArbiter _g30 = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(_g30,"_g30");
								HX_STACK_LINE(6379)
								arb = _g30;
							}
							else{
								HX_STACK_LINE(6385)
								arb = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
								HX_STACK_LINE(6386)
								::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = arb->next;
								HX_STACK_LINE(6387)
								arb->next = null();
							}
							HX_STACK_LINE(6392)
							Dynamic();
						}
						HX_STACK_LINE(6394)
						arb->intchange = true;
						HX_STACK_LINE(6395)
						arb->stat = stat;
						HX_STACK_LINE(6396)
						first = true;
						HX_STACK_LINE(6397)
						swapped = true;
					}
					else{
						HX_STACK_LINE(6400)
						arb = xarb->colarb;
						HX_STACK_LINE(6401)
						reverse = (sa != arb->s1);
						HX_STACK_LINE(6402)
						if (((arb->stat != stat))){
							HX_STACK_LINE(6403)
							arb->stat = stat;
							HX_STACK_LINE(6404)
							if ((!(arb->sleeping))){
								HX_STACK_LINE(6405)
								((  ((stat)) ? ::zpp_nape::util::ZNPList_ZPP_ColArbiter(this->c_arbiters_false) : ::zpp_nape::util::ZNPList_ZPP_ColArbiter(this->c_arbiters_true) ))->remove(arb);
								HX_STACK_LINE(6406)
								carbs->add(arb);
							}
						}
					}
				}
				HX_STACK_LINE(6411)
				::zpp_nape::dynamics::ZPP_Arbiter _g63;		HX_STACK_VAR(_g63,"_g63");
				HX_STACK_LINE(6411)
				{
					HX_STACK_LINE(6412)
					int inttype = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_COLLISION;		HX_STACK_VAR(inttype,"inttype");
					HX_STACK_LINE(6413)
					if (((bool((bool(first) || bool((arb->stamp != this->stamp)))) || bool(continuous)))){
						HX_STACK_LINE(6414)
						arb->stamp = this->stamp;
						HX_STACK_LINE(6415)
						if ((::zpp_nape::geom::ZPP_Collide_obj::contactCollide(sa,sb,arb,reverse))){
							HX_STACK_LINE(6416)
							if ((first)){
								HX_STACK_LINE(6417)
								{
									HX_STACK_LINE(6417)
									{
										HX_STACK_LINE(6417)
										arb->b1 = s1->body;
										HX_STACK_LINE(6417)
										arb->ws1 = s1;
										HX_STACK_LINE(6417)
										arb->b2 = s2->body;
										HX_STACK_LINE(6417)
										arb->ws2 = s2;
										HX_STACK_LINE(6417)
										arb->id = sa->id;
										HX_STACK_LINE(6417)
										arb->di = sb->id;
										HX_STACK_LINE(6417)
										{
											HX_STACK_LINE(6417)
											::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(6417)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter temp;		HX_STACK_VAR(temp,"temp");
											HX_STACK_LINE(6417)
											{
												HX_STACK_LINE(6417)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(6417)
												{
													HX_STACK_LINE(6417)
													if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
														HX_STACK_LINE(6417)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter _g31 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(_g31,"_g31");
														HX_STACK_LINE(6417)
														ret1 = _g31;
													}
													else{
														HX_STACK_LINE(6417)
														ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
														HX_STACK_LINE(6417)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(6417)
														ret1->next = null();
													}
													HX_STACK_LINE(6417)
													Dynamic();
												}
												HX_STACK_LINE(6417)
												ret1->elt = arb;
												HX_STACK_LINE(6417)
												temp = ret1;
											}
											HX_STACK_LINE(6417)
											temp->next = _this->head;
											HX_STACK_LINE(6417)
											_this->head = temp;
											HX_STACK_LINE(6417)
											_this->modified = true;
											HX_STACK_LINE(6417)
											(_this->length)++;
											HX_STACK_LINE(6417)
											arb;
										}
										HX_STACK_LINE(6417)
										{
											HX_STACK_LINE(6417)
											::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
											HX_STACK_LINE(6417)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter temp;		HX_STACK_VAR(temp,"temp");
											HX_STACK_LINE(6417)
											{
												HX_STACK_LINE(6417)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(6417)
												{
													HX_STACK_LINE(6417)
													if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
														HX_STACK_LINE(6417)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter _g32 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(_g32,"_g32");
														HX_STACK_LINE(6417)
														ret1 = _g32;
													}
													else{
														HX_STACK_LINE(6417)
														ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
														HX_STACK_LINE(6417)
														::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
														HX_STACK_LINE(6417)
														ret1->next = null();
													}
													HX_STACK_LINE(6417)
													Dynamic();
												}
												HX_STACK_LINE(6417)
												ret1->elt = arb;
												HX_STACK_LINE(6417)
												temp = ret1;
											}
											HX_STACK_LINE(6417)
											temp->next = _this->head;
											HX_STACK_LINE(6417)
											_this->head = temp;
											HX_STACK_LINE(6417)
											_this->modified = true;
											HX_STACK_LINE(6417)
											(_this->length)++;
											HX_STACK_LINE(6417)
											arb;
										}
										HX_STACK_LINE(6417)
										arb->active = true;
										HX_STACK_LINE(6417)
										arb->present = (int)0;
										HX_STACK_LINE(6417)
										arb->cleared = false;
										HX_STACK_LINE(6417)
										arb->sleeping = false;
										HX_STACK_LINE(6417)
										arb->fresh = false;
										HX_STACK_LINE(6417)
										arb->presentable = false;
									}
									HX_STACK_LINE(6417)
									arb->s1 = s1;
									HX_STACK_LINE(6417)
									arb->s2 = s2;
									HX_STACK_LINE(6417)
									{
										HX_STACK_LINE(6417)
										if ((!(arb->userdef_restitution))){
											HX_STACK_LINE(6417)
											if (((bool((arb->s1->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY)) || bool((arb->s2->material->elasticity <= ::Math_obj::NEGATIVE_INFINITY))))){
												HX_STACK_LINE(6417)
												arb->restitution = (int)0;
											}
											else{
												HX_STACK_LINE(6417)
												if (((bool((arb->s1->material->elasticity >= ::Math_obj::POSITIVE_INFINITY)) || bool((arb->s2->material->elasticity >= ::Math_obj::POSITIVE_INFINITY))))){
													HX_STACK_LINE(6417)
													arb->restitution = (int)1;
												}
												else{
													HX_STACK_LINE(6417)
													arb->restitution = (Float(((arb->s1->material->elasticity + arb->s2->material->elasticity))) / Float((int)2));
												}
											}
											HX_STACK_LINE(6417)
											if (((arb->restitution < (int)0))){
												HX_STACK_LINE(6417)
												arb->restitution = (int)0;
											}
											HX_STACK_LINE(6417)
											if (((arb->restitution > (int)1))){
												HX_STACK_LINE(6417)
												arb->restitution = (int)1;
											}
										}
										HX_STACK_LINE(6417)
										if ((!(arb->userdef_dyn_fric))){
											HX_STACK_LINE(6417)
											Float _g33 = ::Math_obj::sqrt((arb->s1->material->dynamicFriction * arb->s2->material->dynamicFriction));		HX_STACK_VAR(_g33,"_g33");
											HX_STACK_LINE(6417)
											arb->dyn_fric = _g33;
										}
										HX_STACK_LINE(6417)
										if ((!(arb->userdef_stat_fric))){
											HX_STACK_LINE(6417)
											Float _g34 = ::Math_obj::sqrt((arb->s1->material->staticFriction * arb->s2->material->staticFriction));		HX_STACK_VAR(_g34,"_g34");
											HX_STACK_LINE(6417)
											arb->stat_fric = _g34;
										}
										HX_STACK_LINE(6417)
										if ((!(arb->userdef_rfric))){
											HX_STACK_LINE(6417)
											Float _g35 = ::Math_obj::sqrt((arb->s1->material->rollingFriction * arb->s2->material->rollingFriction));		HX_STACK_VAR(_g35,"_g35");
											HX_STACK_LINE(6417)
											arb->rfric = _g35;
										}
									}
								}
								HX_STACK_LINE(6418)
								{
									HX_STACK_LINE(6418)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(6418)
									{
										HX_STACK_LINE(6418)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(6418)
										{
											HX_STACK_LINE(6418)
											if (((::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool == null()))){
												HX_STACK_LINE(6418)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter _g36 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(_g36,"_g36");
												HX_STACK_LINE(6418)
												ret1 = _g36;
											}
											else{
												HX_STACK_LINE(6418)
												ret1 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
												HX_STACK_LINE(6418)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(6418)
												ret1->next = null();
											}
											HX_STACK_LINE(6418)
											Dynamic();
										}
										HX_STACK_LINE(6418)
										ret1->elt = arb;
										HX_STACK_LINE(6418)
										temp = ret1;
									}
									HX_STACK_LINE(6418)
									temp->next = carbs->head;
									HX_STACK_LINE(6418)
									carbs->head = temp;
									HX_STACK_LINE(6418)
									carbs->modified = true;
									HX_STACK_LINE(6418)
									(carbs->length)++;
									HX_STACK_LINE(6418)
									arb;
								}
								HX_STACK_LINE(6419)
								arb->fresh = !(swapped);
							}
							else{
								HX_STACK_LINE(6422)
								arb->fresh = (bool((arb->up_stamp < (this->stamp - (int)1))) || bool((bool((arb->endGenerated == this->stamp)) && bool(continuous))));
							}
							HX_STACK_LINE(6424)
							arb->up_stamp = arb->stamp;
							HX_STACK_LINE(6425)
							if (((bool(arb->fresh) || bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))){
								HX_STACK_LINE(6426)
								arb->immState = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
								HX_STACK_LINE(6427)
								bool anyimpure = false;		HX_STACK_VAR(anyimpure,"anyimpure");
								HX_STACK_LINE(6428)
								::zpp_nape::shape::ZPP_Shape arbs1;		HX_STACK_VAR(arbs1,"arbs1");
								HX_STACK_LINE(6428)
								if (((arb->ws1->id > arb->ws2->id))){
									HX_STACK_LINE(6428)
									arbs1 = arb->ws2;
								}
								else{
									HX_STACK_LINE(6428)
									arbs1 = arb->ws1;
								}
								HX_STACK_LINE(6429)
								::zpp_nape::shape::ZPP_Shape arbs2;		HX_STACK_VAR(arbs2,"arbs2");
								HX_STACK_LINE(6429)
								if (((arb->ws1->id > arb->ws2->id))){
									HX_STACK_LINE(6429)
									arbs2 = arb->ws1;
								}
								else{
									HX_STACK_LINE(6429)
									arbs2 = arb->ws2;
								}
								HX_STACK_LINE(6430)
								{
									HX_STACK_LINE(6430)
									{
										HX_STACK_LINE(6430)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6430)
										{
											HX_STACK_LINE(6430)
											while((true)){
												HX_STACK_LINE(6430)
												if ((!((!(((_this->head == null()))))))){
													HX_STACK_LINE(6430)
													break;
												}
												HX_STACK_LINE(6430)
												::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(6430)
												_this->head = ret1->next;
												HX_STACK_LINE(6430)
												{
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6430)
													o->elt = null();
													HX_STACK_LINE(6430)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6430)
												if (((_this->head == null()))){
													HX_STACK_LINE(6430)
													_this->pushmod = true;
												}
												HX_STACK_LINE(6430)
												_this->modified = true;
												HX_STACK_LINE(6430)
												(_this->length)--;
											}
											HX_STACK_LINE(6430)
											_this->pushmod = true;
										}
									}
									HX_STACK_LINE(6430)
									{
										HX_STACK_LINE(6430)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6430)
										{
											HX_STACK_LINE(6430)
											while((true)){
												HX_STACK_LINE(6430)
												if ((!((!(((_this->head == null()))))))){
													HX_STACK_LINE(6430)
													break;
												}
												HX_STACK_LINE(6430)
												::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(6430)
												_this->head = ret1->next;
												HX_STACK_LINE(6430)
												{
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6430)
													o->elt = null();
													HX_STACK_LINE(6430)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6430)
												if (((_this->head == null()))){
													HX_STACK_LINE(6430)
													_this->pushmod = true;
												}
												HX_STACK_LINE(6430)
												_this->modified = true;
												HX_STACK_LINE(6430)
												(_this->length)--;
											}
											HX_STACK_LINE(6430)
											_this->pushmod = true;
										}
									}
									HX_STACK_LINE(6430)
									if (((arbs1->cbSet != null()))){
										HX_STACK_LINE(6430)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6430)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6430)
										{
											HX_STACK_LINE(6430)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6430)
											{
												HX_STACK_LINE(6430)
												if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor _g37 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g37,"_g37");
													HX_STACK_LINE(6430)
													ret1 = _g37;
												}
												else{
													HX_STACK_LINE(6430)
													ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6430)
													ret1->next = null();
												}
												HX_STACK_LINE(6430)
												Dynamic();
											}
											HX_STACK_LINE(6430)
											ret1->elt = arbs1;
											HX_STACK_LINE(6430)
											temp = ret1;
										}
										HX_STACK_LINE(6430)
										temp->next = _this->head;
										HX_STACK_LINE(6430)
										_this->head = temp;
										HX_STACK_LINE(6430)
										_this->modified = true;
										HX_STACK_LINE(6430)
										(_this->length)++;
										HX_STACK_LINE(6430)
										arbs1;
									}
									HX_STACK_LINE(6430)
									if (((arbs1->body->cbSet != null()))){
										HX_STACK_LINE(6430)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6430)
										::zpp_nape::phys::ZPP_Interactor o = arbs1->body;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(6430)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6430)
										{
											HX_STACK_LINE(6430)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6430)
											{
												HX_STACK_LINE(6430)
												if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor _g38 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g38,"_g38");
													HX_STACK_LINE(6430)
													ret1 = _g38;
												}
												else{
													HX_STACK_LINE(6430)
													ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6430)
													ret1->next = null();
												}
												HX_STACK_LINE(6430)
												Dynamic();
											}
											HX_STACK_LINE(6430)
											ret1->elt = o;
											HX_STACK_LINE(6430)
											temp = ret1;
										}
										HX_STACK_LINE(6430)
										temp->next = _this->head;
										HX_STACK_LINE(6430)
										_this->head = temp;
										HX_STACK_LINE(6430)
										_this->modified = true;
										HX_STACK_LINE(6430)
										(_this->length)++;
										HX_STACK_LINE(6430)
										o;
									}
									HX_STACK_LINE(6430)
									if (((arbs2->cbSet != null()))){
										HX_STACK_LINE(6430)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6430)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6430)
										{
											HX_STACK_LINE(6430)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6430)
											{
												HX_STACK_LINE(6430)
												if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor _g39 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g39,"_g39");
													HX_STACK_LINE(6430)
													ret1 = _g39;
												}
												else{
													HX_STACK_LINE(6430)
													ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6430)
													ret1->next = null();
												}
												HX_STACK_LINE(6430)
												Dynamic();
											}
											HX_STACK_LINE(6430)
											ret1->elt = arbs2;
											HX_STACK_LINE(6430)
											temp = ret1;
										}
										HX_STACK_LINE(6430)
										temp->next = _this->head;
										HX_STACK_LINE(6430)
										_this->head = temp;
										HX_STACK_LINE(6430)
										_this->modified = true;
										HX_STACK_LINE(6430)
										(_this->length)++;
										HX_STACK_LINE(6430)
										arbs2;
									}
									HX_STACK_LINE(6430)
									if (((arbs2->body->cbSet != null()))){
										HX_STACK_LINE(6430)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6430)
										::zpp_nape::phys::ZPP_Interactor o = arbs2->body;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(6430)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6430)
										{
											HX_STACK_LINE(6430)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6430)
											{
												HX_STACK_LINE(6430)
												if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor _g40 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g40,"_g40");
													HX_STACK_LINE(6430)
													ret1 = _g40;
												}
												else{
													HX_STACK_LINE(6430)
													ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6430)
													ret1->next = null();
												}
												HX_STACK_LINE(6430)
												Dynamic();
											}
											HX_STACK_LINE(6430)
											ret1->elt = o;
											HX_STACK_LINE(6430)
											temp = ret1;
										}
										HX_STACK_LINE(6430)
										temp->next = _this->head;
										HX_STACK_LINE(6430)
										_this->head = temp;
										HX_STACK_LINE(6430)
										_this->modified = true;
										HX_STACK_LINE(6430)
										(_this->length)++;
										HX_STACK_LINE(6430)
										o;
									}
									HX_STACK_LINE(6430)
									::zpp_nape::phys::ZPP_Compound c1 = arbs1->body->compound;		HX_STACK_VAR(c1,"c1");
									HX_STACK_LINE(6430)
									::zpp_nape::phys::ZPP_Compound c2 = arbs2->body->compound;		HX_STACK_VAR(c2,"c2");
									HX_STACK_LINE(6430)
									while((true)){
										HX_STACK_LINE(6430)
										if ((!(((c1 != c2))))){
											HX_STACK_LINE(6430)
											break;
										}
										HX_STACK_LINE(6430)
										int d1;		HX_STACK_VAR(d1,"d1");
										HX_STACK_LINE(6430)
										if (((c1 == null()))){
											HX_STACK_LINE(6430)
											d1 = (int)0;
										}
										else{
											HX_STACK_LINE(6430)
											d1 = c1->depth;
										}
										HX_STACK_LINE(6430)
										int d2;		HX_STACK_VAR(d2,"d2");
										HX_STACK_LINE(6430)
										if (((c2 == null()))){
											HX_STACK_LINE(6430)
											d2 = (int)0;
										}
										else{
											HX_STACK_LINE(6430)
											d2 = c2->depth;
										}
										HX_STACK_LINE(6430)
										if (((d1 < d2))){
											HX_STACK_LINE(6430)
											if (((c2->cbSet != null()))){
												HX_STACK_LINE(6430)
												::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(6430)
												::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
												HX_STACK_LINE(6430)
												{
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
													HX_STACK_LINE(6430)
													{
														HX_STACK_LINE(6430)
														if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
															HX_STACK_LINE(6430)
															::zpp_nape::util::ZNPNode_ZPP_Interactor _g41 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g41,"_g41");
															HX_STACK_LINE(6430)
															ret1 = _g41;
														}
														else{
															HX_STACK_LINE(6430)
															ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
															HX_STACK_LINE(6430)
															::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
															HX_STACK_LINE(6430)
															ret1->next = null();
														}
														HX_STACK_LINE(6430)
														Dynamic();
													}
													HX_STACK_LINE(6430)
													ret1->elt = c2;
													HX_STACK_LINE(6430)
													temp = ret1;
												}
												HX_STACK_LINE(6430)
												temp->next = _this->head;
												HX_STACK_LINE(6430)
												_this->head = temp;
												HX_STACK_LINE(6430)
												_this->modified = true;
												HX_STACK_LINE(6430)
												(_this->length)++;
												HX_STACK_LINE(6430)
												c2;
											}
											HX_STACK_LINE(6430)
											c2 = c2->compound;
										}
										else{
											HX_STACK_LINE(6430)
											if (((c1->cbSet != null()))){
												HX_STACK_LINE(6430)
												::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(6430)
												::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
												HX_STACK_LINE(6430)
												{
													HX_STACK_LINE(6430)
													::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
													HX_STACK_LINE(6430)
													{
														HX_STACK_LINE(6430)
														if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
															HX_STACK_LINE(6430)
															::zpp_nape::util::ZNPNode_ZPP_Interactor _g42 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g42,"_g42");
															HX_STACK_LINE(6430)
															ret1 = _g42;
														}
														else{
															HX_STACK_LINE(6430)
															ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
															HX_STACK_LINE(6430)
															::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
															HX_STACK_LINE(6430)
															ret1->next = null();
														}
														HX_STACK_LINE(6430)
														Dynamic();
													}
													HX_STACK_LINE(6430)
													ret1->elt = c1;
													HX_STACK_LINE(6430)
													temp = ret1;
												}
												HX_STACK_LINE(6430)
												temp->next = _this->head;
												HX_STACK_LINE(6430)
												_this->head = temp;
												HX_STACK_LINE(6430)
												_this->modified = true;
												HX_STACK_LINE(6430)
												(_this->length)++;
												HX_STACK_LINE(6430)
												c1;
											}
											HX_STACK_LINE(6430)
											c1 = c1->compound;
										}
									}
								}
								HX_STACK_LINE(6431)
								{
									HX_STACK_LINE(6432)
									::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = this->mrca1->head;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(6433)
									while((true)){
										HX_STACK_LINE(6433)
										if ((!(((cx_ite != null()))))){
											HX_STACK_LINE(6433)
											break;
										}
										HX_STACK_LINE(6434)
										::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;		HX_STACK_VAR(i1,"i1");
										HX_STACK_LINE(6436)
										{
											HX_STACK_LINE(6437)
											::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca2->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
											HX_STACK_LINE(6438)
											while((true)){
												HX_STACK_LINE(6438)
												if ((!(((cx_ite1 != null()))))){
													HX_STACK_LINE(6438)
													break;
												}
												HX_STACK_LINE(6439)
												::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;		HX_STACK_VAR(i2,"i2");
												HX_STACK_LINE(6440)
												{
													HX_STACK_LINE(6441)
													::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
													HX_STACK_LINE(6442)
													::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
													struct _Function_13_1{
														inline static bool Block( ::zpp_nape::callbacks::ZPP_CbSet &cb2,::zpp_nape::callbacks::ZPP_CbSet &cb1){
															HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",6451,0x2b65ed03)
															{
																HX_STACK_LINE(6451)
																::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(6451)
																{
																	HX_STACK_LINE(6451)
																	::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(6451)
																	::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
																	HX_STACK_LINE(6451)
																	if (((cb1->cbpairs->length < cb2->cbpairs->length))){
																		HX_STACK_LINE(6451)
																		pairs = cb1->cbpairs;
																	}
																	else{
																		HX_STACK_LINE(6451)
																		pairs = cb2->cbpairs;
																	}
																	HX_STACK_LINE(6451)
																	{
																		HX_STACK_LINE(6451)
																		::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																		HX_STACK_LINE(6451)
																		while((true)){
																			HX_STACK_LINE(6451)
																			if ((!(((cx_ite2 != null()))))){
																				HX_STACK_LINE(6451)
																				break;
																			}
																			HX_STACK_LINE(6451)
																			::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																			HX_STACK_LINE(6451)
																			if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																				HX_STACK_LINE(6451)
																				ret1 = p;
																				HX_STACK_LINE(6451)
																				break;
																			}
																			HX_STACK_LINE(6451)
																			cx_ite2 = cx_ite2->next;
																		}
																	}
																	HX_STACK_LINE(6451)
																	if (((ret1 == null()))){
																		HX_STACK_LINE(6451)
																		::zpp_nape::callbacks::ZPP_CbSetPair _g44;		HX_STACK_VAR(_g44,"_g44");
																		HX_STACK_LINE(6451)
																		{
																			HX_STACK_LINE(6451)
																			::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																			HX_STACK_LINE(6451)
																			{
																				HX_STACK_LINE(6451)
																				if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																					HX_STACK_LINE(6451)
																					::zpp_nape::callbacks::ZPP_CbSetPair _g43 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g43,"_g43");
																					HX_STACK_LINE(6451)
																					ret2 = _g43;
																				}
																				else{
																					HX_STACK_LINE(6451)
																					ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																					HX_STACK_LINE(6451)
																					::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																					HX_STACK_LINE(6451)
																					ret2->next = null();
																				}
																				HX_STACK_LINE(6451)
																				ret2->zip_listeners = true;
																			}
																			HX_STACK_LINE(6451)
																			if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																				HX_STACK_LINE(6451)
																				ret2->a = cb1;
																				HX_STACK_LINE(6451)
																				ret2->b = cb2;
																			}
																			else{
																				HX_STACK_LINE(6451)
																				ret2->a = cb2;
																				HX_STACK_LINE(6451)
																				ret2->b = cb1;
																			}
																			HX_STACK_LINE(6451)
																			_g44 = ret2;
																		}
																		HX_STACK_LINE(6451)
																		ret1 = _g44;
																		HX_STACK_LINE(6451)
																		cb1->cbpairs->add(ret1);
																		HX_STACK_LINE(6451)
																		if (((cb2 != cb1))){
																			HX_STACK_LINE(6451)
																			cb2->cbpairs->add(ret1);
																		}
																	}
																	HX_STACK_LINE(6451)
																	if ((ret1->zip_listeners)){
																		HX_STACK_LINE(6451)
																		ret1->zip_listeners = false;
																		HX_STACK_LINE(6451)
																		ret1->__validate();
																	}
																	HX_STACK_LINE(6451)
																	_this = ret1;
																}
																HX_STACK_LINE(6451)
																return (_this->listeners->head == null());
															}
															return null();
														}
													};
													HX_STACK_LINE(6451)
													if ((_Function_13_1::Block(cb2,cb1))){
														HX_STACK_LINE(6452)
														cx_ite1 = cx_ite1->next;
														HX_STACK_LINE(6453)
														continue;
													}
													HX_STACK_LINE(6455)
													::zpp_nape::space::ZPP_CallbackSet callbackset = null();		HX_STACK_VAR(callbackset,"callbackset");
													HX_STACK_LINE(6456)
													::zpp_nape::space::ZPP_CallbackSet ncallbackset = null();		HX_STACK_VAR(ncallbackset,"ncallbackset");
													HX_STACK_LINE(6457)
													{
														HX_STACK_LINE(6457)
														::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = this->prelisteners;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(6457)
														{
															HX_STACK_LINE(6457)
															while((true)){
																HX_STACK_LINE(6457)
																if ((!((!(((_this->head == null()))))))){
																	HX_STACK_LINE(6457)
																	break;
																}
																HX_STACK_LINE(6457)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(6457)
																_this->head = ret1->next;
																HX_STACK_LINE(6457)
																{
																	HX_STACK_LINE(6457)
																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener o = ret1;		HX_STACK_VAR(o,"o");
																	HX_STACK_LINE(6457)
																	o->elt = null();
																	HX_STACK_LINE(6457)
																	o->next = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
																	HX_STACK_LINE(6457)
																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = o;
																}
																HX_STACK_LINE(6457)
																if (((_this->head == null()))){
																	HX_STACK_LINE(6457)
																	_this->pushmod = true;
																}
																HX_STACK_LINE(6457)
																_this->modified = true;
																HX_STACK_LINE(6457)
																(_this->length)--;
															}
															HX_STACK_LINE(6457)
															_this->pushmod = true;
														}
													}
													HX_STACK_LINE(6458)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener lite = null();		HX_STACK_VAR(lite,"lite");
													HX_STACK_LINE(6459)
													{
														HX_STACK_LINE(6459)
														int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_PRE;		HX_STACK_VAR(event,"event");
														HX_STACK_LINE(6459)
														{
															HX_STACK_LINE(6459)
															::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(6459)
															{
																HX_STACK_LINE(6459)
																::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(6459)
																::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
																HX_STACK_LINE(6459)
																if (((cb1->cbpairs->length < cb2->cbpairs->length))){
																	HX_STACK_LINE(6459)
																	pairs = cb1->cbpairs;
																}
																else{
																	HX_STACK_LINE(6459)
																	pairs = cb2->cbpairs;
																}
																HX_STACK_LINE(6459)
																{
																	HX_STACK_LINE(6459)
																	::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																	HX_STACK_LINE(6459)
																	while((true)){
																		HX_STACK_LINE(6459)
																		if ((!(((cx_ite2 != null()))))){
																			HX_STACK_LINE(6459)
																			break;
																		}
																		HX_STACK_LINE(6459)
																		::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																		HX_STACK_LINE(6459)
																		if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																			HX_STACK_LINE(6459)
																			ret1 = p;
																			HX_STACK_LINE(6459)
																			break;
																		}
																		HX_STACK_LINE(6459)
																		cx_ite2 = cx_ite2->next;
																	}
																}
																HX_STACK_LINE(6459)
																if (((ret1 == null()))){
																	HX_STACK_LINE(6459)
																	::zpp_nape::callbacks::ZPP_CbSetPair _g46;		HX_STACK_VAR(_g46,"_g46");
																	HX_STACK_LINE(6459)
																	{
																		HX_STACK_LINE(6459)
																		::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																		HX_STACK_LINE(6459)
																		{
																			HX_STACK_LINE(6459)
																			if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																				HX_STACK_LINE(6459)
																				::zpp_nape::callbacks::ZPP_CbSetPair _g45 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g45,"_g45");
																				HX_STACK_LINE(6459)
																				ret2 = _g45;
																			}
																			else{
																				HX_STACK_LINE(6459)
																				ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																				HX_STACK_LINE(6459)
																				::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																				HX_STACK_LINE(6459)
																				ret2->next = null();
																			}
																			HX_STACK_LINE(6459)
																			ret2->zip_listeners = true;
																		}
																		HX_STACK_LINE(6459)
																		if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																			HX_STACK_LINE(6459)
																			ret2->a = cb1;
																			HX_STACK_LINE(6459)
																			ret2->b = cb2;
																		}
																		else{
																			HX_STACK_LINE(6459)
																			ret2->a = cb2;
																			HX_STACK_LINE(6459)
																			ret2->b = cb1;
																		}
																		HX_STACK_LINE(6459)
																		_g46 = ret2;
																	}
																	HX_STACK_LINE(6459)
																	ret1 = _g46;
																	HX_STACK_LINE(6459)
																	cb1->cbpairs->add(ret1);
																	HX_STACK_LINE(6459)
																	if (((cb2 != cb1))){
																		HX_STACK_LINE(6459)
																		cb2->cbpairs->add(ret1);
																	}
																}
																HX_STACK_LINE(6459)
																if ((ret1->zip_listeners)){
																	HX_STACK_LINE(6459)
																	ret1->zip_listeners = false;
																	HX_STACK_LINE(6459)
																	ret1->__validate();
																}
																HX_STACK_LINE(6459)
																_this = ret1;
															}
															HX_STACK_LINE(6459)
															{
																HX_STACK_LINE(6459)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = _this->listeners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(6459)
																while((true)){
																	HX_STACK_LINE(6459)
																	if ((!(((cx_ite2 != null()))))){
																		HX_STACK_LINE(6459)
																		break;
																	}
																	HX_STACK_LINE(6459)
																	::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
																	HX_STACK_LINE(6459)
																	if (((x->event == event))){
																		HX_STACK_LINE(6460)
																		if (((((int(x->itype) & int(inttype))) != (int)0))){
																			HX_STACK_LINE(6461)
																			::zpp_nape::util::ZNPNode_ZPP_InteractionListener _g49;		HX_STACK_VAR(_g49,"_g49");
																			HX_STACK_LINE(6461)
																			{
																				HX_STACK_LINE(6461)
																				::zpp_nape::util::ZNPList_ZPP_InteractionListener _this1 = _g->prelisteners;		HX_STACK_VAR(_this1,"_this1");
																				HX_STACK_LINE(6461)
																				::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp;		HX_STACK_VAR(temp,"temp");
																				HX_STACK_LINE(6461)
																				{
																					HX_STACK_LINE(6461)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1;		HX_STACK_VAR(ret1,"ret1");
																					HX_STACK_LINE(6461)
																					{
																						HX_STACK_LINE(6461)
																						if (((::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool == null()))){
																							HX_STACK_LINE(6461)
																							::zpp_nape::util::ZNPNode_ZPP_InteractionListener _g47 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__new();		HX_STACK_VAR(_g47,"_g47");
																							HX_STACK_LINE(6461)
																							ret1 = _g47;
																						}
																						else{
																							HX_STACK_LINE(6461)
																							ret1 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
																							HX_STACK_LINE(6461)
																							::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret1->next;
																							HX_STACK_LINE(6461)
																							ret1->next = null();
																						}
																						HX_STACK_LINE(6461)
																						Dynamic();
																					}
																					HX_STACK_LINE(6461)
																					ret1->elt = x;
																					HX_STACK_LINE(6461)
																					temp = ret1;
																				}
																				HX_STACK_LINE(6461)
																				if (((lite == null()))){
																					HX_STACK_LINE(6461)
																					temp->next = _this1->head;
																					HX_STACK_LINE(6461)
																					_this1->head = temp;
																				}
																				else{
																					HX_STACK_LINE(6461)
																					temp->next = lite->next;
																					HX_STACK_LINE(6461)
																					lite->next = temp;
																				}
																				HX_STACK_LINE(6461)
																				bool _g48 = _this1->modified = true;		HX_STACK_VAR(_g48,"_g48");
																				HX_STACK_LINE(6461)
																				_this1->pushmod = _g48;
																				HX_STACK_LINE(6461)
																				(_this1->length)++;
																				HX_STACK_LINE(6461)
																				_g49 = temp;
																			}
																			HX_STACK_LINE(6461)
																			lite = _g49;
																			HX_STACK_LINE(6462)
																			anyimpure = (bool(anyimpure) || bool(!(x->pure)));
																		}
																	}
																	HX_STACK_LINE(6459)
																	cx_ite2 = cx_ite2->next;
																}
															}
														}
													}
													HX_STACK_LINE(6465)
													if (((this->prelisteners->head == null()))){
														HX_STACK_LINE(6466)
														cx_ite1 = cx_ite1->next;
														HX_STACK_LINE(6467)
														continue;
													}
													HX_STACK_LINE(6469)
													::zpp_nape::space::ZPP_CallbackSet _g50 = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(_g50,"_g50");
													HX_STACK_LINE(6469)
													callbackset = _g50;
													HX_STACK_LINE(6470)
													if (((callbackset == null()))){
														HX_STACK_LINE(6471)
														::zpp_nape::space::ZPP_CallbackSet _g51 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);		HX_STACK_VAR(_g51,"_g51");
														HX_STACK_LINE(6471)
														ncallbackset = _g51;
														HX_STACK_LINE(6472)
														this->add_callbackset(ncallbackset);
													}
													HX_STACK_LINE(6474)
													if (((bool((callbackset == null())) || bool((bool(((bool((callbackset->COLLISIONstamp != this->stamp)) || bool(continuous)))) && bool((((int(callbackset->COLLISIONstate) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))))){
														HX_STACK_LINE(6475)
														if (((ncallbackset != null()))){
															HX_STACK_LINE(6475)
															callbackset = ncallbackset;
														}
														HX_STACK_LINE(6476)
														if (((callbackset != null()))){
															HX_STACK_LINE(6478)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6479)
															while((true)){
																HX_STACK_LINE(6479)
																if ((!(((cx_ite2 != null()))))){
																	HX_STACK_LINE(6479)
																	break;
																}
																HX_STACK_LINE(6480)
																::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																HX_STACK_LINE(6482)
																if (((listener->itype == ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY))){
																	HX_STACK_LINE(6483)
																	callbackset->COLLISIONstamp = this->stamp;
																	HX_STACK_LINE(6484)
																	callbackset->SENSORstamp = this->stamp;
																	HX_STACK_LINE(6485)
																	callbackset->FLUIDstamp = this->stamp;
																}
																else{
																	HX_STACK_LINE(6487)
																	callbackset->COLLISIONstamp = this->stamp;
																}
																HX_STACK_LINE(6489)
																cx_ite2 = cx_ite2->next;
															}
														}
														HX_STACK_LINE(6496)
														bool pact = arb->active;		HX_STACK_VAR(pact,"pact");
														HX_STACK_LINE(6497)
														arb->active = true;
														HX_STACK_LINE(6498)
														bool emptycontacts = false;		HX_STACK_VAR(emptycontacts,"emptycontacts");
														HX_STACK_LINE(6499)
														{
															HX_STACK_LINE(6499)
															bool fst = true;		HX_STACK_VAR(fst,"fst");
															HX_STACK_LINE(6499)
															::zpp_nape::dynamics::ZPP_Contact pre = null();		HX_STACK_VAR(pre,"pre");
															HX_STACK_LINE(6499)
															::zpp_nape::dynamics::ZPP_IContact prei = null();		HX_STACK_VAR(prei,"prei");
															HX_STACK_LINE(6499)
															::zpp_nape::dynamics::ZPP_IContact cx_itei = arb->innards->next;		HX_STACK_VAR(cx_itei,"cx_itei");
															HX_STACK_LINE(6499)
															arb->hc2 = false;
															HX_STACK_LINE(6499)
															{
																HX_STACK_LINE(6499)
																::zpp_nape::dynamics::ZPP_Contact cx_ite2 = arb->contacts->next;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(6499)
																while((true)){
																	HX_STACK_LINE(6499)
																	if ((!(((cx_ite2 != null()))))){
																		HX_STACK_LINE(6499)
																		break;
																	}
																	HX_STACK_LINE(6499)
																	::zpp_nape::dynamics::ZPP_Contact c = cx_ite2;		HX_STACK_VAR(c,"c");
																	HX_STACK_LINE(6499)
																	{
																		HX_STACK_LINE(6499)
																		if ((((c->stamp + ::nape::Config_obj::arbiterExpirationDelay) < arb->stamp))){
																			HX_STACK_LINE(6499)
																			::zpp_nape::dynamics::ZPP_Contact _g52;		HX_STACK_VAR(_g52,"_g52");
																			HX_STACK_LINE(6499)
																			{
																				HX_STACK_LINE(6499)
																				::zpp_nape::dynamics::ZPP_Contact _this = arb->contacts;		HX_STACK_VAR(_this,"_this");
																				HX_STACK_LINE(6499)
																				::zpp_nape::dynamics::ZPP_Contact old;		HX_STACK_VAR(old,"old");
																				HX_STACK_LINE(6499)
																				::zpp_nape::dynamics::ZPP_Contact ret1;		HX_STACK_VAR(ret1,"ret1");
																				HX_STACK_LINE(6499)
																				if (((pre == null()))){
																					HX_STACK_LINE(6499)
																					old = _this->next;
																					HX_STACK_LINE(6499)
																					ret1 = old->next;
																					HX_STACK_LINE(6499)
																					_this->next = ret1;
																					HX_STACK_LINE(6499)
																					if (((_this->next == null()))){
																						HX_STACK_LINE(6499)
																						_this->pushmod = true;
																					}
																				}
																				else{
																					HX_STACK_LINE(6499)
																					old = pre->next;
																					HX_STACK_LINE(6499)
																					ret1 = old->next;
																					HX_STACK_LINE(6499)
																					pre->next = ret1;
																					HX_STACK_LINE(6499)
																					if (((ret1 == null()))){
																						HX_STACK_LINE(6499)
																						_this->pushmod = true;
																					}
																				}
																				HX_STACK_LINE(6499)
																				old->_inuse = false;
																				HX_STACK_LINE(6499)
																				_this->modified = true;
																				HX_STACK_LINE(6499)
																				(_this->length)--;
																				HX_STACK_LINE(6499)
																				_this->pushmod = true;
																				HX_STACK_LINE(6499)
																				_g52 = ret1;
																			}
																			HX_STACK_LINE(6499)
																			cx_ite2 = _g52;
																			HX_STACK_LINE(6499)
																			::zpp_nape::dynamics::ZPP_IContact _g53;		HX_STACK_VAR(_g53,"_g53");
																			HX_STACK_LINE(6499)
																			{
																				HX_STACK_LINE(6499)
																				::zpp_nape::dynamics::ZPP_IContact _this = arb->innards;		HX_STACK_VAR(_this,"_this");
																				HX_STACK_LINE(6499)
																				::zpp_nape::dynamics::ZPP_IContact old;		HX_STACK_VAR(old,"old");
																				HX_STACK_LINE(6499)
																				::zpp_nape::dynamics::ZPP_IContact ret1;		HX_STACK_VAR(ret1,"ret1");
																				HX_STACK_LINE(6499)
																				if (((prei == null()))){
																					HX_STACK_LINE(6499)
																					old = _this->next;
																					HX_STACK_LINE(6499)
																					ret1 = old->next;
																					HX_STACK_LINE(6499)
																					_this->next = ret1;
																					HX_STACK_LINE(6499)
																					if (((_this->next == null()))){
																						HX_STACK_LINE(6499)
																						_this->pushmod = true;
																					}
																				}
																				else{
																					HX_STACK_LINE(6499)
																					old = prei->next;
																					HX_STACK_LINE(6499)
																					ret1 = old->next;
																					HX_STACK_LINE(6499)
																					prei->next = ret1;
																					HX_STACK_LINE(6499)
																					if (((ret1 == null()))){
																						HX_STACK_LINE(6499)
																						_this->pushmod = true;
																					}
																				}
																				HX_STACK_LINE(6499)
																				old->_inuse = false;
																				HX_STACK_LINE(6499)
																				_this->modified = true;
																				HX_STACK_LINE(6499)
																				(_this->length)--;
																				HX_STACK_LINE(6499)
																				_this->pushmod = true;
																				HX_STACK_LINE(6499)
																				_g53 = ret1;
																			}
																			HX_STACK_LINE(6499)
																			cx_itei = _g53;
																			HX_STACK_LINE(6499)
																			{
																				HX_STACK_LINE(6499)
																				::zpp_nape::dynamics::ZPP_Contact o = c;		HX_STACK_VAR(o,"o");
																				HX_STACK_LINE(6499)
																				o->arbiter = null();
																				HX_STACK_LINE(6499)
																				o->next = ::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool;
																				HX_STACK_LINE(6499)
																				::zpp_nape::dynamics::ZPP_Contact_obj::zpp_pool = o;
																			}
																			HX_STACK_LINE(6499)
																			continue;
																		}
																		HX_STACK_LINE(6499)
																		::zpp_nape::dynamics::ZPP_IContact ci = c->inner;		HX_STACK_VAR(ci,"ci");
																		HX_STACK_LINE(6499)
																		bool pact1 = c->active;		HX_STACK_VAR(pact1,"pact1");
																		HX_STACK_LINE(6499)
																		c->active = (c->stamp == arb->stamp);
																		HX_STACK_LINE(6499)
																		if ((c->active)){
																			HX_STACK_LINE(6499)
																			if ((fst)){
																				HX_STACK_LINE(6499)
																				fst = false;
																				HX_STACK_LINE(6499)
																				arb->c1 = ci;
																				HX_STACK_LINE(6499)
																				arb->oc1 = c;
																			}
																			else{
																				HX_STACK_LINE(6499)
																				arb->hc2 = true;
																				HX_STACK_LINE(6499)
																				arb->c2 = ci;
																				HX_STACK_LINE(6499)
																				arb->oc2 = c;
																			}
																		}
																		HX_STACK_LINE(6499)
																		if (((pact1 != c->active))){
																			HX_STACK_LINE(6499)
																			arb->contacts->modified = true;
																		}
																		HX_STACK_LINE(6499)
																		pre = cx_ite2;
																		HX_STACK_LINE(6499)
																		prei = cx_itei;
																		HX_STACK_LINE(6499)
																		cx_itei = cx_itei->next;
																	}
																	HX_STACK_LINE(6499)
																	cx_ite2 = cx_ite2->next;
																}
															}
															HX_STACK_LINE(6499)
															if ((arb->hc2)){
																HX_STACK_LINE(6499)
																arb->hpc2 = true;
																HX_STACK_LINE(6499)
																if ((arb->oc1->posOnly)){
																	HX_STACK_LINE(6499)
																	::zpp_nape::dynamics::ZPP_IContact tmp = arb->c1;		HX_STACK_VAR(tmp,"tmp");
																	HX_STACK_LINE(6499)
																	arb->c1 = arb->c2;
																	HX_STACK_LINE(6499)
																	arb->c2 = tmp;
																	HX_STACK_LINE(6499)
																	::zpp_nape::dynamics::ZPP_Contact tmp2 = arb->oc1;		HX_STACK_VAR(tmp2,"tmp2");
																	HX_STACK_LINE(6499)
																	arb->oc1 = arb->oc2;
																	HX_STACK_LINE(6499)
																	arb->oc2 = tmp2;
																	HX_STACK_LINE(6499)
																	arb->hc2 = false;
																}
																else{
																	HX_STACK_LINE(6499)
																	if ((arb->oc2->posOnly)){
																		HX_STACK_LINE(6499)
																		arb->hc2 = false;
																	}
																}
																HX_STACK_LINE(6499)
																if ((arb->oc1->posOnly)){
																	HX_STACK_LINE(6499)
																	fst = true;
																}
															}
															else{
																HX_STACK_LINE(6499)
																arb->hpc2 = false;
															}
															HX_STACK_LINE(6499)
															fst;
														}
														HX_STACK_LINE(6501)
														this->precb->zpp_inner->pre_arbiter = arb;
														HX_STACK_LINE(6502)
														this->precb->zpp_inner->set = callbackset;
														HX_STACK_LINE(6503)
														{
															HX_STACK_LINE(6504)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6505)
															while((true)){
																HX_STACK_LINE(6505)
																if ((!(((cx_ite2 != null()))))){
																	HX_STACK_LINE(6505)
																	break;
																}
																HX_STACK_LINE(6506)
																::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																HX_STACK_LINE(6507)
																{
																	HX_STACK_LINE(6508)
																	this->precb->zpp_inner->listener = listener;
																	HX_STACK_LINE(6535)
																	{
																		HX_STACK_LINE(6535)
																		::zpp_nape::callbacks::ZPP_Callback cb = this->precb->zpp_inner;		HX_STACK_VAR(cb,"cb");
																		HX_STACK_LINE(6535)
																		::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																		HX_STACK_LINE(6535)
																		::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																		struct _Function_18_1{
																			inline static bool Block( ::zpp_nape::phys::ZPP_Interactor &o1,::zpp_nape::callbacks::ZPP_InteractionListener &listener){
																				HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",6535,0x2b65ed03)
																				{
																					HX_STACK_LINE(6535)
																					::zpp_nape::callbacks::ZPP_OptionType _this = listener->options1;		HX_STACK_VAR(_this,"_this");
																					HX_STACK_LINE(6535)
																					::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																					HX_STACK_LINE(6535)
																					return (  ((_this->nonemptyintersection(xs,_this->includes))) ? bool(!(_this->nonemptyintersection(xs,_this->excludes))) : bool(false) );
																				}
																				return null();
																			}
																		};
																		struct _Function_18_2{
																			inline static bool Block( ::zpp_nape::phys::ZPP_Interactor &o2,::zpp_nape::callbacks::ZPP_InteractionListener &listener){
																				HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",6535,0x2b65ed03)
																				{
																					HX_STACK_LINE(6535)
																					::zpp_nape::callbacks::ZPP_OptionType _this = listener->options2;		HX_STACK_VAR(_this,"_this");
																					HX_STACK_LINE(6535)
																					::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																					HX_STACK_LINE(6535)
																					return (  ((_this->nonemptyintersection(xs,_this->includes))) ? bool(!(_this->nonemptyintersection(xs,_this->excludes))) : bool(false) );
																				}
																				return null();
																			}
																		};
																		HX_STACK_LINE(6535)
																		if (((  ((_Function_18_1::Block(o1,listener))) ? bool(_Function_18_2::Block(o2,listener)) : bool(false) ))){
																			HX_STACK_LINE(6535)
																			cb->int1 = o1;
																			HX_STACK_LINE(6535)
																			cb->int2 = o2;
																		}
																		else{
																			HX_STACK_LINE(6535)
																			cb->int1 = o2;
																			HX_STACK_LINE(6535)
																			cb->int2 = o1;
																		}
																	}
																	HX_STACK_LINE(6536)
																	this->precb->zpp_inner->pre_swapped = (i1 != this->precb->zpp_inner->int1);
																	HX_STACK_LINE(6537)
																	::nape::callbacks::PreFlag ret1 = listener->handlerp(this->precb);		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(6538)
																	if (((ret1 != null()))){
																		HX_STACK_LINE(6539)
																		::nape::callbacks::PreFlag _g55;		HX_STACK_VAR(_g55,"_g55");
																		HX_STACK_LINE(6539)
																		{
																			HX_STACK_LINE(6539)
																			if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT == null()))){
																				HX_STACK_LINE(6539)
																				::zpp_nape::util::ZPP_Flags_obj::internal = true;
																				HX_STACK_LINE(6539)
																				::nape::callbacks::PreFlag _g54 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(_g54,"_g54");
																				HX_STACK_LINE(6539)
																				::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT = _g54;
																				HX_STACK_LINE(6539)
																				::zpp_nape::util::ZPP_Flags_obj::internal = false;
																			}
																			HX_STACK_LINE(6539)
																			_g55 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;
																		}
																		HX_STACK_LINE(6539)
																		int _g60;		HX_STACK_VAR(_g60,"_g60");
																		HX_STACK_LINE(6539)
																		if (((ret1 == _g55))){
																			HX_STACK_LINE(6539)
																			_g60 = (int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT) | int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS));
																		}
																		else{
																			HX_STACK_LINE(6539)
																			::nape::callbacks::PreFlag _g57;		HX_STACK_VAR(_g57,"_g57");
																			HX_STACK_LINE(6539)
																			{
																				HX_STACK_LINE(6539)
																				if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE == null()))){
																					HX_STACK_LINE(6539)
																					::zpp_nape::util::ZPP_Flags_obj::internal = true;
																					HX_STACK_LINE(6539)
																					::nape::callbacks::PreFlag _g56 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(_g56,"_g56");
																					HX_STACK_LINE(6539)
																					::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE = _g56;
																					HX_STACK_LINE(6539)
																					::zpp_nape::util::ZPP_Flags_obj::internal = false;
																				}
																				HX_STACK_LINE(6539)
																				_g57 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;
																			}
																			HX_STACK_LINE(6539)
																			if (((ret1 == _g57))){
																				HX_STACK_LINE(6539)
																				_g60 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
																			}
																			else{
																				HX_STACK_LINE(6539)
																				::nape::callbacks::PreFlag _g59;		HX_STACK_VAR(_g59,"_g59");
																				HX_STACK_LINE(6539)
																				{
																					HX_STACK_LINE(6539)
																					if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE == null()))){
																						HX_STACK_LINE(6539)
																						::zpp_nape::util::ZPP_Flags_obj::internal = true;
																						HX_STACK_LINE(6539)
																						::nape::callbacks::PreFlag _g58 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(_g58,"_g58");
																						HX_STACK_LINE(6539)
																						::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE = _g58;
																						HX_STACK_LINE(6539)
																						::zpp_nape::util::ZPP_Flags_obj::internal = false;
																					}
																					HX_STACK_LINE(6539)
																					_g59 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;
																				}
																				HX_STACK_LINE(6539)
																				if (((ret1 == _g59))){
																					HX_STACK_LINE(6539)
																					_g60 = (int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE) | int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS));
																				}
																				else{
																					HX_STACK_LINE(6539)
																					_g60 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE;
																				}
																			}
																		}
																		HX_STACK_LINE(6539)
																		arb->immState = _g60;
																	}
																}
																HX_STACK_LINE(6542)
																cx_ite2 = cx_ite2->next;
															}
														}
														HX_STACK_LINE(6548)
														arb->active = pact;
														HX_STACK_LINE(6549)
														if (((callbackset != null()))){
															HX_STACK_LINE(6551)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6552)
															while((true)){
																HX_STACK_LINE(6552)
																if ((!(((cx_ite2 != null()))))){
																	HX_STACK_LINE(6552)
																	break;
																}
																HX_STACK_LINE(6553)
																::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																HX_STACK_LINE(6555)
																if (((listener->itype == ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY))){
																	HX_STACK_LINE(6556)
																	callbackset->COLLISIONstate = arb->immState;
																	HX_STACK_LINE(6557)
																	callbackset->SENSORstate = arb->immState;
																	HX_STACK_LINE(6558)
																	callbackset->FLUIDstate = arb->immState;
																}
																else{
																	HX_STACK_LINE(6560)
																	callbackset->COLLISIONstate = arb->immState;
																}
																HX_STACK_LINE(6562)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
													else{
														HX_STACK_LINE(6567)
														if (((callbackset == null()))){
															HX_STACK_LINE(6568)
															if (((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))){
																HX_STACK_LINE(6568)
																arb->immState = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
															}
														}
														else{
															HX_STACK_LINE(6570)
															arb->immState = callbackset->COLLISIONstate;
														}
													}
												}
												HX_STACK_LINE(6572)
												cx_ite1 = cx_ite1->next;
											}
										}
										HX_STACK_LINE(6576)
										cx_ite = cx_ite->next;
									}
								}
								HX_STACK_LINE(6579)
								if (((bool(anyimpure) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))){
									HX_STACK_LINE(6581)
									if (((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
										HX_STACK_LINE(6582)
										::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(6591)
										if ((!(o->world))){
											HX_STACK_LINE(6600)
											o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
											HX_STACK_LINE(6601)
											if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
												HX_STACK_LINE(6601)
												o->kinematicDelaySleep = true;
											}
											HX_STACK_LINE(6602)
											if ((o->component->sleeping)){
												HX_STACK_LINE(6603)
												this->really_wake(o,false);
											}
										}
									}
									HX_STACK_LINE(6607)
									if (((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC))){
										HX_STACK_LINE(6608)
										::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(6617)
										if ((!(o->world))){
											HX_STACK_LINE(6626)
											o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
											HX_STACK_LINE(6627)
											if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
												HX_STACK_LINE(6627)
												o->kinematicDelaySleep = true;
											}
											HX_STACK_LINE(6628)
											if ((o->component->sleeping)){
												HX_STACK_LINE(6629)
												this->really_wake(o,false);
											}
										}
									}
								}
							}
							HX_STACK_LINE(6690)
							if (((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT))) != (int)0))){
								HX_STACK_LINE(6691)
								if (((bool((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(arb->b1->component->sleeping)))){
									HX_STACK_LINE(6692)
									::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(6701)
									if ((!(o->world))){
										HX_STACK_LINE(6710)
										o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
										HX_STACK_LINE(6711)
										if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
											HX_STACK_LINE(6711)
											o->kinematicDelaySleep = true;
										}
										HX_STACK_LINE(6712)
										if ((o->component->sleeping)){
											HX_STACK_LINE(6713)
											this->really_wake(o,false);
										}
									}
								}
								HX_STACK_LINE(6717)
								if (((bool((arb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_DYNAMIC)) && bool(arb->b2->component->sleeping)))){
									HX_STACK_LINE(6718)
									::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(6727)
									if ((!(o->world))){
										HX_STACK_LINE(6736)
										o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
										HX_STACK_LINE(6737)
										if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
											HX_STACK_LINE(6737)
											o->kinematicDelaySleep = true;
										}
										HX_STACK_LINE(6738)
										if ((o->component->sleeping)){
											HX_STACK_LINE(6739)
											this->really_wake(o,false);
										}
									}
								}
							}
							HX_STACK_LINE(6744)
							if ((arb->sleeping)){
								HX_STACK_LINE(6745)
								arb->sleeping = false;
								HX_STACK_LINE(6746)
								{
									HX_STACK_LINE(6746)
									::zpp_nape::util::ZNPNode_ZPP_ColArbiter temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(6746)
									{
										HX_STACK_LINE(6746)
										::zpp_nape::util::ZNPNode_ZPP_ColArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(6746)
										{
											HX_STACK_LINE(6746)
											if (((::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool == null()))){
												HX_STACK_LINE(6746)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter _g61 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::__new();		HX_STACK_VAR(_g61,"_g61");
												HX_STACK_LINE(6746)
												ret1 = _g61;
											}
											else{
												HX_STACK_LINE(6746)
												ret1 = ::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool;
												HX_STACK_LINE(6746)
												::zpp_nape::util::ZNPNode_ZPP_ColArbiter_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(6746)
												ret1->next = null();
											}
											HX_STACK_LINE(6746)
											Dynamic();
										}
										HX_STACK_LINE(6746)
										ret1->elt = arb;
										HX_STACK_LINE(6746)
										temp = ret1;
									}
									HX_STACK_LINE(6746)
									temp->next = carbs->head;
									HX_STACK_LINE(6746)
									carbs->head = temp;
									HX_STACK_LINE(6746)
									carbs->modified = true;
									HX_STACK_LINE(6746)
									(carbs->length)++;
									HX_STACK_LINE(6746)
									arb;
								}
							}
							HX_STACK_LINE(6748)
							_g63 = arb;
						}
						else{
							HX_STACK_LINE(6750)
							if ((first)){
								HX_STACK_LINE(6751)
								{
									HX_STACK_LINE(6752)
									::zpp_nape::dynamics::ZPP_ColArbiter o = arb;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(6761)
									{
										HX_STACK_LINE(6761)
										o->userdef_dyn_fric = false;
										HX_STACK_LINE(6761)
										o->userdef_stat_fric = false;
										HX_STACK_LINE(6761)
										o->userdef_restitution = false;
										HX_STACK_LINE(6761)
										o->userdef_rfric = false;
										HX_STACK_LINE(6761)
										::zpp_nape::shape::ZPP_Edge _g62 = o->__ref_edge2 = null();		HX_STACK_VAR(_g62,"_g62");
										HX_STACK_LINE(6761)
										o->__ref_edge1 = _g62;
									}
									HX_STACK_LINE(6762)
									o->next = ::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool;
									HX_STACK_LINE(6763)
									::zpp_nape::dynamics::ZPP_ColArbiter_obj::zpp_pool = o;
								}
								HX_STACK_LINE(6768)
								_g63 = null();
							}
							else{
								HX_STACK_LINE(6770)
								_g63 = arb;
							}
						}
					}
					else{
						HX_STACK_LINE(6772)
						_g63 = arb;
					}
				}
				HX_STACK_LINE(6411)
				ret = _g63;
			}
			else{
				HX_STACK_LINE(6776)
				::zpp_nape::dynamics::ZPP_Arbiter xarb;		HX_STACK_VAR(xarb,"xarb");
				HX_STACK_LINE(6776)
				if (((in_arb == null()))){
					HX_STACK_LINE(6777)
					::zpp_nape::dynamics::ZPP_Arbiter ret1 = null();		HX_STACK_VAR(ret1,"ret1");
					HX_STACK_LINE(6778)
					::zpp_nape::phys::ZPP_Body b;		HX_STACK_VAR(b,"b");
					HX_STACK_LINE(6778)
					if (((b1->arbiters->length < b2->arbiters->length))){
						HX_STACK_LINE(6778)
						b = b1;
					}
					else{
						HX_STACK_LINE(6778)
						b = b2;
					}
					HX_STACK_LINE(6779)
					{
						HX_STACK_LINE(6780)
						::zpp_nape::util::ZNPNode_ZPP_Arbiter cx_ite = b->arbiters->head;		HX_STACK_VAR(cx_ite,"cx_ite");
						HX_STACK_LINE(6781)
						while((true)){
							HX_STACK_LINE(6781)
							if ((!(((cx_ite != null()))))){
								HX_STACK_LINE(6781)
								break;
							}
							HX_STACK_LINE(6782)
							::zpp_nape::dynamics::ZPP_Arbiter arb = cx_ite->elt;		HX_STACK_VAR(arb,"arb");
							HX_STACK_LINE(6792)
							if (((bool((arb->id == sa->id)) && bool((arb->di == sb->id))))){
								HX_STACK_LINE(6793)
								ret1 = arb;
								HX_STACK_LINE(6794)
								break;
							}
							HX_STACK_LINE(6797)
							cx_ite = cx_ite->next;
						}
					}
					HX_STACK_LINE(6800)
					xarb = ret1;
				}
				else{
					HX_STACK_LINE(6801)
					xarb = in_arb;
				}
				HX_STACK_LINE(6802)
				bool first = (xarb == null());		HX_STACK_VAR(first,"first");
				HX_STACK_LINE(6803)
				::zpp_nape::dynamics::ZPP_SensorArbiter arb;		HX_STACK_VAR(arb,"arb");
				HX_STACK_LINE(6804)
				bool swapped = false;		HX_STACK_VAR(swapped,"swapped");
				HX_STACK_LINE(6805)
				if ((first)){
					HX_STACK_LINE(6806)
					if (((::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool == null()))){
						HX_STACK_LINE(6807)
						::zpp_nape::dynamics::ZPP_SensorArbiter _g64 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(_g64,"_g64");
						HX_STACK_LINE(6807)
						arb = _g64;
					}
					else{
						HX_STACK_LINE(6813)
						arb = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
						HX_STACK_LINE(6814)
						::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = arb->next;
						HX_STACK_LINE(6815)
						arb->next = null();
					}
					HX_STACK_LINE(6820)
					Dynamic();
				}
				else{
					HX_STACK_LINE(6823)
					if (((xarb->sensorarb == null()))){
						HX_STACK_LINE(6824)
						{
							HX_STACK_LINE(6824)
							xarb->cleared = true;
							HX_STACK_LINE(6824)
							{
								HX_STACK_LINE(6824)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6824)
								{
									HX_STACK_LINE(6824)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(6824)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(6824)
									bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6824)
									while((true)){
										HX_STACK_LINE(6824)
										if ((!(((cur != null()))))){
											HX_STACK_LINE(6824)
											break;
										}
										HX_STACK_LINE(6824)
										if (((cur->elt == xarb))){
											HX_STACK_LINE(6824)
											{
												HX_STACK_LINE(6824)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(6824)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
												HX_STACK_LINE(6824)
												if (((pre == null()))){
													HX_STACK_LINE(6824)
													old = _this->head;
													HX_STACK_LINE(6824)
													ret2 = old->next;
													HX_STACK_LINE(6824)
													_this->head = ret2;
													HX_STACK_LINE(6824)
													if (((_this->head == null()))){
														HX_STACK_LINE(6824)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(6824)
													old = pre->next;
													HX_STACK_LINE(6824)
													ret2 = old->next;
													HX_STACK_LINE(6824)
													pre->next = ret2;
													HX_STACK_LINE(6824)
													if (((ret2 == null()))){
														HX_STACK_LINE(6824)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6824)
												{
													HX_STACK_LINE(6824)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6824)
													o->elt = null();
													HX_STACK_LINE(6824)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(6824)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6824)
												_this->modified = true;
												HX_STACK_LINE(6824)
												(_this->length)--;
												HX_STACK_LINE(6824)
												_this->pushmod = true;
												HX_STACK_LINE(6824)
												ret2;
											}
											HX_STACK_LINE(6824)
											ret1 = true;
											HX_STACK_LINE(6824)
											break;
										}
										HX_STACK_LINE(6824)
										pre = cur;
										HX_STACK_LINE(6824)
										cur = cur->next;
									}
									HX_STACK_LINE(6824)
									ret1;
								}
							}
							HX_STACK_LINE(6824)
							{
								HX_STACK_LINE(6824)
								::zpp_nape::util::ZNPList_ZPP_Arbiter _this = xarb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
								HX_STACK_LINE(6824)
								{
									HX_STACK_LINE(6824)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter pre = null();		HX_STACK_VAR(pre,"pre");
									HX_STACK_LINE(6824)
									::zpp_nape::util::ZNPNode_ZPP_Arbiter cur = _this->head;		HX_STACK_VAR(cur,"cur");
									HX_STACK_LINE(6824)
									bool ret1 = false;		HX_STACK_VAR(ret1,"ret1");
									HX_STACK_LINE(6824)
									while((true)){
										HX_STACK_LINE(6824)
										if ((!(((cur != null()))))){
											HX_STACK_LINE(6824)
											break;
										}
										HX_STACK_LINE(6824)
										if (((cur->elt == xarb))){
											HX_STACK_LINE(6824)
											{
												HX_STACK_LINE(6824)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter old;		HX_STACK_VAR(old,"old");
												HX_STACK_LINE(6824)
												::zpp_nape::util::ZNPNode_ZPP_Arbiter ret2;		HX_STACK_VAR(ret2,"ret2");
												HX_STACK_LINE(6824)
												if (((pre == null()))){
													HX_STACK_LINE(6824)
													old = _this->head;
													HX_STACK_LINE(6824)
													ret2 = old->next;
													HX_STACK_LINE(6824)
													_this->head = ret2;
													HX_STACK_LINE(6824)
													if (((_this->head == null()))){
														HX_STACK_LINE(6824)
														_this->pushmod = true;
													}
												}
												else{
													HX_STACK_LINE(6824)
													old = pre->next;
													HX_STACK_LINE(6824)
													ret2 = old->next;
													HX_STACK_LINE(6824)
													pre->next = ret2;
													HX_STACK_LINE(6824)
													if (((ret2 == null()))){
														HX_STACK_LINE(6824)
														_this->pushmod = true;
													}
												}
												HX_STACK_LINE(6824)
												{
													HX_STACK_LINE(6824)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter o = old;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6824)
													o->elt = null();
													HX_STACK_LINE(6824)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(6824)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6824)
												_this->modified = true;
												HX_STACK_LINE(6824)
												(_this->length)--;
												HX_STACK_LINE(6824)
												_this->pushmod = true;
												HX_STACK_LINE(6824)
												ret2;
											}
											HX_STACK_LINE(6824)
											ret1 = true;
											HX_STACK_LINE(6824)
											break;
										}
										HX_STACK_LINE(6824)
										pre = cur;
										HX_STACK_LINE(6824)
										cur = cur->next;
									}
									HX_STACK_LINE(6824)
									ret1;
								}
							}
							HX_STACK_LINE(6824)
							if (((xarb->pair != null()))){
								HX_STACK_LINE(6824)
								xarb->pair->arb = null();
								HX_STACK_LINE(6824)
								xarb->pair = null();
							}
							HX_STACK_LINE(6824)
							xarb->active = false;
							HX_STACK_LINE(6824)
							this->f_arbiters->modified = true;
						}
						HX_STACK_LINE(6825)
						{
							HX_STACK_LINE(6826)
							if (((::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool == null()))){
								HX_STACK_LINE(6827)
								::zpp_nape::dynamics::ZPP_SensorArbiter _g65 = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(_g65,"_g65");
								HX_STACK_LINE(6827)
								arb = _g65;
							}
							else{
								HX_STACK_LINE(6833)
								arb = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
								HX_STACK_LINE(6834)
								::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = arb->next;
								HX_STACK_LINE(6835)
								arb->next = null();
							}
							HX_STACK_LINE(6840)
							Dynamic();
						}
						HX_STACK_LINE(6842)
						arb->intchange = true;
						HX_STACK_LINE(6843)
						first = true;
						HX_STACK_LINE(6844)
						swapped = true;
					}
					else{
						HX_STACK_LINE(6846)
						arb = xarb->sensorarb;
					}
				}
				HX_STACK_LINE(6848)
				::zpp_nape::dynamics::ZPP_Arbiter _g92;		HX_STACK_VAR(_g92,"_g92");
				HX_STACK_LINE(6848)
				{
					HX_STACK_LINE(6849)
					int inttype = ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_SENSOR;		HX_STACK_VAR(inttype,"inttype");
					HX_STACK_LINE(6850)
					if (((bool((bool(first) || bool((arb->stamp != this->stamp)))) || bool(continuous)))){
						HX_STACK_LINE(6851)
						arb->stamp = this->stamp;
						HX_STACK_LINE(6852)
						if ((::zpp_nape::geom::ZPP_Collide_obj::testCollide(sa,sb))){
							HX_STACK_LINE(6853)
							if ((first)){
								HX_STACK_LINE(6854)
								{
									HX_STACK_LINE(6854)
									arb->b1 = s1->body;
									HX_STACK_LINE(6854)
									arb->ws1 = s1;
									HX_STACK_LINE(6854)
									arb->b2 = s2->body;
									HX_STACK_LINE(6854)
									arb->ws2 = s2;
									HX_STACK_LINE(6854)
									arb->id = sa->id;
									HX_STACK_LINE(6854)
									arb->di = sb->id;
									HX_STACK_LINE(6854)
									{
										HX_STACK_LINE(6854)
										::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b1->arbiters;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6854)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter temp;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6854)
										{
											HX_STACK_LINE(6854)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6854)
											{
												HX_STACK_LINE(6854)
												if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
													HX_STACK_LINE(6854)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter _g66 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(_g66,"_g66");
													HX_STACK_LINE(6854)
													ret1 = _g66;
												}
												else{
													HX_STACK_LINE(6854)
													ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(6854)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6854)
													ret1->next = null();
												}
												HX_STACK_LINE(6854)
												Dynamic();
											}
											HX_STACK_LINE(6854)
											ret1->elt = arb;
											HX_STACK_LINE(6854)
											temp = ret1;
										}
										HX_STACK_LINE(6854)
										temp->next = _this->head;
										HX_STACK_LINE(6854)
										_this->head = temp;
										HX_STACK_LINE(6854)
										_this->modified = true;
										HX_STACK_LINE(6854)
										(_this->length)++;
										HX_STACK_LINE(6854)
										arb;
									}
									HX_STACK_LINE(6854)
									{
										HX_STACK_LINE(6854)
										::zpp_nape::util::ZNPList_ZPP_Arbiter _this = arb->b2->arbiters;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6854)
										::zpp_nape::util::ZNPNode_ZPP_Arbiter temp;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6854)
										{
											HX_STACK_LINE(6854)
											::zpp_nape::util::ZNPNode_ZPP_Arbiter ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6854)
											{
												HX_STACK_LINE(6854)
												if (((::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool == null()))){
													HX_STACK_LINE(6854)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter _g67 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::__new();		HX_STACK_VAR(_g67,"_g67");
													HX_STACK_LINE(6854)
													ret1 = _g67;
												}
												else{
													HX_STACK_LINE(6854)
													ret1 = ::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool;
													HX_STACK_LINE(6854)
													::zpp_nape::util::ZNPNode_ZPP_Arbiter_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6854)
													ret1->next = null();
												}
												HX_STACK_LINE(6854)
												Dynamic();
											}
											HX_STACK_LINE(6854)
											ret1->elt = arb;
											HX_STACK_LINE(6854)
											temp = ret1;
										}
										HX_STACK_LINE(6854)
										temp->next = _this->head;
										HX_STACK_LINE(6854)
										_this->head = temp;
										HX_STACK_LINE(6854)
										_this->modified = true;
										HX_STACK_LINE(6854)
										(_this->length)++;
										HX_STACK_LINE(6854)
										arb;
									}
									HX_STACK_LINE(6854)
									arb->active = true;
									HX_STACK_LINE(6854)
									arb->present = (int)0;
									HX_STACK_LINE(6854)
									arb->cleared = false;
									HX_STACK_LINE(6854)
									arb->sleeping = false;
									HX_STACK_LINE(6854)
									arb->fresh = false;
									HX_STACK_LINE(6854)
									arb->presentable = false;
								}
								HX_STACK_LINE(6855)
								{
									HX_STACK_LINE(6855)
									::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this = this->s_arbiters;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(6855)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(6855)
									{
										HX_STACK_LINE(6855)
										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(6855)
										{
											HX_STACK_LINE(6855)
											if (((::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool == null()))){
												HX_STACK_LINE(6855)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter _g68 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(_g68,"_g68");
												HX_STACK_LINE(6855)
												ret1 = _g68;
											}
											else{
												HX_STACK_LINE(6855)
												ret1 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
												HX_STACK_LINE(6855)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(6855)
												ret1->next = null();
											}
											HX_STACK_LINE(6855)
											Dynamic();
										}
										HX_STACK_LINE(6855)
										ret1->elt = arb;
										HX_STACK_LINE(6855)
										temp = ret1;
									}
									HX_STACK_LINE(6855)
									temp->next = _this->head;
									HX_STACK_LINE(6855)
									_this->head = temp;
									HX_STACK_LINE(6855)
									_this->modified = true;
									HX_STACK_LINE(6855)
									(_this->length)++;
									HX_STACK_LINE(6855)
									arb;
								}
								HX_STACK_LINE(6856)
								arb->fresh = !(swapped);
							}
							else{
								HX_STACK_LINE(6859)
								arb->fresh = (bool((arb->up_stamp < (this->stamp - (int)1))) || bool((bool((arb->endGenerated == this->stamp)) && bool(continuous))));
							}
							HX_STACK_LINE(6861)
							arb->up_stamp = arb->stamp;
							HX_STACK_LINE(6862)
							if (((bool(arb->fresh) || bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))){
								HX_STACK_LINE(6863)
								arb->immState = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
								HX_STACK_LINE(6864)
								bool anyimpure = false;		HX_STACK_VAR(anyimpure,"anyimpure");
								HX_STACK_LINE(6865)
								::zpp_nape::shape::ZPP_Shape arbs1;		HX_STACK_VAR(arbs1,"arbs1");
								HX_STACK_LINE(6865)
								if (((arb->ws1->id > arb->ws2->id))){
									HX_STACK_LINE(6865)
									arbs1 = arb->ws2;
								}
								else{
									HX_STACK_LINE(6865)
									arbs1 = arb->ws1;
								}
								HX_STACK_LINE(6866)
								::zpp_nape::shape::ZPP_Shape arbs2;		HX_STACK_VAR(arbs2,"arbs2");
								HX_STACK_LINE(6866)
								if (((arb->ws1->id > arb->ws2->id))){
									HX_STACK_LINE(6866)
									arbs2 = arb->ws1;
								}
								else{
									HX_STACK_LINE(6866)
									arbs2 = arb->ws2;
								}
								HX_STACK_LINE(6867)
								{
									HX_STACK_LINE(6867)
									{
										HX_STACK_LINE(6867)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6867)
										{
											HX_STACK_LINE(6867)
											while((true)){
												HX_STACK_LINE(6867)
												if ((!((!(((_this->head == null()))))))){
													HX_STACK_LINE(6867)
													break;
												}
												HX_STACK_LINE(6867)
												::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(6867)
												_this->head = ret1->next;
												HX_STACK_LINE(6867)
												{
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6867)
													o->elt = null();
													HX_STACK_LINE(6867)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6867)
												if (((_this->head == null()))){
													HX_STACK_LINE(6867)
													_this->pushmod = true;
												}
												HX_STACK_LINE(6867)
												_this->modified = true;
												HX_STACK_LINE(6867)
												(_this->length)--;
											}
											HX_STACK_LINE(6867)
											_this->pushmod = true;
										}
									}
									HX_STACK_LINE(6867)
									{
										HX_STACK_LINE(6867)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6867)
										{
											HX_STACK_LINE(6867)
											while((true)){
												HX_STACK_LINE(6867)
												if ((!((!(((_this->head == null()))))))){
													HX_STACK_LINE(6867)
													break;
												}
												HX_STACK_LINE(6867)
												::zpp_nape::util::ZNPNode_ZPP_Interactor ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
												HX_STACK_LINE(6867)
												_this->head = ret1->next;
												HX_STACK_LINE(6867)
												{
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret1;		HX_STACK_VAR(o,"o");
													HX_STACK_LINE(6867)
													o->elt = null();
													HX_STACK_LINE(6867)
													o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
												}
												HX_STACK_LINE(6867)
												if (((_this->head == null()))){
													HX_STACK_LINE(6867)
													_this->pushmod = true;
												}
												HX_STACK_LINE(6867)
												_this->modified = true;
												HX_STACK_LINE(6867)
												(_this->length)--;
											}
											HX_STACK_LINE(6867)
											_this->pushmod = true;
										}
									}
									HX_STACK_LINE(6867)
									if (((arbs1->cbSet != null()))){
										HX_STACK_LINE(6867)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6867)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6867)
										{
											HX_STACK_LINE(6867)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6867)
											{
												HX_STACK_LINE(6867)
												if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor _g69 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g69,"_g69");
													HX_STACK_LINE(6867)
													ret1 = _g69;
												}
												else{
													HX_STACK_LINE(6867)
													ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6867)
													ret1->next = null();
												}
												HX_STACK_LINE(6867)
												Dynamic();
											}
											HX_STACK_LINE(6867)
											ret1->elt = arbs1;
											HX_STACK_LINE(6867)
											temp = ret1;
										}
										HX_STACK_LINE(6867)
										temp->next = _this->head;
										HX_STACK_LINE(6867)
										_this->head = temp;
										HX_STACK_LINE(6867)
										_this->modified = true;
										HX_STACK_LINE(6867)
										(_this->length)++;
										HX_STACK_LINE(6867)
										arbs1;
									}
									HX_STACK_LINE(6867)
									if (((arbs1->body->cbSet != null()))){
										HX_STACK_LINE(6867)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6867)
										::zpp_nape::phys::ZPP_Interactor o = arbs1->body;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(6867)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6867)
										{
											HX_STACK_LINE(6867)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6867)
											{
												HX_STACK_LINE(6867)
												if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor _g70 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g70,"_g70");
													HX_STACK_LINE(6867)
													ret1 = _g70;
												}
												else{
													HX_STACK_LINE(6867)
													ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6867)
													ret1->next = null();
												}
												HX_STACK_LINE(6867)
												Dynamic();
											}
											HX_STACK_LINE(6867)
											ret1->elt = o;
											HX_STACK_LINE(6867)
											temp = ret1;
										}
										HX_STACK_LINE(6867)
										temp->next = _this->head;
										HX_STACK_LINE(6867)
										_this->head = temp;
										HX_STACK_LINE(6867)
										_this->modified = true;
										HX_STACK_LINE(6867)
										(_this->length)++;
										HX_STACK_LINE(6867)
										o;
									}
									HX_STACK_LINE(6867)
									if (((arbs2->cbSet != null()))){
										HX_STACK_LINE(6867)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6867)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6867)
										{
											HX_STACK_LINE(6867)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6867)
											{
												HX_STACK_LINE(6867)
												if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor _g71 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g71,"_g71");
													HX_STACK_LINE(6867)
													ret1 = _g71;
												}
												else{
													HX_STACK_LINE(6867)
													ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6867)
													ret1->next = null();
												}
												HX_STACK_LINE(6867)
												Dynamic();
											}
											HX_STACK_LINE(6867)
											ret1->elt = arbs2;
											HX_STACK_LINE(6867)
											temp = ret1;
										}
										HX_STACK_LINE(6867)
										temp->next = _this->head;
										HX_STACK_LINE(6867)
										_this->head = temp;
										HX_STACK_LINE(6867)
										_this->modified = true;
										HX_STACK_LINE(6867)
										(_this->length)++;
										HX_STACK_LINE(6867)
										arbs2;
									}
									HX_STACK_LINE(6867)
									if (((arbs2->body->cbSet != null()))){
										HX_STACK_LINE(6867)
										::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
										HX_STACK_LINE(6867)
										::zpp_nape::phys::ZPP_Interactor o = arbs2->body;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(6867)
										::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
										HX_STACK_LINE(6867)
										{
											HX_STACK_LINE(6867)
											::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
											HX_STACK_LINE(6867)
											{
												HX_STACK_LINE(6867)
												if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor _g72 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g72,"_g72");
													HX_STACK_LINE(6867)
													ret1 = _g72;
												}
												else{
													HX_STACK_LINE(6867)
													ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
													HX_STACK_LINE(6867)
													ret1->next = null();
												}
												HX_STACK_LINE(6867)
												Dynamic();
											}
											HX_STACK_LINE(6867)
											ret1->elt = o;
											HX_STACK_LINE(6867)
											temp = ret1;
										}
										HX_STACK_LINE(6867)
										temp->next = _this->head;
										HX_STACK_LINE(6867)
										_this->head = temp;
										HX_STACK_LINE(6867)
										_this->modified = true;
										HX_STACK_LINE(6867)
										(_this->length)++;
										HX_STACK_LINE(6867)
										o;
									}
									HX_STACK_LINE(6867)
									::zpp_nape::phys::ZPP_Compound c1 = arbs1->body->compound;		HX_STACK_VAR(c1,"c1");
									HX_STACK_LINE(6867)
									::zpp_nape::phys::ZPP_Compound c2 = arbs2->body->compound;		HX_STACK_VAR(c2,"c2");
									HX_STACK_LINE(6867)
									while((true)){
										HX_STACK_LINE(6867)
										if ((!(((c1 != c2))))){
											HX_STACK_LINE(6867)
											break;
										}
										HX_STACK_LINE(6867)
										int d1;		HX_STACK_VAR(d1,"d1");
										HX_STACK_LINE(6867)
										if (((c1 == null()))){
											HX_STACK_LINE(6867)
											d1 = (int)0;
										}
										else{
											HX_STACK_LINE(6867)
											d1 = c1->depth;
										}
										HX_STACK_LINE(6867)
										int d2;		HX_STACK_VAR(d2,"d2");
										HX_STACK_LINE(6867)
										if (((c2 == null()))){
											HX_STACK_LINE(6867)
											d2 = (int)0;
										}
										else{
											HX_STACK_LINE(6867)
											d2 = c2->depth;
										}
										HX_STACK_LINE(6867)
										if (((d1 < d2))){
											HX_STACK_LINE(6867)
											if (((c2->cbSet != null()))){
												HX_STACK_LINE(6867)
												::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(6867)
												::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
												HX_STACK_LINE(6867)
												{
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
													HX_STACK_LINE(6867)
													{
														HX_STACK_LINE(6867)
														if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
															HX_STACK_LINE(6867)
															::zpp_nape::util::ZNPNode_ZPP_Interactor _g73 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g73,"_g73");
															HX_STACK_LINE(6867)
															ret1 = _g73;
														}
														else{
															HX_STACK_LINE(6867)
															ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
															HX_STACK_LINE(6867)
															::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
															HX_STACK_LINE(6867)
															ret1->next = null();
														}
														HX_STACK_LINE(6867)
														Dynamic();
													}
													HX_STACK_LINE(6867)
													ret1->elt = c2;
													HX_STACK_LINE(6867)
													temp = ret1;
												}
												HX_STACK_LINE(6867)
												temp->next = _this->head;
												HX_STACK_LINE(6867)
												_this->head = temp;
												HX_STACK_LINE(6867)
												_this->modified = true;
												HX_STACK_LINE(6867)
												(_this->length)++;
												HX_STACK_LINE(6867)
												c2;
											}
											HX_STACK_LINE(6867)
											c2 = c2->compound;
										}
										else{
											HX_STACK_LINE(6867)
											if (((c1->cbSet != null()))){
												HX_STACK_LINE(6867)
												::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
												HX_STACK_LINE(6867)
												::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
												HX_STACK_LINE(6867)
												{
													HX_STACK_LINE(6867)
													::zpp_nape::util::ZNPNode_ZPP_Interactor ret1;		HX_STACK_VAR(ret1,"ret1");
													HX_STACK_LINE(6867)
													{
														HX_STACK_LINE(6867)
														if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
															HX_STACK_LINE(6867)
															::zpp_nape::util::ZNPNode_ZPP_Interactor _g74 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g74,"_g74");
															HX_STACK_LINE(6867)
															ret1 = _g74;
														}
														else{
															HX_STACK_LINE(6867)
															ret1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
															HX_STACK_LINE(6867)
															::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret1->next;
															HX_STACK_LINE(6867)
															ret1->next = null();
														}
														HX_STACK_LINE(6867)
														Dynamic();
													}
													HX_STACK_LINE(6867)
													ret1->elt = c1;
													HX_STACK_LINE(6867)
													temp = ret1;
												}
												HX_STACK_LINE(6867)
												temp->next = _this->head;
												HX_STACK_LINE(6867)
												_this->head = temp;
												HX_STACK_LINE(6867)
												_this->modified = true;
												HX_STACK_LINE(6867)
												(_this->length)++;
												HX_STACK_LINE(6867)
												c1;
											}
											HX_STACK_LINE(6867)
											c1 = c1->compound;
										}
									}
								}
								HX_STACK_LINE(6868)
								{
									HX_STACK_LINE(6869)
									::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite = this->mrca1->head;		HX_STACK_VAR(cx_ite,"cx_ite");
									HX_STACK_LINE(6870)
									while((true)){
										HX_STACK_LINE(6870)
										if ((!(((cx_ite != null()))))){
											HX_STACK_LINE(6870)
											break;
										}
										HX_STACK_LINE(6871)
										::zpp_nape::phys::ZPP_Interactor i1 = cx_ite->elt;		HX_STACK_VAR(i1,"i1");
										HX_STACK_LINE(6873)
										{
											HX_STACK_LINE(6874)
											::zpp_nape::util::ZNPNode_ZPP_Interactor cx_ite1 = this->mrca2->head;		HX_STACK_VAR(cx_ite1,"cx_ite1");
											HX_STACK_LINE(6875)
											while((true)){
												HX_STACK_LINE(6875)
												if ((!(((cx_ite1 != null()))))){
													HX_STACK_LINE(6875)
													break;
												}
												HX_STACK_LINE(6876)
												::zpp_nape::phys::ZPP_Interactor i2 = cx_ite1->elt;		HX_STACK_VAR(i2,"i2");
												HX_STACK_LINE(6877)
												{
													HX_STACK_LINE(6878)
													::zpp_nape::callbacks::ZPP_CbSet cb1 = i1->cbSet;		HX_STACK_VAR(cb1,"cb1");
													HX_STACK_LINE(6879)
													::zpp_nape::callbacks::ZPP_CbSet cb2 = i2->cbSet;		HX_STACK_VAR(cb2,"cb2");
													struct _Function_13_1{
														inline static bool Block( ::zpp_nape::callbacks::ZPP_CbSet &cb2,::zpp_nape::callbacks::ZPP_CbSet &cb1){
															HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",6888,0x2b65ed03)
															{
																HX_STACK_LINE(6888)
																::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
																HX_STACK_LINE(6888)
																{
																	HX_STACK_LINE(6888)
																	::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(6888)
																	::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
																	HX_STACK_LINE(6888)
																	if (((cb1->cbpairs->length < cb2->cbpairs->length))){
																		HX_STACK_LINE(6888)
																		pairs = cb1->cbpairs;
																	}
																	else{
																		HX_STACK_LINE(6888)
																		pairs = cb2->cbpairs;
																	}
																	HX_STACK_LINE(6888)
																	{
																		HX_STACK_LINE(6888)
																		::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																		HX_STACK_LINE(6888)
																		while((true)){
																			HX_STACK_LINE(6888)
																			if ((!(((cx_ite2 != null()))))){
																				HX_STACK_LINE(6888)
																				break;
																			}
																			HX_STACK_LINE(6888)
																			::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																			HX_STACK_LINE(6888)
																			if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																				HX_STACK_LINE(6888)
																				ret1 = p;
																				HX_STACK_LINE(6888)
																				break;
																			}
																			HX_STACK_LINE(6888)
																			cx_ite2 = cx_ite2->next;
																		}
																	}
																	HX_STACK_LINE(6888)
																	if (((ret1 == null()))){
																		HX_STACK_LINE(6888)
																		::zpp_nape::callbacks::ZPP_CbSetPair _g76;		HX_STACK_VAR(_g76,"_g76");
																		HX_STACK_LINE(6888)
																		{
																			HX_STACK_LINE(6888)
																			::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																			HX_STACK_LINE(6888)
																			{
																				HX_STACK_LINE(6888)
																				if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																					HX_STACK_LINE(6888)
																					::zpp_nape::callbacks::ZPP_CbSetPair _g75 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g75,"_g75");
																					HX_STACK_LINE(6888)
																					ret2 = _g75;
																				}
																				else{
																					HX_STACK_LINE(6888)
																					ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																					HX_STACK_LINE(6888)
																					::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																					HX_STACK_LINE(6888)
																					ret2->next = null();
																				}
																				HX_STACK_LINE(6888)
																				ret2->zip_listeners = true;
																			}
																			HX_STACK_LINE(6888)
																			if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																				HX_STACK_LINE(6888)
																				ret2->a = cb1;
																				HX_STACK_LINE(6888)
																				ret2->b = cb2;
																			}
																			else{
																				HX_STACK_LINE(6888)
																				ret2->a = cb2;
																				HX_STACK_LINE(6888)
																				ret2->b = cb1;
																			}
																			HX_STACK_LINE(6888)
																			_g76 = ret2;
																		}
																		HX_STACK_LINE(6888)
																		ret1 = _g76;
																		HX_STACK_LINE(6888)
																		cb1->cbpairs->add(ret1);
																		HX_STACK_LINE(6888)
																		if (((cb2 != cb1))){
																			HX_STACK_LINE(6888)
																			cb2->cbpairs->add(ret1);
																		}
																	}
																	HX_STACK_LINE(6888)
																	if ((ret1->zip_listeners)){
																		HX_STACK_LINE(6888)
																		ret1->zip_listeners = false;
																		HX_STACK_LINE(6888)
																		ret1->__validate();
																	}
																	HX_STACK_LINE(6888)
																	_this = ret1;
																}
																HX_STACK_LINE(6888)
																return (_this->listeners->head == null());
															}
															return null();
														}
													};
													HX_STACK_LINE(6888)
													if ((_Function_13_1::Block(cb2,cb1))){
														HX_STACK_LINE(6889)
														cx_ite1 = cx_ite1->next;
														HX_STACK_LINE(6890)
														continue;
													}
													HX_STACK_LINE(6892)
													::zpp_nape::space::ZPP_CallbackSet callbackset = null();		HX_STACK_VAR(callbackset,"callbackset");
													HX_STACK_LINE(6893)
													::zpp_nape::space::ZPP_CallbackSet ncallbackset = null();		HX_STACK_VAR(ncallbackset,"ncallbackset");
													HX_STACK_LINE(6894)
													{
														HX_STACK_LINE(6894)
														::zpp_nape::util::ZNPList_ZPP_InteractionListener _this = this->prelisteners;		HX_STACK_VAR(_this,"_this");
														HX_STACK_LINE(6894)
														{
															HX_STACK_LINE(6894)
															while((true)){
																HX_STACK_LINE(6894)
																if ((!((!(((_this->head == null()))))))){
																	HX_STACK_LINE(6894)
																	break;
																}
																HX_STACK_LINE(6894)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1 = _this->head;		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(6894)
																_this->head = ret1->next;
																HX_STACK_LINE(6894)
																{
																	HX_STACK_LINE(6894)
																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener o = ret1;		HX_STACK_VAR(o,"o");
																	HX_STACK_LINE(6894)
																	o->elt = null();
																	HX_STACK_LINE(6894)
																	o->next = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
																	HX_STACK_LINE(6894)
																	::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = o;
																}
																HX_STACK_LINE(6894)
																if (((_this->head == null()))){
																	HX_STACK_LINE(6894)
																	_this->pushmod = true;
																}
																HX_STACK_LINE(6894)
																_this->modified = true;
																HX_STACK_LINE(6894)
																(_this->length)--;
															}
															HX_STACK_LINE(6894)
															_this->pushmod = true;
														}
													}
													HX_STACK_LINE(6895)
													::zpp_nape::util::ZNPNode_ZPP_InteractionListener lite = null();		HX_STACK_VAR(lite,"lite");
													HX_STACK_LINE(6896)
													{
														HX_STACK_LINE(6896)
														int event = ::zpp_nape::util::ZPP_Flags_obj::id_CbEvent_PRE;		HX_STACK_VAR(event,"event");
														HX_STACK_LINE(6896)
														{
															HX_STACK_LINE(6896)
															::zpp_nape::callbacks::ZPP_CbSetPair _this;		HX_STACK_VAR(_this,"_this");
															HX_STACK_LINE(6896)
															{
																HX_STACK_LINE(6896)
																::zpp_nape::callbacks::ZPP_CbSetPair ret1 = null();		HX_STACK_VAR(ret1,"ret1");
																HX_STACK_LINE(6896)
																::zpp_nape::util::ZNPList_ZPP_CbSetPair pairs;		HX_STACK_VAR(pairs,"pairs");
																HX_STACK_LINE(6896)
																if (((cb1->cbpairs->length < cb2->cbpairs->length))){
																	HX_STACK_LINE(6896)
																	pairs = cb1->cbpairs;
																}
																else{
																	HX_STACK_LINE(6896)
																	pairs = cb2->cbpairs;
																}
																HX_STACK_LINE(6896)
																{
																	HX_STACK_LINE(6896)
																	::zpp_nape::util::ZNPNode_ZPP_CbSetPair cx_ite2 = pairs->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																	HX_STACK_LINE(6896)
																	while((true)){
																		HX_STACK_LINE(6896)
																		if ((!(((cx_ite2 != null()))))){
																			HX_STACK_LINE(6896)
																			break;
																		}
																		HX_STACK_LINE(6896)
																		::zpp_nape::callbacks::ZPP_CbSetPair p = cx_ite2->elt;		HX_STACK_VAR(p,"p");
																		HX_STACK_LINE(6896)
																		if (((bool((bool((p->a == cb1)) && bool((p->b == cb2)))) || bool((bool((p->a == cb2)) && bool((p->b == cb1))))))){
																			HX_STACK_LINE(6896)
																			ret1 = p;
																			HX_STACK_LINE(6896)
																			break;
																		}
																		HX_STACK_LINE(6896)
																		cx_ite2 = cx_ite2->next;
																	}
																}
																HX_STACK_LINE(6896)
																if (((ret1 == null()))){
																	HX_STACK_LINE(6896)
																	::zpp_nape::callbacks::ZPP_CbSetPair _g78;		HX_STACK_VAR(_g78,"_g78");
																	HX_STACK_LINE(6896)
																	{
																		HX_STACK_LINE(6896)
																		::zpp_nape::callbacks::ZPP_CbSetPair ret2;		HX_STACK_VAR(ret2,"ret2");
																		HX_STACK_LINE(6896)
																		{
																			HX_STACK_LINE(6896)
																			if (((::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool == null()))){
																				HX_STACK_LINE(6896)
																				::zpp_nape::callbacks::ZPP_CbSetPair _g77 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::__new();		HX_STACK_VAR(_g77,"_g77");
																				HX_STACK_LINE(6896)
																				ret2 = _g77;
																			}
																			else{
																				HX_STACK_LINE(6896)
																				ret2 = ::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool;
																				HX_STACK_LINE(6896)
																				::zpp_nape::callbacks::ZPP_CbSetPair_obj::zpp_pool = ret2->next;
																				HX_STACK_LINE(6896)
																				ret2->next = null();
																			}
																			HX_STACK_LINE(6896)
																			ret2->zip_listeners = true;
																		}
																		HX_STACK_LINE(6896)
																		if ((::zpp_nape::callbacks::ZPP_CbSet_obj::setlt(cb1,cb2))){
																			HX_STACK_LINE(6896)
																			ret2->a = cb1;
																			HX_STACK_LINE(6896)
																			ret2->b = cb2;
																		}
																		else{
																			HX_STACK_LINE(6896)
																			ret2->a = cb2;
																			HX_STACK_LINE(6896)
																			ret2->b = cb1;
																		}
																		HX_STACK_LINE(6896)
																		_g78 = ret2;
																	}
																	HX_STACK_LINE(6896)
																	ret1 = _g78;
																	HX_STACK_LINE(6896)
																	cb1->cbpairs->add(ret1);
																	HX_STACK_LINE(6896)
																	if (((cb2 != cb1))){
																		HX_STACK_LINE(6896)
																		cb2->cbpairs->add(ret1);
																	}
																}
																HX_STACK_LINE(6896)
																if ((ret1->zip_listeners)){
																	HX_STACK_LINE(6896)
																	ret1->zip_listeners = false;
																	HX_STACK_LINE(6896)
																	ret1->__validate();
																}
																HX_STACK_LINE(6896)
																_this = ret1;
															}
															HX_STACK_LINE(6896)
															{
																HX_STACK_LINE(6896)
																::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = _this->listeners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
																HX_STACK_LINE(6896)
																while((true)){
																	HX_STACK_LINE(6896)
																	if ((!(((cx_ite2 != null()))))){
																		HX_STACK_LINE(6896)
																		break;
																	}
																	HX_STACK_LINE(6896)
																	::zpp_nape::callbacks::ZPP_InteractionListener x = cx_ite2->elt;		HX_STACK_VAR(x,"x");
																	HX_STACK_LINE(6896)
																	if (((x->event == event))){
																		HX_STACK_LINE(6897)
																		if (((((int(x->itype) & int(inttype))) != (int)0))){
																			HX_STACK_LINE(6898)
																			::zpp_nape::util::ZNPNode_ZPP_InteractionListener _g81;		HX_STACK_VAR(_g81,"_g81");
																			HX_STACK_LINE(6898)
																			{
																				HX_STACK_LINE(6898)
																				::zpp_nape::util::ZNPList_ZPP_InteractionListener _this1 = _g->prelisteners;		HX_STACK_VAR(_this1,"_this1");
																				HX_STACK_LINE(6898)
																				::zpp_nape::util::ZNPNode_ZPP_InteractionListener temp;		HX_STACK_VAR(temp,"temp");
																				HX_STACK_LINE(6898)
																				{
																					HX_STACK_LINE(6898)
																					::zpp_nape::util::ZNPNode_ZPP_InteractionListener ret1;		HX_STACK_VAR(ret1,"ret1");
																					HX_STACK_LINE(6898)
																					{
																						HX_STACK_LINE(6898)
																						if (((::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool == null()))){
																							HX_STACK_LINE(6898)
																							::zpp_nape::util::ZNPNode_ZPP_InteractionListener _g79 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::__new();		HX_STACK_VAR(_g79,"_g79");
																							HX_STACK_LINE(6898)
																							ret1 = _g79;
																						}
																						else{
																							HX_STACK_LINE(6898)
																							ret1 = ::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool;
																							HX_STACK_LINE(6898)
																							::zpp_nape::util::ZNPNode_ZPP_InteractionListener_obj::zpp_pool = ret1->next;
																							HX_STACK_LINE(6898)
																							ret1->next = null();
																						}
																						HX_STACK_LINE(6898)
																						Dynamic();
																					}
																					HX_STACK_LINE(6898)
																					ret1->elt = x;
																					HX_STACK_LINE(6898)
																					temp = ret1;
																				}
																				HX_STACK_LINE(6898)
																				if (((lite == null()))){
																					HX_STACK_LINE(6898)
																					temp->next = _this1->head;
																					HX_STACK_LINE(6898)
																					_this1->head = temp;
																				}
																				else{
																					HX_STACK_LINE(6898)
																					temp->next = lite->next;
																					HX_STACK_LINE(6898)
																					lite->next = temp;
																				}
																				HX_STACK_LINE(6898)
																				bool _g80 = _this1->modified = true;		HX_STACK_VAR(_g80,"_g80");
																				HX_STACK_LINE(6898)
																				_this1->pushmod = _g80;
																				HX_STACK_LINE(6898)
																				(_this1->length)++;
																				HX_STACK_LINE(6898)
																				_g81 = temp;
																			}
																			HX_STACK_LINE(6898)
																			lite = _g81;
																			HX_STACK_LINE(6899)
																			anyimpure = (bool(anyimpure) || bool(!(x->pure)));
																		}
																	}
																	HX_STACK_LINE(6896)
																	cx_ite2 = cx_ite2->next;
																}
															}
														}
													}
													HX_STACK_LINE(6902)
													if (((this->prelisteners->head == null()))){
														HX_STACK_LINE(6903)
														cx_ite1 = cx_ite1->next;
														HX_STACK_LINE(6904)
														continue;
													}
													HX_STACK_LINE(6906)
													::zpp_nape::space::ZPP_CallbackSet _g82 = ::zpp_nape::phys::ZPP_Interactor_obj::get(i1,i2);		HX_STACK_VAR(_g82,"_g82");
													HX_STACK_LINE(6906)
													callbackset = _g82;
													HX_STACK_LINE(6907)
													if (((callbackset == null()))){
														HX_STACK_LINE(6908)
														::zpp_nape::space::ZPP_CallbackSet _g83 = ::zpp_nape::space::ZPP_CallbackSet_obj::get(i1,i2);		HX_STACK_VAR(_g83,"_g83");
														HX_STACK_LINE(6908)
														ncallbackset = _g83;
														HX_STACK_LINE(6909)
														this->add_callbackset(ncallbackset);
													}
													HX_STACK_LINE(6911)
													if (((bool((callbackset == null())) || bool((bool(((bool((callbackset->SENSORstamp != this->stamp)) || bool(continuous)))) && bool((((int(callbackset->SENSORstate) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))))){
														HX_STACK_LINE(6912)
														if (((ncallbackset != null()))){
															HX_STACK_LINE(6912)
															callbackset = ncallbackset;
														}
														HX_STACK_LINE(6913)
														if (((callbackset != null()))){
															HX_STACK_LINE(6915)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6916)
															while((true)){
																HX_STACK_LINE(6916)
																if ((!(((cx_ite2 != null()))))){
																	HX_STACK_LINE(6916)
																	break;
																}
																HX_STACK_LINE(6917)
																::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																HX_STACK_LINE(6919)
																if (((listener->itype == ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY))){
																	HX_STACK_LINE(6920)
																	callbackset->COLLISIONstamp = this->stamp;
																	HX_STACK_LINE(6921)
																	callbackset->SENSORstamp = this->stamp;
																	HX_STACK_LINE(6922)
																	callbackset->FLUIDstamp = this->stamp;
																}
																else{
																	HX_STACK_LINE(6924)
																	callbackset->SENSORstamp = this->stamp;
																}
																HX_STACK_LINE(6926)
																cx_ite2 = cx_ite2->next;
															}
														}
														HX_STACK_LINE(6933)
														bool pact = arb->active;		HX_STACK_VAR(pact,"pact");
														HX_STACK_LINE(6934)
														arb->active = true;
														HX_STACK_LINE(6935)
														bool emptycontacts = false;		HX_STACK_VAR(emptycontacts,"emptycontacts");
														HX_STACK_LINE(6938)
														this->precb->zpp_inner->pre_arbiter = arb;
														HX_STACK_LINE(6939)
														this->precb->zpp_inner->set = callbackset;
														HX_STACK_LINE(6940)
														{
															HX_STACK_LINE(6941)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6942)
															while((true)){
																HX_STACK_LINE(6942)
																if ((!(((cx_ite2 != null()))))){
																	HX_STACK_LINE(6942)
																	break;
																}
																HX_STACK_LINE(6943)
																::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																HX_STACK_LINE(6944)
																{
																	HX_STACK_LINE(6945)
																	this->precb->zpp_inner->listener = listener;
																	HX_STACK_LINE(6972)
																	{
																		HX_STACK_LINE(6972)
																		::zpp_nape::callbacks::ZPP_Callback cb = this->precb->zpp_inner;		HX_STACK_VAR(cb,"cb");
																		HX_STACK_LINE(6972)
																		::zpp_nape::phys::ZPP_Interactor o1 = callbackset->int1;		HX_STACK_VAR(o1,"o1");
																		HX_STACK_LINE(6972)
																		::zpp_nape::phys::ZPP_Interactor o2 = callbackset->int2;		HX_STACK_VAR(o2,"o2");
																		struct _Function_18_1{
																			inline static bool Block( ::zpp_nape::phys::ZPP_Interactor &o1,::zpp_nape::callbacks::ZPP_InteractionListener &listener){
																				HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",6972,0x2b65ed03)
																				{
																					HX_STACK_LINE(6972)
																					::zpp_nape::callbacks::ZPP_OptionType _this = listener->options1;		HX_STACK_VAR(_this,"_this");
																					HX_STACK_LINE(6972)
																					::zpp_nape::util::ZNPList_ZPP_CbType xs = o1->cbTypes;		HX_STACK_VAR(xs,"xs");
																					HX_STACK_LINE(6972)
																					return (  ((_this->nonemptyintersection(xs,_this->includes))) ? bool(!(_this->nonemptyintersection(xs,_this->excludes))) : bool(false) );
																				}
																				return null();
																			}
																		};
																		struct _Function_18_2{
																			inline static bool Block( ::zpp_nape::phys::ZPP_Interactor &o2,::zpp_nape::callbacks::ZPP_InteractionListener &listener){
																				HX_STACK_FRAME("*","closure",0x5bdab937,"*.closure","zpp_nape/space/Space.hx",6972,0x2b65ed03)
																				{
																					HX_STACK_LINE(6972)
																					::zpp_nape::callbacks::ZPP_OptionType _this = listener->options2;		HX_STACK_VAR(_this,"_this");
																					HX_STACK_LINE(6972)
																					::zpp_nape::util::ZNPList_ZPP_CbType xs = o2->cbTypes;		HX_STACK_VAR(xs,"xs");
																					HX_STACK_LINE(6972)
																					return (  ((_this->nonemptyintersection(xs,_this->includes))) ? bool(!(_this->nonemptyintersection(xs,_this->excludes))) : bool(false) );
																				}
																				return null();
																			}
																		};
																		HX_STACK_LINE(6972)
																		if (((  ((_Function_18_1::Block(o1,listener))) ? bool(_Function_18_2::Block(o2,listener)) : bool(false) ))){
																			HX_STACK_LINE(6972)
																			cb->int1 = o1;
																			HX_STACK_LINE(6972)
																			cb->int2 = o2;
																		}
																		else{
																			HX_STACK_LINE(6972)
																			cb->int1 = o2;
																			HX_STACK_LINE(6972)
																			cb->int2 = o1;
																		}
																	}
																	HX_STACK_LINE(6973)
																	this->precb->zpp_inner->pre_swapped = (i1 != this->precb->zpp_inner->int1);
																	HX_STACK_LINE(6974)
																	::nape::callbacks::PreFlag ret1 = listener->handlerp(this->precb);		HX_STACK_VAR(ret1,"ret1");
																	HX_STACK_LINE(6975)
																	if (((ret1 != null()))){
																		HX_STACK_LINE(6976)
																		::nape::callbacks::PreFlag _g85;		HX_STACK_VAR(_g85,"_g85");
																		HX_STACK_LINE(6976)
																		{
																			HX_STACK_LINE(6976)
																			if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT == null()))){
																				HX_STACK_LINE(6976)
																				::zpp_nape::util::ZPP_Flags_obj::internal = true;
																				HX_STACK_LINE(6976)
																				::nape::callbacks::PreFlag _g84 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(_g84,"_g84");
																				HX_STACK_LINE(6976)
																				::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT = _g84;
																				HX_STACK_LINE(6976)
																				::zpp_nape::util::ZPP_Flags_obj::internal = false;
																			}
																			HX_STACK_LINE(6976)
																			_g85 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT;
																		}
																		HX_STACK_LINE(6976)
																		int _g90;		HX_STACK_VAR(_g90,"_g90");
																		HX_STACK_LINE(6976)
																		if (((ret1 == _g85))){
																			HX_STACK_LINE(6976)
																			_g90 = (int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT) | int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS));
																		}
																		else{
																			HX_STACK_LINE(6976)
																			::nape::callbacks::PreFlag _g87;		HX_STACK_VAR(_g87,"_g87");
																			HX_STACK_LINE(6976)
																			{
																				HX_STACK_LINE(6976)
																				if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE == null()))){
																					HX_STACK_LINE(6976)
																					::zpp_nape::util::ZPP_Flags_obj::internal = true;
																					HX_STACK_LINE(6976)
																					::nape::callbacks::PreFlag _g86 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(_g86,"_g86");
																					HX_STACK_LINE(6976)
																					::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE = _g86;
																					HX_STACK_LINE(6976)
																					::zpp_nape::util::ZPP_Flags_obj::internal = false;
																				}
																				HX_STACK_LINE(6976)
																				_g87 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_ACCEPT_ONCE;
																			}
																			HX_STACK_LINE(6976)
																			if (((ret1 == _g87))){
																				HX_STACK_LINE(6976)
																				_g90 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
																			}
																			else{
																				HX_STACK_LINE(6976)
																				::nape::callbacks::PreFlag _g89;		HX_STACK_VAR(_g89,"_g89");
																				HX_STACK_LINE(6976)
																				{
																					HX_STACK_LINE(6976)
																					if (((::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE == null()))){
																						HX_STACK_LINE(6976)
																						::zpp_nape::util::ZPP_Flags_obj::internal = true;
																						HX_STACK_LINE(6976)
																						::nape::callbacks::PreFlag _g88 = ::nape::callbacks::PreFlag_obj::__new();		HX_STACK_VAR(_g88,"_g88");
																						HX_STACK_LINE(6976)
																						::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE = _g88;
																						HX_STACK_LINE(6976)
																						::zpp_nape::util::ZPP_Flags_obj::internal = false;
																					}
																					HX_STACK_LINE(6976)
																					_g89 = ::zpp_nape::util::ZPP_Flags_obj::PreFlag_IGNORE;
																				}
																				HX_STACK_LINE(6976)
																				if (((ret1 == _g89))){
																					HX_STACK_LINE(6976)
																					_g90 = (int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE) | int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS));
																				}
																				else{
																					HX_STACK_LINE(6976)
																					_g90 = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_IGNORE;
																				}
																			}
																		}
																		HX_STACK_LINE(6976)
																		arb->immState = _g90;
																	}
																}
																HX_STACK_LINE(6979)
																cx_ite2 = cx_ite2->next;
															}
														}
														HX_STACK_LINE(6985)
														arb->active = pact;
														HX_STACK_LINE(6986)
														if (((callbackset != null()))){
															HX_STACK_LINE(6988)
															::zpp_nape::util::ZNPNode_ZPP_InteractionListener cx_ite2 = this->prelisteners->head;		HX_STACK_VAR(cx_ite2,"cx_ite2");
															HX_STACK_LINE(6989)
															while((true)){
																HX_STACK_LINE(6989)
																if ((!(((cx_ite2 != null()))))){
																	HX_STACK_LINE(6989)
																	break;
																}
																HX_STACK_LINE(6990)
																::zpp_nape::callbacks::ZPP_InteractionListener listener = cx_ite2->elt;		HX_STACK_VAR(listener,"listener");
																HX_STACK_LINE(6992)
																if (((listener->itype == ::zpp_nape::util::ZPP_Flags_obj::id_InteractionType_ANY))){
																	HX_STACK_LINE(6993)
																	callbackset->COLLISIONstate = arb->immState;
																	HX_STACK_LINE(6994)
																	callbackset->SENSORstate = arb->immState;
																	HX_STACK_LINE(6995)
																	callbackset->FLUIDstate = arb->immState;
																}
																else{
																	HX_STACK_LINE(6997)
																	callbackset->SENSORstate = arb->immState;
																}
																HX_STACK_LINE(6999)
																cx_ite2 = cx_ite2->next;
															}
														}
													}
													else{
														HX_STACK_LINE(7004)
														if (((callbackset == null()))){
															HX_STACK_LINE(7005)
															if (((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))){
																HX_STACK_LINE(7005)
																arb->immState = ::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ACCEPT;
															}
														}
														else{
															HX_STACK_LINE(7007)
															arb->immState = callbackset->SENSORstate;
														}
													}
												}
												HX_STACK_LINE(7009)
												cx_ite1 = cx_ite1->next;
											}
										}
										HX_STACK_LINE(7013)
										cx_ite = cx_ite->next;
									}
								}
								HX_STACK_LINE(7016)
								if (((bool(anyimpure) && bool((((int(arb->immState) & int(::zpp_nape::util::ZPP_Flags_obj::id_ImmState_ALWAYS))) == (int)0))))){
									HX_STACK_LINE(7072)
									if ((!(((arb->b1->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))))){
										HX_STACK_LINE(7073)
										::zpp_nape::phys::ZPP_Body o = arb->b1;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(7082)
										if ((!(o->world))){
											HX_STACK_LINE(7091)
											o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
											HX_STACK_LINE(7092)
											if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
												HX_STACK_LINE(7092)
												o->kinematicDelaySleep = true;
											}
											HX_STACK_LINE(7093)
											if ((o->component->sleeping)){
												HX_STACK_LINE(7094)
												this->really_wake(o,false);
											}
										}
									}
									HX_STACK_LINE(7098)
									if ((!(((arb->b2->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_STATIC))))){
										HX_STACK_LINE(7099)
										::zpp_nape::phys::ZPP_Body o = arb->b2;		HX_STACK_VAR(o,"o");
										HX_STACK_LINE(7108)
										if ((!(o->world))){
											HX_STACK_LINE(7117)
											o->component->waket = (this->stamp + ((  ((this->midstep)) ? int((int)0) : int((int)1) )));
											HX_STACK_LINE(7118)
											if (((o->type == ::zpp_nape::util::ZPP_Flags_obj::id_BodyType_KINEMATIC))){
												HX_STACK_LINE(7118)
												o->kinematicDelaySleep = true;
											}
											HX_STACK_LINE(7119)
											if ((o->component->sleeping)){
												HX_STACK_LINE(7120)
												this->really_wake(o,false);
											}
										}
									}
								}
							}
							HX_STACK_LINE(7181)
							if ((arb->sleeping)){
								HX_STACK_LINE(7182)
								arb->sleeping = false;
								HX_STACK_LINE(7183)
								{
									HX_STACK_LINE(7183)
									::zpp_nape::util::ZNPList_ZPP_SensorArbiter _this = this->s_arbiters;		HX_STACK_VAR(_this,"_this");
									HX_STACK_LINE(7183)
									::zpp_nape::util::ZNPNode_ZPP_SensorArbiter temp;		HX_STACK_VAR(temp,"temp");
									HX_STACK_LINE(7183)
									{
										HX_STACK_LINE(7183)
										::zpp_nape::util::ZNPNode_ZPP_SensorArbiter ret1;		HX_STACK_VAR(ret1,"ret1");
										HX_STACK_LINE(7183)
										{
											HX_STACK_LINE(7183)
											if (((::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool == null()))){
												HX_STACK_LINE(7183)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter _g91 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::__new();		HX_STACK_VAR(_g91,"_g91");
												HX_STACK_LINE(7183)
												ret1 = _g91;
											}
											else{
												HX_STACK_LINE(7183)
												ret1 = ::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool;
												HX_STACK_LINE(7183)
												::zpp_nape::util::ZNPNode_ZPP_SensorArbiter_obj::zpp_pool = ret1->next;
												HX_STACK_LINE(7183)
												ret1->next = null();
											}
											HX_STACK_LINE(7183)
											Dynamic();
										}
										HX_STACK_LINE(7183)
										ret1->elt = arb;
										HX_STACK_LINE(7183)
										temp = ret1;
									}
									HX_STACK_LINE(7183)
									temp->next = _this->head;
									HX_STACK_LINE(7183)
									_this->head = temp;
									HX_STACK_LINE(7183)
									_this->modified = true;
									HX_STACK_LINE(7183)
									(_this->length)++;
									HX_STACK_LINE(7183)
									arb;
								}
							}
							HX_STACK_LINE(7185)
							_g92 = arb;
						}
						else{
							HX_STACK_LINE(7187)
							if ((first)){
								HX_STACK_LINE(7188)
								{
									HX_STACK_LINE(7189)
									::zpp_nape::dynamics::ZPP_SensorArbiter o = arb;		HX_STACK_VAR(o,"o");
									HX_STACK_LINE(7199)
									o->next = ::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool;
									HX_STACK_LINE(7200)
									::zpp_nape::dynamics::ZPP_SensorArbiter_obj::zpp_pool = o;
								}
								HX_STACK_LINE(7205)
								_g92 = null();
							}
							else{
								HX_STACK_LINE(7207)
								_g92 = arb;
							}
						}
					}
					else{
						HX_STACK_LINE(7209)
						_g92 = arb;
					}
				}
				HX_STACK_LINE(6848)
				ret = _g92;
			}
		}
	}
	HX_STACK_LINE(7215)
	return ret;
}


HX_DEFINE_DYNAMIC_FUNC5(ZPP_Space_obj,narrowPhase,return )

Void ZPP_Space_obj::MRCA_chains( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","MRCA_chains",0xd89fbf58,"zpp_nape.space.ZPP_Space.MRCA_chains","zpp_nape/space/Space.hx",7220,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(s1,"s1")
		HX_STACK_ARG(s2,"s2")
		HX_STACK_LINE(7220)
		{
			HX_STACK_LINE(7220)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7220)
			{
				HX_STACK_LINE(7220)
				while((true)){
					HX_STACK_LINE(7220)
					if ((!((!(((_this->head == null()))))))){
						HX_STACK_LINE(7220)
						break;
					}
					HX_STACK_LINE(7220)
					::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(7220)
					_this->head = ret->next;
					HX_STACK_LINE(7220)
					{
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(7220)
						o->elt = null();
						HX_STACK_LINE(7220)
						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
					}
					HX_STACK_LINE(7220)
					if (((_this->head == null()))){
						HX_STACK_LINE(7220)
						_this->pushmod = true;
					}
					HX_STACK_LINE(7220)
					_this->modified = true;
					HX_STACK_LINE(7220)
					(_this->length)--;
				}
				HX_STACK_LINE(7220)
				_this->pushmod = true;
			}
		}
		HX_STACK_LINE(7220)
		{
			HX_STACK_LINE(7220)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7220)
			{
				HX_STACK_LINE(7220)
				while((true)){
					HX_STACK_LINE(7220)
					if ((!((!(((_this->head == null()))))))){
						HX_STACK_LINE(7220)
						break;
					}
					HX_STACK_LINE(7220)
					::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(7220)
					_this->head = ret->next;
					HX_STACK_LINE(7220)
					{
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(7220)
						o->elt = null();
						HX_STACK_LINE(7220)
						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
					}
					HX_STACK_LINE(7220)
					if (((_this->head == null()))){
						HX_STACK_LINE(7220)
						_this->pushmod = true;
					}
					HX_STACK_LINE(7220)
					_this->modified = true;
					HX_STACK_LINE(7220)
					(_this->length)--;
				}
				HX_STACK_LINE(7220)
				_this->pushmod = true;
			}
		}
		HX_STACK_LINE(7220)
		if (((s1->cbSet != null()))){
			HX_STACK_LINE(7220)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7220)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7220)
			{
				HX_STACK_LINE(7220)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7220)
				{
					HX_STACK_LINE(7220)
					if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor _g = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g,"_g");
						HX_STACK_LINE(7220)
						ret = _g;
					}
					else{
						HX_STACK_LINE(7220)
						ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7220)
						ret->next = null();
					}
					HX_STACK_LINE(7220)
					Dynamic();
				}
				HX_STACK_LINE(7220)
				ret->elt = s1;
				HX_STACK_LINE(7220)
				temp = ret;
			}
			HX_STACK_LINE(7220)
			temp->next = _this->head;
			HX_STACK_LINE(7220)
			_this->head = temp;
			HX_STACK_LINE(7220)
			_this->modified = true;
			HX_STACK_LINE(7220)
			(_this->length)++;
			HX_STACK_LINE(7220)
			s1;
		}
		HX_STACK_LINE(7220)
		if (((s1->body->cbSet != null()))){
			HX_STACK_LINE(7220)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7220)
			::zpp_nape::phys::ZPP_Interactor o = s1->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(7220)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7220)
			{
				HX_STACK_LINE(7220)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7220)
				{
					HX_STACK_LINE(7220)
					if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor _g1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g1,"_g1");
						HX_STACK_LINE(7220)
						ret = _g1;
					}
					else{
						HX_STACK_LINE(7220)
						ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7220)
						ret->next = null();
					}
					HX_STACK_LINE(7220)
					Dynamic();
				}
				HX_STACK_LINE(7220)
				ret->elt = o;
				HX_STACK_LINE(7220)
				temp = ret;
			}
			HX_STACK_LINE(7220)
			temp->next = _this->head;
			HX_STACK_LINE(7220)
			_this->head = temp;
			HX_STACK_LINE(7220)
			_this->modified = true;
			HX_STACK_LINE(7220)
			(_this->length)++;
			HX_STACK_LINE(7220)
			o;
		}
		HX_STACK_LINE(7220)
		if (((s2->cbSet != null()))){
			HX_STACK_LINE(7220)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7220)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7220)
			{
				HX_STACK_LINE(7220)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7220)
				{
					HX_STACK_LINE(7220)
					if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor _g2 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g2,"_g2");
						HX_STACK_LINE(7220)
						ret = _g2;
					}
					else{
						HX_STACK_LINE(7220)
						ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7220)
						ret->next = null();
					}
					HX_STACK_LINE(7220)
					Dynamic();
				}
				HX_STACK_LINE(7220)
				ret->elt = s2;
				HX_STACK_LINE(7220)
				temp = ret;
			}
			HX_STACK_LINE(7220)
			temp->next = _this->head;
			HX_STACK_LINE(7220)
			_this->head = temp;
			HX_STACK_LINE(7220)
			_this->modified = true;
			HX_STACK_LINE(7220)
			(_this->length)++;
			HX_STACK_LINE(7220)
			s2;
		}
		HX_STACK_LINE(7220)
		if (((s2->body->cbSet != null()))){
			HX_STACK_LINE(7220)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7220)
			::zpp_nape::phys::ZPP_Interactor o = s2->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(7220)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7220)
			{
				HX_STACK_LINE(7220)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7220)
				{
					HX_STACK_LINE(7220)
					if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor _g3 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g3,"_g3");
						HX_STACK_LINE(7220)
						ret = _g3;
					}
					else{
						HX_STACK_LINE(7220)
						ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7220)
						ret->next = null();
					}
					HX_STACK_LINE(7220)
					Dynamic();
				}
				HX_STACK_LINE(7220)
				ret->elt = o;
				HX_STACK_LINE(7220)
				temp = ret;
			}
			HX_STACK_LINE(7220)
			temp->next = _this->head;
			HX_STACK_LINE(7220)
			_this->head = temp;
			HX_STACK_LINE(7220)
			_this->modified = true;
			HX_STACK_LINE(7220)
			(_this->length)++;
			HX_STACK_LINE(7220)
			o;
		}
		HX_STACK_LINE(7220)
		::zpp_nape::phys::ZPP_Compound c1 = s1->body->compound;		HX_STACK_VAR(c1,"c1");
		HX_STACK_LINE(7220)
		::zpp_nape::phys::ZPP_Compound c2 = s2->body->compound;		HX_STACK_VAR(c2,"c2");
		HX_STACK_LINE(7220)
		while((true)){
			HX_STACK_LINE(7220)
			if ((!(((c1 != c2))))){
				HX_STACK_LINE(7220)
				break;
			}
			HX_STACK_LINE(7220)
			int d1;		HX_STACK_VAR(d1,"d1");
			HX_STACK_LINE(7220)
			if (((c1 == null()))){
				HX_STACK_LINE(7220)
				d1 = (int)0;
			}
			else{
				HX_STACK_LINE(7220)
				d1 = c1->depth;
			}
			HX_STACK_LINE(7220)
			int d2;		HX_STACK_VAR(d2,"d2");
			HX_STACK_LINE(7220)
			if (((c2 == null()))){
				HX_STACK_LINE(7220)
				d2 = (int)0;
			}
			else{
				HX_STACK_LINE(7220)
				d2 = c2->depth;
			}
			HX_STACK_LINE(7220)
			if (((d1 < d2))){
				HX_STACK_LINE(7220)
				if (((c2->cbSet != null()))){
					HX_STACK_LINE(7220)
					::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(7220)
					::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(7220)
					{
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7220)
						{
							HX_STACK_LINE(7220)
							if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
								HX_STACK_LINE(7220)
								::zpp_nape::util::ZNPNode_ZPP_Interactor _g4 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g4,"_g4");
								HX_STACK_LINE(7220)
								ret = _g4;
							}
							else{
								HX_STACK_LINE(7220)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
								HX_STACK_LINE(7220)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7220)
								ret->next = null();
							}
							HX_STACK_LINE(7220)
							Dynamic();
						}
						HX_STACK_LINE(7220)
						ret->elt = c2;
						HX_STACK_LINE(7220)
						temp = ret;
					}
					HX_STACK_LINE(7220)
					temp->next = _this->head;
					HX_STACK_LINE(7220)
					_this->head = temp;
					HX_STACK_LINE(7220)
					_this->modified = true;
					HX_STACK_LINE(7220)
					(_this->length)++;
					HX_STACK_LINE(7220)
					c2;
				}
				HX_STACK_LINE(7220)
				c2 = c2->compound;
			}
			else{
				HX_STACK_LINE(7220)
				if (((c1->cbSet != null()))){
					HX_STACK_LINE(7220)
					::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(7220)
					::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(7220)
					{
						HX_STACK_LINE(7220)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7220)
						{
							HX_STACK_LINE(7220)
							if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
								HX_STACK_LINE(7220)
								::zpp_nape::util::ZNPNode_ZPP_Interactor _g5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g5,"_g5");
								HX_STACK_LINE(7220)
								ret = _g5;
							}
							else{
								HX_STACK_LINE(7220)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
								HX_STACK_LINE(7220)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7220)
								ret->next = null();
							}
							HX_STACK_LINE(7220)
							Dynamic();
						}
						HX_STACK_LINE(7220)
						ret->elt = c1;
						HX_STACK_LINE(7220)
						temp = ret;
					}
					HX_STACK_LINE(7220)
					temp->next = _this->head;
					HX_STACK_LINE(7220)
					_this->head = temp;
					HX_STACK_LINE(7220)
					_this->modified = true;
					HX_STACK_LINE(7220)
					(_this->length)++;
					HX_STACK_LINE(7220)
					c1;
				}
				HX_STACK_LINE(7220)
				c1 = c1->compound;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,MRCA_chains,(void))

Void ZPP_Space_obj::inlined_MRCA_chains( ::zpp_nape::shape::ZPP_Shape s1,::zpp_nape::shape::ZPP_Shape s2){
{
		HX_STACK_FRAME("zpp_nape.space.ZPP_Space","inlined_MRCA_chains",0xfc72bfc4,"zpp_nape.space.ZPP_Space.inlined_MRCA_chains","zpp_nape/space/Space.hx",7224,0x2b65ed03)
		HX_STACK_THIS(this)
		HX_STACK_ARG(s1,"s1")
		HX_STACK_ARG(s2,"s2")
		HX_STACK_LINE(7233)
		{
			HX_STACK_LINE(7233)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7233)
			{
				HX_STACK_LINE(7233)
				while((true)){
					HX_STACK_LINE(7233)
					if ((!((!(((_this->head == null()))))))){
						HX_STACK_LINE(7233)
						break;
					}
					HX_STACK_LINE(7233)
					::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(7233)
					_this->head = ret->next;
					HX_STACK_LINE(7233)
					{
						HX_STACK_LINE(7233)
						::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(7233)
						o->elt = null();
						HX_STACK_LINE(7233)
						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7233)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
					}
					HX_STACK_LINE(7233)
					if (((_this->head == null()))){
						HX_STACK_LINE(7233)
						_this->pushmod = true;
					}
					HX_STACK_LINE(7233)
					_this->modified = true;
					HX_STACK_LINE(7233)
					(_this->length)--;
				}
				HX_STACK_LINE(7233)
				_this->pushmod = true;
			}
		}
		HX_STACK_LINE(7234)
		{
			HX_STACK_LINE(7234)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7234)
			{
				HX_STACK_LINE(7234)
				while((true)){
					HX_STACK_LINE(7234)
					if ((!((!(((_this->head == null()))))))){
						HX_STACK_LINE(7234)
						break;
					}
					HX_STACK_LINE(7234)
					::zpp_nape::util::ZNPNode_ZPP_Interactor ret = _this->head;		HX_STACK_VAR(ret,"ret");
					HX_STACK_LINE(7234)
					_this->head = ret->next;
					HX_STACK_LINE(7234)
					{
						HX_STACK_LINE(7234)
						::zpp_nape::util::ZNPNode_ZPP_Interactor o = ret;		HX_STACK_VAR(o,"o");
						HX_STACK_LINE(7234)
						o->elt = null();
						HX_STACK_LINE(7234)
						o->next = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7234)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = o;
					}
					HX_STACK_LINE(7234)
					if (((_this->head == null()))){
						HX_STACK_LINE(7234)
						_this->pushmod = true;
					}
					HX_STACK_LINE(7234)
					_this->modified = true;
					HX_STACK_LINE(7234)
					(_this->length)--;
				}
				HX_STACK_LINE(7234)
				_this->pushmod = true;
			}
		}
		HX_STACK_LINE(7235)
		if (((s1->cbSet != null()))){
			HX_STACK_LINE(7235)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7235)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7235)
			{
				HX_STACK_LINE(7235)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7235)
				{
					HX_STACK_LINE(7235)
					if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
						HX_STACK_LINE(7235)
						::zpp_nape::util::ZNPNode_ZPP_Interactor _g = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g,"_g");
						HX_STACK_LINE(7235)
						ret = _g;
					}
					else{
						HX_STACK_LINE(7235)
						ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7235)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7235)
						ret->next = null();
					}
					HX_STACK_LINE(7235)
					Dynamic();
				}
				HX_STACK_LINE(7235)
				ret->elt = s1;
				HX_STACK_LINE(7235)
				temp = ret;
			}
			HX_STACK_LINE(7235)
			temp->next = _this->head;
			HX_STACK_LINE(7235)
			_this->head = temp;
			HX_STACK_LINE(7235)
			_this->modified = true;
			HX_STACK_LINE(7235)
			(_this->length)++;
			HX_STACK_LINE(7235)
			s1;
		}
		HX_STACK_LINE(7236)
		if (((s1->body->cbSet != null()))){
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7236)
			::zpp_nape::phys::ZPP_Interactor o = s1->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(7236)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7236)
			{
				HX_STACK_LINE(7236)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7236)
				{
					HX_STACK_LINE(7236)
					if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor _g1 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g1,"_g1");
						HX_STACK_LINE(7236)
						ret = _g1;
					}
					else{
						HX_STACK_LINE(7236)
						ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7236)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7236)
						ret->next = null();
					}
					HX_STACK_LINE(7236)
					Dynamic();
				}
				HX_STACK_LINE(7236)
				ret->elt = o;
				HX_STACK_LINE(7236)
				temp = ret;
			}
			HX_STACK_LINE(7236)
			temp->next = _this->head;
			HX_STACK_LINE(7236)
			_this->head = temp;
			HX_STACK_LINE(7236)
			_this->modified = true;
			HX_STACK_LINE(7236)
			(_this->length)++;
			HX_STACK_LINE(7236)
			o;
		}
		HX_STACK_LINE(7237)
		if (((s2->cbSet != null()))){
			HX_STACK_LINE(7237)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7237)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7237)
			{
				HX_STACK_LINE(7237)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7237)
				{
					HX_STACK_LINE(7237)
					if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
						HX_STACK_LINE(7237)
						::zpp_nape::util::ZNPNode_ZPP_Interactor _g2 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g2,"_g2");
						HX_STACK_LINE(7237)
						ret = _g2;
					}
					else{
						HX_STACK_LINE(7237)
						ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7237)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7237)
						ret->next = null();
					}
					HX_STACK_LINE(7237)
					Dynamic();
				}
				HX_STACK_LINE(7237)
				ret->elt = s2;
				HX_STACK_LINE(7237)
				temp = ret;
			}
			HX_STACK_LINE(7237)
			temp->next = _this->head;
			HX_STACK_LINE(7237)
			_this->head = temp;
			HX_STACK_LINE(7237)
			_this->modified = true;
			HX_STACK_LINE(7237)
			(_this->length)++;
			HX_STACK_LINE(7237)
			s2;
		}
		HX_STACK_LINE(7238)
		if (((s2->body->cbSet != null()))){
			HX_STACK_LINE(7238)
			::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
			HX_STACK_LINE(7238)
			::zpp_nape::phys::ZPP_Interactor o = s2->body;		HX_STACK_VAR(o,"o");
			HX_STACK_LINE(7238)
			::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
			HX_STACK_LINE(7238)
			{
				HX_STACK_LINE(7238)
				::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
				HX_STACK_LINE(7238)
				{
					HX_STACK_LINE(7238)
					if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
						HX_STACK_LINE(7238)
						::zpp_nape::util::ZNPNode_ZPP_Interactor _g3 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g3,"_g3");
						HX_STACK_LINE(7238)
						ret = _g3;
					}
					else{
						HX_STACK_LINE(7238)
						ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
						HX_STACK_LINE(7238)
						::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
						HX_STACK_LINE(7238)
						ret->next = null();
					}
					HX_STACK_LINE(7238)
					Dynamic();
				}
				HX_STACK_LINE(7238)
				ret->elt = o;
				HX_STACK_LINE(7238)
				temp = ret;
			}
			HX_STACK_LINE(7238)
			temp->next = _this->head;
			HX_STACK_LINE(7238)
			_this->head = temp;
			HX_STACK_LINE(7238)
			_this->modified = true;
			HX_STACK_LINE(7238)
			(_this->length)++;
			HX_STACK_LINE(7238)
			o;
		}
		HX_STACK_LINE(7239)
		::zpp_nape::phys::ZPP_Compound c1 = s1->body->compound;		HX_STACK_VAR(c1,"c1");
		HX_STACK_LINE(7240)
		::zpp_nape::phys::ZPP_Compound c2 = s2->body->compound;		HX_STACK_VAR(c2,"c2");
		HX_STACK_LINE(7241)
		while((true)){
			HX_STACK_LINE(7241)
			if ((!(((c1 != c2))))){
				HX_STACK_LINE(7241)
				break;
			}
			HX_STACK_LINE(7242)
			int d1;		HX_STACK_VAR(d1,"d1");
			HX_STACK_LINE(7242)
			if (((c1 == null()))){
				HX_STACK_LINE(7242)
				d1 = (int)0;
			}
			else{
				HX_STACK_LINE(7242)
				d1 = c1->depth;
			}
			HX_STACK_LINE(7243)
			int d2;		HX_STACK_VAR(d2,"d2");
			HX_STACK_LINE(7243)
			if (((c2 == null()))){
				HX_STACK_LINE(7243)
				d2 = (int)0;
			}
			else{
				HX_STACK_LINE(7243)
				d2 = c2->depth;
			}
			HX_STACK_LINE(7244)
			if (((d1 < d2))){
				HX_STACK_LINE(7245)
				if (((c2->cbSet != null()))){
					HX_STACK_LINE(7245)
					::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca2;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(7245)
					::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(7245)
					{
						HX_STACK_LINE(7245)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7245)
						{
							HX_STACK_LINE(7245)
							if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
								HX_STACK_LINE(7245)
								::zpp_nape::util::ZNPNode_ZPP_Interactor _g4 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g4,"_g4");
								HX_STACK_LINE(7245)
								ret = _g4;
							}
							else{
								HX_STACK_LINE(7245)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
								HX_STACK_LINE(7245)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7245)
								ret->next = null();
							}
							HX_STACK_LINE(7245)
							Dynamic();
						}
						HX_STACK_LINE(7245)
						ret->elt = c2;
						HX_STACK_LINE(7245)
						temp = ret;
					}
					HX_STACK_LINE(7245)
					temp->next = _this->head;
					HX_STACK_LINE(7245)
					_this->head = temp;
					HX_STACK_LINE(7245)
					_this->modified = true;
					HX_STACK_LINE(7245)
					(_this->length)++;
					HX_STACK_LINE(7245)
					c2;
				}
				HX_STACK_LINE(7246)
				c2 = c2->compound;
			}
			else{
				HX_STACK_LINE(7249)
				if (((c1->cbSet != null()))){
					HX_STACK_LINE(7249)
					::zpp_nape::util::ZNPList_ZPP_Interactor _this = this->mrca1;		HX_STACK_VAR(_this,"_this");
					HX_STACK_LINE(7249)
					::zpp_nape::util::ZNPNode_ZPP_Interactor temp;		HX_STACK_VAR(temp,"temp");
					HX_STACK_LINE(7249)
					{
						HX_STACK_LINE(7249)
						::zpp_nape::util::ZNPNode_ZPP_Interactor ret;		HX_STACK_VAR(ret,"ret");
						HX_STACK_LINE(7249)
						{
							HX_STACK_LINE(7249)
							if (((::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool == null()))){
								HX_STACK_LINE(7249)
								::zpp_nape::util::ZNPNode_ZPP_Interactor _g5 = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::__new();		HX_STACK_VAR(_g5,"_g5");
								HX_STACK_LINE(7249)
								ret = _g5;
							}
							else{
								HX_STACK_LINE(7249)
								ret = ::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool;
								HX_STACK_LINE(7249)
								::zpp_nape::util::ZNPNode_ZPP_Interactor_obj::zpp_pool = ret->next;
								HX_STACK_LINE(7249)
								ret->next = null();
							}
							HX_STACK_LINE(7249)
							Dynamic();
						}
						HX_STACK_LINE(7249)
						ret->elt = c1;
						HX_STACK_LINE(7249)
						temp = ret;
					}
					HX_STACK_LINE(7249)
					temp->next = _this->head;
					HX_STACK_LINE(7249)
					_this->head = temp;
					HX_STACK_LINE(7249)
					_this->modified = true;
					HX_STACK_LINE(7249)
					(_this->length)++;
					HX_STACK_LINE(7249)
					c1;
				}
				HX_STACK_LINE(7250)
				c1 = c1->compound;
			}
		}
	}
return null();
}


HX_DEFINE_DYNAMIC_FUNC2(ZPP_Space_obj,inlined_MRCA_chains,(void))


ZPP_Space_obj::ZPP_Space_obj()
{
}

void ZPP_Space_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ZPP_Space);
	HX_MARK_MEMBER_NAME(outer,"outer");
	HX_MARK_MEMBER_NAME(userData,"userData");
	HX_MARK_MEMBER_NAME(gravityx,"gravityx");
	HX_MARK_MEMBER_NAME(gravityy,"gravityy");
	HX_MARK_MEMBER_NAME(wrap_gravity,"wrap_gravity");
	HX_MARK_MEMBER_NAME(bodies,"bodies");
	HX_MARK_MEMBER_NAME(wrap_bodies,"wrap_bodies");
	HX_MARK_MEMBER_NAME(compounds,"compounds");
	HX_MARK_MEMBER_NAME(wrap_compounds,"wrap_compounds");
	HX_MARK_MEMBER_NAME(constraints,"constraints");
	HX_MARK_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_MARK_MEMBER_NAME(kinematics,"kinematics");
	HX_MARK_MEMBER_NAME(bphase,"bphase");
	HX_MARK_MEMBER_NAME(__static,"__static");
	HX_MARK_MEMBER_NAME(global_lin_drag,"global_lin_drag");
	HX_MARK_MEMBER_NAME(global_ang_drag,"global_ang_drag");
	HX_MARK_MEMBER_NAME(stamp,"stamp");
	HX_MARK_MEMBER_NAME(midstep,"midstep");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(sortcontacts,"sortcontacts");
	HX_MARK_MEMBER_NAME(c_arbiters_true,"c_arbiters_true");
	HX_MARK_MEMBER_NAME(c_arbiters_false,"c_arbiters_false");
	HX_MARK_MEMBER_NAME(f_arbiters,"f_arbiters");
	HX_MARK_MEMBER_NAME(s_arbiters,"s_arbiters");
	HX_MARK_MEMBER_NAME(wrap_arbiters,"wrap_arbiters");
	HX_MARK_MEMBER_NAME(live,"live");
	HX_MARK_MEMBER_NAME(wrap_live,"wrap_live");
	HX_MARK_MEMBER_NAME(live_constraints,"live_constraints");
	HX_MARK_MEMBER_NAME(wrap_livecon,"wrap_livecon");
	HX_MARK_MEMBER_NAME(staticsleep,"staticsleep");
	HX_MARK_MEMBER_NAME(islands,"islands");
	HX_MARK_MEMBER_NAME(listeners,"listeners");
	HX_MARK_MEMBER_NAME(wrap_listeners,"wrap_listeners");
	HX_MARK_MEMBER_NAME(callbacks,"callbacks");
	HX_MARK_MEMBER_NAME(callbackset_list,"callbackset_list");
	HX_MARK_MEMBER_NAME(cbsets,"cbsets");
	HX_MARK_MEMBER_NAME(convexShapeList,"convexShapeList");
	HX_MARK_MEMBER_NAME(pre_dt,"pre_dt");
	HX_MARK_MEMBER_NAME(toiEvents,"toiEvents");
	HX_MARK_MEMBER_NAME(continuous,"continuous");
	HX_MARK_MEMBER_NAME(precb,"precb");
	HX_MARK_MEMBER_NAME(prelisteners,"prelisteners");
	HX_MARK_MEMBER_NAME(mrca1,"mrca1");
	HX_MARK_MEMBER_NAME(mrca2,"mrca2");
	HX_MARK_END_CLASS();
}

void ZPP_Space_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outer,"outer");
	HX_VISIT_MEMBER_NAME(userData,"userData");
	HX_VISIT_MEMBER_NAME(gravityx,"gravityx");
	HX_VISIT_MEMBER_NAME(gravityy,"gravityy");
	HX_VISIT_MEMBER_NAME(wrap_gravity,"wrap_gravity");
	HX_VISIT_MEMBER_NAME(bodies,"bodies");
	HX_VISIT_MEMBER_NAME(wrap_bodies,"wrap_bodies");
	HX_VISIT_MEMBER_NAME(compounds,"compounds");
	HX_VISIT_MEMBER_NAME(wrap_compounds,"wrap_compounds");
	HX_VISIT_MEMBER_NAME(constraints,"constraints");
	HX_VISIT_MEMBER_NAME(wrap_constraints,"wrap_constraints");
	HX_VISIT_MEMBER_NAME(kinematics,"kinematics");
	HX_VISIT_MEMBER_NAME(bphase,"bphase");
	HX_VISIT_MEMBER_NAME(__static,"__static");
	HX_VISIT_MEMBER_NAME(global_lin_drag,"global_lin_drag");
	HX_VISIT_MEMBER_NAME(global_ang_drag,"global_ang_drag");
	HX_VISIT_MEMBER_NAME(stamp,"stamp");
	HX_VISIT_MEMBER_NAME(midstep,"midstep");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(sortcontacts,"sortcontacts");
	HX_VISIT_MEMBER_NAME(c_arbiters_true,"c_arbiters_true");
	HX_VISIT_MEMBER_NAME(c_arbiters_false,"c_arbiters_false");
	HX_VISIT_MEMBER_NAME(f_arbiters,"f_arbiters");
	HX_VISIT_MEMBER_NAME(s_arbiters,"s_arbiters");
	HX_VISIT_MEMBER_NAME(wrap_arbiters,"wrap_arbiters");
	HX_VISIT_MEMBER_NAME(live,"live");
	HX_VISIT_MEMBER_NAME(wrap_live,"wrap_live");
	HX_VISIT_MEMBER_NAME(live_constraints,"live_constraints");
	HX_VISIT_MEMBER_NAME(wrap_livecon,"wrap_livecon");
	HX_VISIT_MEMBER_NAME(staticsleep,"staticsleep");
	HX_VISIT_MEMBER_NAME(islands,"islands");
	HX_VISIT_MEMBER_NAME(listeners,"listeners");
	HX_VISIT_MEMBER_NAME(wrap_listeners,"wrap_listeners");
	HX_VISIT_MEMBER_NAME(callbacks,"callbacks");
	HX_VISIT_MEMBER_NAME(callbackset_list,"callbackset_list");
	HX_VISIT_MEMBER_NAME(cbsets,"cbsets");
	HX_VISIT_MEMBER_NAME(convexShapeList,"convexShapeList");
	HX_VISIT_MEMBER_NAME(pre_dt,"pre_dt");
	HX_VISIT_MEMBER_NAME(toiEvents,"toiEvents");
	HX_VISIT_MEMBER_NAME(continuous,"continuous");
	HX_VISIT_MEMBER_NAME(precb,"precb");
	HX_VISIT_MEMBER_NAME(prelisteners,"prelisteners");
	HX_VISIT_MEMBER_NAME(mrca1,"mrca1");
	HX_VISIT_MEMBER_NAME(mrca2,"mrca2");
}

Dynamic ZPP_Space_obj::__Field(const ::String &inName,bool inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return time; }
		if (HX_FIELD_EQ(inName,"live") ) { return live; }
		if (HX_FIELD_EQ(inName,"step") ) { return step_dyn(); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { return outer; }
		if (HX_FIELD_EQ(inName,"stamp") ) { return stamp; }
		if (HX_FIELD_EQ(inName,"clear") ) { return clear_dyn(); }
		if (HX_FIELD_EQ(inName,"precb") ) { return precb; }
		if (HX_FIELD_EQ(inName,"mrca1") ) { return mrca1; }
		if (HX_FIELD_EQ(inName,"mrca2") ) { return mrca2; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { return bodies; }
		if (HX_FIELD_EQ(inName,"bphase") ) { return bphase; }
		if (HX_FIELD_EQ(inName,"cbsets") ) { return cbsets; }
		if (HX_FIELD_EQ(inName,"pre_dt") ) { return pre_dt; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"midstep") ) { return midstep; }
		if (HX_FIELD_EQ(inName,"islands") ) { return islands; }
		if (HX_FIELD_EQ(inName,"addBody") ) { return addBody_dyn(); }
		if (HX_FIELD_EQ(inName,"remBody") ) { return remBody_dyn(); }
		if (HX_FIELD_EQ(inName,"rayCast") ) { return rayCast_dyn(); }
		if (HX_FIELD_EQ(inName,"prestep") ) { return prestep_dyn(); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { return userData; }
		if (HX_FIELD_EQ(inName,"gravityx") ) { return gravityx; }
		if (HX_FIELD_EQ(inName,"gravityy") ) { return gravityy; }
		if (HX_FIELD_EQ(inName,"__static") ) { return __static; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"compounds") ) { return compounds; }
		if (HX_FIELD_EQ(inName,"wrap_live") ) { return wrap_live; }
		if (HX_FIELD_EQ(inName,"listeners") ) { return listeners; }
		if (HX_FIELD_EQ(inName,"callbacks") ) { return callbacks; }
		if (HX_FIELD_EQ(inName,"toiEvents") ) { return toiEvents; }
		if (HX_FIELD_EQ(inName,"doForests") ) { return doForests_dyn(); }
		if (HX_FIELD_EQ(inName,"updateVel") ) { return updateVel_dyn(); }
		if (HX_FIELD_EQ(inName,"updatePos") ) { return updatePos_dyn(); }
		if (HX_FIELD_EQ(inName,"warmStart") ) { return warmStart_dyn(); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getgravity") ) { return getgravity_dyn(); }
		if (HX_FIELD_EQ(inName,"kinematics") ) { return kinematics; }
		if (HX_FIELD_EQ(inName,"f_arbiters") ) { return f_arbiters; }
		if (HX_FIELD_EQ(inName,"s_arbiters") ) { return s_arbiters; }
		if (HX_FIELD_EQ(inName,"convexCast") ) { return convexCast_dyn(); }
		if (HX_FIELD_EQ(inName,"bodyCbWake") ) { return bodyCbWake_dyn(); }
		if (HX_FIELD_EQ(inName,"wakeIsland") ) { return wakeIsland_dyn(); }
		if (HX_FIELD_EQ(inName,"validation") ) { return validation_dyn(); }
		if (HX_FIELD_EQ(inName,"continuous") ) { return continuous; }
		if (HX_FIELD_EQ(inName,"presteparb") ) { return presteparb_dyn(); }
		if (HX_FIELD_EQ(inName,"iterateVel") ) { return iterateVel_dyn(); }
		if (HX_FIELD_EQ(inName,"iteratePos") ) { return iteratePos_dyn(); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_bodies") ) { return wrap_bodies; }
		if (HX_FIELD_EQ(inName,"constraints") ) { return constraints; }
		if (HX_FIELD_EQ(inName,"staticsleep") ) { return staticsleep; }
		if (HX_FIELD_EQ(inName,"addListener") ) { return addListener_dyn(); }
		if (HX_FIELD_EQ(inName,"remListener") ) { return remListener_dyn(); }
		if (HX_FIELD_EQ(inName,"added_shape") ) { return added_shape_dyn(); }
		if (HX_FIELD_EQ(inName,"addCompound") ) { return addCompound_dyn(); }
		if (HX_FIELD_EQ(inName,"remCompound") ) { return remCompound_dyn(); }
		if (HX_FIELD_EQ(inName,"prepareCast") ) { return prepareCast_dyn(); }
		if (HX_FIELD_EQ(inName,"bodyCbSleep") ) { return bodyCbSleep_dyn(); }
		if (HX_FIELD_EQ(inName,"really_wake") ) { return really_wake_dyn(); }
		if (HX_FIELD_EQ(inName,"narrowPhase") ) { return narrowPhase_dyn(); }
		if (HX_FIELD_EQ(inName,"MRCA_chains") ) { return MRCA_chains_dyn(); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrap_gravity") ) { return wrap_gravity; }
		if (HX_FIELD_EQ(inName,"sortcontacts") ) { return sortcontacts; }
		if (HX_FIELD_EQ(inName,"wrap_livecon") ) { return wrap_livecon; }
		if (HX_FIELD_EQ(inName,"bodies_adder") ) { return bodies_adder_dyn(); }
		if (HX_FIELD_EQ(inName,"transmitType") ) { return transmitType_dyn(); }
		if (HX_FIELD_EQ(inName,"shapesInAABB") ) { return shapesInAABB_dyn(); }
		if (HX_FIELD_EQ(inName,"bodiesInAABB") ) { return bodiesInAABB_dyn(); }
		if (HX_FIELD_EQ(inName,"rayMultiCast") ) { return rayMultiCast_dyn(); }
		if (HX_FIELD_EQ(inName,"wakeCompound") ) { return wakeCompound_dyn(); }
		if (HX_FIELD_EQ(inName,"group_ignore") ) { return group_ignore_dyn(); }
		if (HX_FIELD_EQ(inName,"prelisteners") ) { return prelisteners; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_arbiters") ) { return wrap_arbiters; }
		if (HX_FIELD_EQ(inName,"bodies_subber") ) { return bodies_subber_dyn(); }
		if (HX_FIELD_EQ(inName,"removed_shape") ) { return removed_shape_dyn(); }
		if (HX_FIELD_EQ(inName,"addConstraint") ) { return addConstraint_dyn(); }
		if (HX_FIELD_EQ(inName,"remConstraint") ) { return remConstraint_dyn(); }
		if (HX_FIELD_EQ(inName,"shapesInShape") ) { return shapesInShape_dyn(); }
		if (HX_FIELD_EQ(inName,"bodiesInShape") ) { return bodiesInShape_dyn(); }
		if (HX_FIELD_EQ(inName,"push_callback") ) { return push_callback_dyn(); }
		if (HX_FIELD_EQ(inName,"sleepArbiters") ) { return sleepArbiters_dyn(); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"wrap_compounds") ) { return wrap_compounds; }
		if (HX_FIELD_EQ(inName,"wrap_listeners") ) { return wrap_listeners; }
		if (HX_FIELD_EQ(inName,"shapesInCircle") ) { return shapesInCircle_dyn(); }
		if (HX_FIELD_EQ(inName,"bodiesInCircle") ) { return bodiesInCircle_dyn(); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"global_lin_drag") ) { return global_lin_drag; }
		if (HX_FIELD_EQ(inName,"global_ang_drag") ) { return global_ang_drag; }
		if (HX_FIELD_EQ(inName,"c_arbiters_true") ) { return c_arbiters_true; }
		if (HX_FIELD_EQ(inName,"compounds_adder") ) { return compounds_adder_dyn(); }
		if (HX_FIELD_EQ(inName,"listeners_adder") ) { return listeners_adder_dyn(); }
		if (HX_FIELD_EQ(inName,"revoke_listener") ) { return revoke_listener_dyn(); }
		if (HX_FIELD_EQ(inName,"add_callbackset") ) { return add_callbackset_dyn(); }
		if (HX_FIELD_EQ(inName,"convexShapeList") ) { return convexShapeList; }
		if (HX_FIELD_EQ(inName,"convexMultiCast") ) { return convexMultiCast_dyn(); }
		if (HX_FIELD_EQ(inName,"continuousEvent") ) { return continuousEvent_dyn(); }
		if (HX_FIELD_EQ(inName,"wake_constraint") ) { return wake_constraint_dyn(); }
		if (HX_FIELD_EQ(inName,"interactionType") ) { return interactionType_dyn(); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"gravity_validate") ) { return gravity_validate_dyn(); }
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { return wrap_constraints; }
		if (HX_FIELD_EQ(inName,"c_arbiters_false") ) { return c_arbiters_false; }
		if (HX_FIELD_EQ(inName,"live_constraints") ) { return live_constraints; }
		if (HX_FIELD_EQ(inName,"callbackset_list") ) { return callbackset_list; }
		if (HX_FIELD_EQ(inName,"compounds_subber") ) { return compounds_subber_dyn(); }
		if (HX_FIELD_EQ(inName,"listeners_subber") ) { return listeners_subber_dyn(); }
		if (HX_FIELD_EQ(inName,"shapesUnderPoint") ) { return shapesUnderPoint_dyn(); }
		if (HX_FIELD_EQ(inName,"bodiesUnderPoint") ) { return bodiesUnderPoint_dyn(); }
		if (HX_FIELD_EQ(inName,"constraintCbWake") ) { return constraintCbWake_dyn(); }
		if (HX_FIELD_EQ(inName,"nullListenerType") ) { return nullListenerType_dyn(); }
		if (HX_FIELD_EQ(inName,"non_inlined_wake") ) { return non_inlined_wake_dyn(); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"constraints_adder") ) { return constraints_adder_dyn(); }
		if (HX_FIELD_EQ(inName,"unrevoke_listener") ) { return unrevoke_listener_dyn(); }
		if (HX_FIELD_EQ(inName,"constraintCbSleep") ) { return constraintCbSleep_dyn(); }
		if (HX_FIELD_EQ(inName,"constraintCbBreak") ) { return constraintCbBreak_dyn(); }
		if (HX_FIELD_EQ(inName,"freshListenerType") ) { return freshListenerType_dyn(); }
		if (HX_FIELD_EQ(inName,"static_validation") ) { return static_validation_dyn(); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gravity_invalidate") ) { return gravity_invalidate_dyn(); }
		if (HX_FIELD_EQ(inName,"constraints_subber") ) { return constraints_subber_dyn(); }
		if (HX_FIELD_EQ(inName,"remove_callbackset") ) { return remove_callbackset_dyn(); }
		if (HX_FIELD_EQ(inName,"nullInteractorType") ) { return nullInteractorType_dyn(); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"freshInteractorType") ) { return freshInteractorType_dyn(); }
		if (HX_FIELD_EQ(inName,"inlined_MRCA_chains") ) { return inlined_MRCA_chains_dyn(); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"continuousCollisions") ) { return continuousCollisions_dyn(); }
	}
	return super::__Field(inName,inCallProp);
}

Dynamic ZPP_Space_obj::__SetField(const ::String &inName,const Dynamic &inValue,bool inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"live") ) { live=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"outer") ) { outer=inValue.Cast< ::nape::space::Space >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stamp") ) { stamp=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"precb") ) { precb=inValue.Cast< ::nape::callbacks::PreCallback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mrca1") ) { mrca1=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Interactor >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mrca2") ) { mrca2=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Interactor >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bodies") ) { bodies=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bphase") ) { bphase=inValue.Cast< ::zpp_nape::space::ZPP_Broadphase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cbsets") ) { cbsets=inValue.Cast< ::zpp_nape::space::ZPP_CbSetManager >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pre_dt") ) { pre_dt=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"midstep") ) { midstep=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"islands") ) { islands=inValue.Cast< ::zpp_nape::space::ZPP_Island >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"userData") ) { userData=inValue.Cast< Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravityx") ) { gravityx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gravityy") ) { gravityy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__static") ) { __static=inValue.Cast< ::nape::phys::Body >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"compounds") ) { compounds=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Compound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_live") ) { wrap_live=inValue.Cast< ::nape::phys::BodyList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listeners") ) { listeners=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Listener >(); return inValue; }
		if (HX_FIELD_EQ(inName,"callbacks") ) { callbacks=inValue.Cast< ::zpp_nape::callbacks::ZPP_Callback >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toiEvents") ) { toiEvents=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_ToiEvent >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"kinematics") ) { kinematics=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f_arbiters") ) { f_arbiters=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_FluidArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"s_arbiters") ) { s_arbiters=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_SensorArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"continuous") ) { continuous=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"wrap_bodies") ) { wrap_bodies=inValue.Cast< ::nape::phys::BodyList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"constraints") ) { constraints=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Constraint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"staticsleep") ) { staticsleep=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Body >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"wrap_gravity") ) { wrap_gravity=inValue.Cast< ::nape::geom::Vec2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sortcontacts") ) { sortcontacts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_livecon") ) { wrap_livecon=inValue.Cast< ::nape::constraint::ConstraintList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prelisteners") ) { prelisteners=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_InteractionListener >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"wrap_arbiters") ) { wrap_arbiters=inValue.Cast< ::nape::dynamics::ArbiterList >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"wrap_compounds") ) { wrap_compounds=inValue.Cast< ::nape::phys::CompoundList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrap_listeners") ) { wrap_listeners=inValue.Cast< ::nape::callbacks::ListenerList >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"global_lin_drag") ) { global_lin_drag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"global_ang_drag") ) { global_ang_drag=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c_arbiters_true") ) { c_arbiters_true=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"convexShapeList") ) { convexShapeList=inValue.Cast< ::nape::shape::ShapeList >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"wrap_constraints") ) { wrap_constraints=inValue.Cast< ::nape::constraint::ConstraintList >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c_arbiters_false") ) { c_arbiters_false=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_ColArbiter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"live_constraints") ) { live_constraints=inValue.Cast< ::zpp_nape::util::ZNPList_ZPP_Constraint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"callbackset_list") ) { callbackset_list=inValue.Cast< ::zpp_nape::space::ZPP_CallbackSet >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ZPP_Space_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_CSTRING("outer"));
	outFields->push(HX_CSTRING("userData"));
	outFields->push(HX_CSTRING("gravityx"));
	outFields->push(HX_CSTRING("gravityy"));
	outFields->push(HX_CSTRING("wrap_gravity"));
	outFields->push(HX_CSTRING("bodies"));
	outFields->push(HX_CSTRING("wrap_bodies"));
	outFields->push(HX_CSTRING("compounds"));
	outFields->push(HX_CSTRING("wrap_compounds"));
	outFields->push(HX_CSTRING("constraints"));
	outFields->push(HX_CSTRING("wrap_constraints"));
	outFields->push(HX_CSTRING("kinematics"));
	outFields->push(HX_CSTRING("bphase"));
	outFields->push(HX_CSTRING("__static"));
	outFields->push(HX_CSTRING("global_lin_drag"));
	outFields->push(HX_CSTRING("global_ang_drag"));
	outFields->push(HX_CSTRING("stamp"));
	outFields->push(HX_CSTRING("midstep"));
	outFields->push(HX_CSTRING("time"));
	outFields->push(HX_CSTRING("sortcontacts"));
	outFields->push(HX_CSTRING("c_arbiters_true"));
	outFields->push(HX_CSTRING("c_arbiters_false"));
	outFields->push(HX_CSTRING("f_arbiters"));
	outFields->push(HX_CSTRING("s_arbiters"));
	outFields->push(HX_CSTRING("wrap_arbiters"));
	outFields->push(HX_CSTRING("live"));
	outFields->push(HX_CSTRING("wrap_live"));
	outFields->push(HX_CSTRING("live_constraints"));
	outFields->push(HX_CSTRING("wrap_livecon"));
	outFields->push(HX_CSTRING("staticsleep"));
	outFields->push(HX_CSTRING("islands"));
	outFields->push(HX_CSTRING("listeners"));
	outFields->push(HX_CSTRING("wrap_listeners"));
	outFields->push(HX_CSTRING("callbacks"));
	outFields->push(HX_CSTRING("callbackset_list"));
	outFields->push(HX_CSTRING("cbsets"));
	outFields->push(HX_CSTRING("convexShapeList"));
	outFields->push(HX_CSTRING("pre_dt"));
	outFields->push(HX_CSTRING("toiEvents"));
	outFields->push(HX_CSTRING("continuous"));
	outFields->push(HX_CSTRING("precb"));
	outFields->push(HX_CSTRING("prelisteners"));
	outFields->push(HX_CSTRING("mrca1"));
	outFields->push(HX_CSTRING("mrca2"));
	super::__GetFields(outFields);
};

static ::String sStaticFields[] = {
	String(null()) };

#if HXCPP_SCRIPTABLE
static hx::StorageInfo sMemberStorageInfo[] = {
	{hx::fsObject /*::nape::space::Space*/ ,(int)offsetof(ZPP_Space_obj,outer),HX_CSTRING("outer")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(ZPP_Space_obj,userData),HX_CSTRING("userData")},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,gravityx),HX_CSTRING("gravityx")},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,gravityy),HX_CSTRING("gravityy")},
	{hx::fsObject /*::nape::geom::Vec2*/ ,(int)offsetof(ZPP_Space_obj,wrap_gravity),HX_CSTRING("wrap_gravity")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Body*/ ,(int)offsetof(ZPP_Space_obj,bodies),HX_CSTRING("bodies")},
	{hx::fsObject /*::nape::phys::BodyList*/ ,(int)offsetof(ZPP_Space_obj,wrap_bodies),HX_CSTRING("wrap_bodies")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Compound*/ ,(int)offsetof(ZPP_Space_obj,compounds),HX_CSTRING("compounds")},
	{hx::fsObject /*::nape::phys::CompoundList*/ ,(int)offsetof(ZPP_Space_obj,wrap_compounds),HX_CSTRING("wrap_compounds")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Constraint*/ ,(int)offsetof(ZPP_Space_obj,constraints),HX_CSTRING("constraints")},
	{hx::fsObject /*::nape::constraint::ConstraintList*/ ,(int)offsetof(ZPP_Space_obj,wrap_constraints),HX_CSTRING("wrap_constraints")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Body*/ ,(int)offsetof(ZPP_Space_obj,kinematics),HX_CSTRING("kinematics")},
	{hx::fsObject /*::zpp_nape::space::ZPP_Broadphase*/ ,(int)offsetof(ZPP_Space_obj,bphase),HX_CSTRING("bphase")},
	{hx::fsObject /*::nape::phys::Body*/ ,(int)offsetof(ZPP_Space_obj,__static),HX_CSTRING("__static")},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,global_lin_drag),HX_CSTRING("global_lin_drag")},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,global_ang_drag),HX_CSTRING("global_ang_drag")},
	{hx::fsInt,(int)offsetof(ZPP_Space_obj,stamp),HX_CSTRING("stamp")},
	{hx::fsBool,(int)offsetof(ZPP_Space_obj,midstep),HX_CSTRING("midstep")},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,time),HX_CSTRING("time")},
	{hx::fsBool,(int)offsetof(ZPP_Space_obj,sortcontacts),HX_CSTRING("sortcontacts")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_ColArbiter*/ ,(int)offsetof(ZPP_Space_obj,c_arbiters_true),HX_CSTRING("c_arbiters_true")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_ColArbiter*/ ,(int)offsetof(ZPP_Space_obj,c_arbiters_false),HX_CSTRING("c_arbiters_false")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_FluidArbiter*/ ,(int)offsetof(ZPP_Space_obj,f_arbiters),HX_CSTRING("f_arbiters")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_SensorArbiter*/ ,(int)offsetof(ZPP_Space_obj,s_arbiters),HX_CSTRING("s_arbiters")},
	{hx::fsObject /*::nape::dynamics::ArbiterList*/ ,(int)offsetof(ZPP_Space_obj,wrap_arbiters),HX_CSTRING("wrap_arbiters")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Body*/ ,(int)offsetof(ZPP_Space_obj,live),HX_CSTRING("live")},
	{hx::fsObject /*::nape::phys::BodyList*/ ,(int)offsetof(ZPP_Space_obj,wrap_live),HX_CSTRING("wrap_live")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Constraint*/ ,(int)offsetof(ZPP_Space_obj,live_constraints),HX_CSTRING("live_constraints")},
	{hx::fsObject /*::nape::constraint::ConstraintList*/ ,(int)offsetof(ZPP_Space_obj,wrap_livecon),HX_CSTRING("wrap_livecon")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Body*/ ,(int)offsetof(ZPP_Space_obj,staticsleep),HX_CSTRING("staticsleep")},
	{hx::fsObject /*::zpp_nape::space::ZPP_Island*/ ,(int)offsetof(ZPP_Space_obj,islands),HX_CSTRING("islands")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Listener*/ ,(int)offsetof(ZPP_Space_obj,listeners),HX_CSTRING("listeners")},
	{hx::fsObject /*::nape::callbacks::ListenerList*/ ,(int)offsetof(ZPP_Space_obj,wrap_listeners),HX_CSTRING("wrap_listeners")},
	{hx::fsObject /*::zpp_nape::callbacks::ZPP_Callback*/ ,(int)offsetof(ZPP_Space_obj,callbacks),HX_CSTRING("callbacks")},
	{hx::fsObject /*::zpp_nape::space::ZPP_CallbackSet*/ ,(int)offsetof(ZPP_Space_obj,callbackset_list),HX_CSTRING("callbackset_list")},
	{hx::fsObject /*::zpp_nape::space::ZPP_CbSetManager*/ ,(int)offsetof(ZPP_Space_obj,cbsets),HX_CSTRING("cbsets")},
	{hx::fsObject /*::nape::shape::ShapeList*/ ,(int)offsetof(ZPP_Space_obj,convexShapeList),HX_CSTRING("convexShapeList")},
	{hx::fsFloat,(int)offsetof(ZPP_Space_obj,pre_dt),HX_CSTRING("pre_dt")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_ToiEvent*/ ,(int)offsetof(ZPP_Space_obj,toiEvents),HX_CSTRING("toiEvents")},
	{hx::fsBool,(int)offsetof(ZPP_Space_obj,continuous),HX_CSTRING("continuous")},
	{hx::fsObject /*::nape::callbacks::PreCallback*/ ,(int)offsetof(ZPP_Space_obj,precb),HX_CSTRING("precb")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_InteractionListener*/ ,(int)offsetof(ZPP_Space_obj,prelisteners),HX_CSTRING("prelisteners")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Interactor*/ ,(int)offsetof(ZPP_Space_obj,mrca1),HX_CSTRING("mrca1")},
	{hx::fsObject /*::zpp_nape::util::ZNPList_ZPP_Interactor*/ ,(int)offsetof(ZPP_Space_obj,mrca2),HX_CSTRING("mrca2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String sMemberFields[] = {
	HX_CSTRING("outer"),
	HX_CSTRING("userData"),
	HX_CSTRING("gravityx"),
	HX_CSTRING("gravityy"),
	HX_CSTRING("wrap_gravity"),
	HX_CSTRING("getgravity"),
	HX_CSTRING("gravity_invalidate"),
	HX_CSTRING("gravity_validate"),
	HX_CSTRING("bodies"),
	HX_CSTRING("wrap_bodies"),
	HX_CSTRING("compounds"),
	HX_CSTRING("wrap_compounds"),
	HX_CSTRING("constraints"),
	HX_CSTRING("wrap_constraints"),
	HX_CSTRING("kinematics"),
	HX_CSTRING("bphase"),
	HX_CSTRING("__static"),
	HX_CSTRING("global_lin_drag"),
	HX_CSTRING("global_ang_drag"),
	HX_CSTRING("stamp"),
	HX_CSTRING("midstep"),
	HX_CSTRING("time"),
	HX_CSTRING("sortcontacts"),
	HX_CSTRING("c_arbiters_true"),
	HX_CSTRING("c_arbiters_false"),
	HX_CSTRING("f_arbiters"),
	HX_CSTRING("s_arbiters"),
	HX_CSTRING("wrap_arbiters"),
	HX_CSTRING("live"),
	HX_CSTRING("wrap_live"),
	HX_CSTRING("live_constraints"),
	HX_CSTRING("wrap_livecon"),
	HX_CSTRING("staticsleep"),
	HX_CSTRING("islands"),
	HX_CSTRING("listeners"),
	HX_CSTRING("wrap_listeners"),
	HX_CSTRING("callbacks"),
	HX_CSTRING("callbackset_list"),
	HX_CSTRING("cbsets"),
	HX_CSTRING("clear"),
	HX_CSTRING("bodies_adder"),
	HX_CSTRING("bodies_subber"),
	HX_CSTRING("compounds_adder"),
	HX_CSTRING("compounds_subber"),
	HX_CSTRING("constraints_adder"),
	HX_CSTRING("constraints_subber"),
	HX_CSTRING("listeners_adder"),
	HX_CSTRING("listeners_subber"),
	HX_CSTRING("revoke_listener"),
	HX_CSTRING("unrevoke_listener"),
	HX_CSTRING("addListener"),
	HX_CSTRING("remListener"),
	HX_CSTRING("add_callbackset"),
	HX_CSTRING("remove_callbackset"),
	HX_CSTRING("transmitType"),
	HX_CSTRING("added_shape"),
	HX_CSTRING("removed_shape"),
	HX_CSTRING("addConstraint"),
	HX_CSTRING("remConstraint"),
	HX_CSTRING("addCompound"),
	HX_CSTRING("remCompound"),
	HX_CSTRING("addBody"),
	HX_CSTRING("remBody"),
	HX_CSTRING("shapesUnderPoint"),
	HX_CSTRING("bodiesUnderPoint"),
	HX_CSTRING("shapesInAABB"),
	HX_CSTRING("bodiesInAABB"),
	HX_CSTRING("shapesInCircle"),
	HX_CSTRING("bodiesInCircle"),
	HX_CSTRING("shapesInShape"),
	HX_CSTRING("bodiesInShape"),
	HX_CSTRING("rayCast"),
	HX_CSTRING("rayMultiCast"),
	HX_CSTRING("convexShapeList"),
	HX_CSTRING("convexCast"),
	HX_CSTRING("prepareCast"),
	HX_CSTRING("convexMultiCast"),
	HX_CSTRING("push_callback"),
	HX_CSTRING("pre_dt"),
	HX_CSTRING("step"),
	HX_CSTRING("toiEvents"),
	HX_CSTRING("continuousCollisions"),
	HX_CSTRING("continuousEvent"),
	HX_CSTRING("bodyCbWake"),
	HX_CSTRING("bodyCbSleep"),
	HX_CSTRING("constraintCbWake"),
	HX_CSTRING("constraintCbSleep"),
	HX_CSTRING("constraintCbBreak"),
	HX_CSTRING("nullListenerType"),
	HX_CSTRING("nullInteractorType"),
	HX_CSTRING("freshListenerType"),
	HX_CSTRING("freshInteractorType"),
	HX_CSTRING("wakeCompound"),
	HX_CSTRING("wakeIsland"),
	HX_CSTRING("non_inlined_wake"),
	HX_CSTRING("really_wake"),
	HX_CSTRING("wake_constraint"),
	HX_CSTRING("doForests"),
	HX_CSTRING("sleepArbiters"),
	HX_CSTRING("static_validation"),
	HX_CSTRING("validation"),
	HX_CSTRING("updateVel"),
	HX_CSTRING("updatePos"),
	HX_CSTRING("continuous"),
	HX_CSTRING("presteparb"),
	HX_CSTRING("prestep"),
	HX_CSTRING("warmStart"),
	HX_CSTRING("iterateVel"),
	HX_CSTRING("iteratePos"),
	HX_CSTRING("group_ignore"),
	HX_CSTRING("interactionType"),
	HX_CSTRING("precb"),
	HX_CSTRING("prelisteners"),
	HX_CSTRING("narrowPhase"),
	HX_CSTRING("mrca1"),
	HX_CSTRING("mrca2"),
	HX_CSTRING("MRCA_chains"),
	HX_CSTRING("inlined_MRCA_chains"),
	String(null()) };

static void sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ZPP_Space_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ZPP_Space_obj::__mClass,"__mClass");
};

#endif

Class ZPP_Space_obj::__mClass;

void ZPP_Space_obj::__register()
{
	hx::Static(__mClass) = hx::RegisterClass(HX_CSTRING("zpp_nape.space.ZPP_Space"), hx::TCanCast< ZPP_Space_obj> ,sStaticFields,sMemberFields,
	&__CreateEmpty, &__Create,
	&super::__SGetClass(), 0, sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , sVisitStatics
#endif
#ifdef HXCPP_SCRIPTABLE
    , sMemberStorageInfo
#endif
);
}

void ZPP_Space_obj::__boot()
{
}

} // end namespace zpp_nape
} // end namespace space
